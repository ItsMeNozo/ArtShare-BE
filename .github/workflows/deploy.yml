# .github/workflows/deploy.yml
name: ArtShare Backend Deploy

on:
  push:
    branches: ['main']

env:
  REGISTRY: docker.io # Docker Hub
  IMAGE_NAME: itsmestarlight/artshare-backend
  DOCKER_IMAGE: artshare-backend
  CONTAINER_NAME: backend
  VOLUME_NAME: artshare_model_cache

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: root
          key: ${{ secrets.DO_SSH_KEY }}
          envs: IMAGE_NAME,CONTAINER_NAME,VOLUME_NAME
          script: |
            set -e

            echo "🚀 Starting deployment for commit: $GITHUB_SHA"
            echo "📦 Using Docker Hub free (public repo - unlimited storage!)"

            echo "📦 Ensuring cache volume '${VOLUME_NAME}' exists..."
            docker volume create ${VOLUME_NAME} || true


            # Navigate to project directory
            cd ArtShare-BE/

            # Create minimal backup (current running image)
            echo "📦 Creating backup of current deployment..."
            BACKUP_IMAGE="${DOCKER_IMAGE}:backup-current"
            if docker images | grep -q "${DOCKER_IMAGE}:latest"; then
              # Remove old backup first to save space
              docker rmi ${DOCKER_IMAGE}:backup-current 2>/dev/null || true
              docker tag ${DOCKER_IMAGE}:latest $BACKUP_IMAGE
              echo "Single backup created: $BACKUP_IMAGE"
            fi

            # Pull the pre-built image from Docker Hub (NO LOGIN NEEDED for public repos!)
            echo "📥 Pulling pre-built image from Docker Hub..."
            docker pull $IMAGE_NAME:latest

            # Tag the Docker Hub image as our local latest
            docker tag $IMAGE_NAME:latest ${DOCKER_IMAGE}:latest

            # Function to rollback on failure
            rollback() {
              echo "❌ Deployment failed, rolling back..."
              if docker images | grep -q "${DOCKER_IMAGE}:backup-current"; then
                docker tag ${DOCKER_IMAGE}:backup-current ${DOCKER_IMAGE}:latest
                echo "✅ Local rollback completed"
                return 0
              else
                echo "⚠️ No backup available"
              fi
              exit 1
            }

            # Health check function
            health_check() {
              echo "🔍 Performing health check..."
              for i in {1..30}; do
                if docker exec $CONTAINER_NAME curl -f http://localhost:3000 2>/dev/null; then
                  echo "✅ Health check passed"
                  return 0
                fi
                echo "Waiting for application to start... ($i/30)"
                sleep 2
              done
              echo "❌ Health check failed"
              return 1
            }

            # Zero-downtime deployment strategy
            echo "🔄 Starting zero-downtime deployment..."

            # Start new container with temporary name
            TEMP_CONTAINER="${CONTAINER_NAME}-new"

            echo "🚀 Starting new container: $TEMP_CONTAINER"
            docker run -d \
              --name ${CONTAINER_NAME} \
              --restart unless-stopped \
              -p 3001:3000 \
              --env-file /root/ArtShare-BE/.env \
              -v ${VOLUME_NAME}:/app/.cache \
              --security-opt no-new-privileges:true \
              ${IMAGE_NAME}:latest || rollback

            # Wait for new container to be ready
            echo "⏳ Waiting for new container to be ready..."
            sleep 10

            # Check if new container is running
            if ! docker ps | grep -q $TEMP_CONTAINER; then
              echo "❌ New container failed to start"
              docker logs $TEMP_CONTAINER
              docker rm -f $TEMP_CONTAINER 2>/dev/null || true
              rollback
            fi

            # Test new container
            echo "🔍 Testing new container..."
            for i in {1..30}; do
              if docker exec $TEMP_CONTAINER curl -f http://localhost:3000 2>/dev/null; then
                echo "✅ New container is healthy"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "❌ New container health check failed"
                docker logs $TEMP_CONTAINER
                docker rm -f $TEMP_CONTAINER
                rollback
              fi
              echo "Waiting for new container... ($i/30)"
              sleep 2
            done

            # Stop old container and start new one on correct port
            echo "🔄 Switching to new container..."

            # Stop old container
            if docker ps | grep -q "$CONTAINER_NAME"; then
              docker stop $CONTAINER_NAME
              docker rm $CONTAINER_NAME
            fi

            # Stop temp container
            docker stop $TEMP_CONTAINER
            docker rm $TEMP_CONTAINER

            # Start final container on production port
            echo "🚀 Starting production container..."
            docker run -d \
              --name ${CONTAINER_NAME} \
              --restart unless-stopped \
              -p 3000:3000 \
              --env-file /root/ArtShare-BE/.env \
              -v ${VOLUME_NAME}:/app/.cache \
              --security-opt no-new-privileges:true \
              ${IMAGE_NAME}:latest || rollback

            # Final health check
            sleep 10
            if ! health_check; then
              rollback
            fi

            # Simple cleanup (no storage worries with Docker Hub free!)
            echo "🧹 Basic cleanup..."

            # Remove old backup images (keep only current backup)
            docker images | grep "${DOCKER_IMAGE}:backup-" | grep -v "backup-current" | awk '{print $3}' | xargs -r docker rmi || true

            # Remove dangling images
            docker image prune -f || true

            echo "✅ Deployment completed successfully!"
            echo "💰 Using Docker Hub free - no storage costs!"
            echo "📊 Container status:"
            docker ps | grep $CONTAINER_NAME

            echo "📝 Recent logs:"
            docker logs --tail 20 $CONTAINER_NAME

      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.3
        env:
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        with:
          host: ${{ secrets.DO_HOST }}
          username: root
          key: ${{ secrets.DO_SSH_KEY }}
          envs: CONTAINER_NAME
          script: |
            # Final verification
            echo "🔍 Final deployment verification..."

            # Check container is running
            if ! docker ps | grep -q "$CONTAINER_NAME"; then
              echo "❌ Container is not running!"
              exit 1
            fi

            # Check application responds
            sleep 5
            if docker exec $CONTAINER_NAME curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "✅ Application is responding"
            else
              echo "❌ Application is not responding"
              echo "Container logs:"
              docker logs --tail 50 $CONTAINER_NAME
              exit 1
            fi

            echo "🎉 Deployment verification successful!"

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "🎉 Deployment of commit ${{ github.sha }} completed successfully!"
          echo "📦 Image: ${{ env.IMAGE_NAME }}:latest"
          echo "💰 Cost: FREE (Docker Hub public repository)"

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "❌ Deployment failed for commit ${{ github.sha }}"
