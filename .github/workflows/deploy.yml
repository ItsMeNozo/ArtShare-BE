# .github/workflows/deploy.yml
name: ArtShare Backend Deploy

on:
  push:
    branches: ['main']

env:
  REGISTRY: docker.io
  IMAGE_NAME: itsmestarlight/artshare-backend
  DOCKER_IMAGE: artshare-backend
  CONTAINER_NAME: backend
  VOLUME_NAME: artshare_model_cache

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: root
          key: ${{ secrets.DO_SSH_KEY }}
          envs: IMAGE_NAME,CONTAINER_NAME,VOLUME_NAME
          script: |
            set -e

            echo "🚀 Starting deployment for commit: $GITHUB_SHA"
            echo "📦 Using Docker Hub free (public repo - unlimited storage!)"

            echo "📦 Ensuring cache volume '${VOLUME_NAME}' exists..."
            docker volume create ${VOLUME_NAME} || true


            # Navigate to project directory
            cd ArtShare-BE/

            # Memory cleanup before deployment
            echo "🧹 Cleaning up memory and Docker cache..."
            docker stop $CONTAINER_NAME 2>/dev/null || true
            docker rm $CONTAINER_NAME 2>/dev/null || true
            docker system prune -af --volumes || true
            sync && echo 3 > /proc/sys/vm/drop_caches || true

            echo "💾 Available memory after cleanup:"
            free -h

            # Create backup
            echo "📦 Creating backup of current deployment..."
            BACKUP_IMAGE="${DOCKER_IMAGE}:backup-current"
            if docker images | grep -q "${DOCKER_IMAGE}:latest"; then
              docker rmi ${DOCKER_IMAGE}:backup-current 2>/dev/null || true
              docker tag ${DOCKER_IMAGE}:latest $BACKUP_IMAGE
              echo "Backup created: $BACKUP_IMAGE"
            fi

            # Pull fresh image
            echo "📥 Pulling latest image from Docker Hub..."
            docker pull $IMAGE_NAME:latest
            docker tag $IMAGE_NAME:latest ${DOCKER_IMAGE}:latest

            # Rollback function
            rollback() {
              echo "❌ Deployment failed, rolling back..."
              if docker images | grep -q "${DOCKER_IMAGE}:backup-current"; then
                docker tag ${DOCKER_IMAGE}:backup-current ${DOCKER_IMAGE}:latest
                echo "✅ Rollback completed"
                return 0
              else
                echo "⚠️ No backup available"
              fi
              exit 1
            }

            # Simple deployment - stop old, start new
            echo "🚀 Starting new container..."
            docker run -d --name $CONTAINER_NAME \
              --restart=unless-stopped \
              --cap-drop=ALL \
              --cap-add=CHOWN \
              --cap-add=SETGID \
              --cap-add=SETUID \
              --security-opt=no-new-privileges:true \
              -p 127.0.0.1:3000:3000 \
              --env-file .env \
              -e OMP_NUM_THREADS=2 \
              -e ONNX_DISABLE_OPTIMIZATION=1 \
              -e TRANSFORMERS_CACHE=/app/.cache \
              -e TRANSFORMERS_OFFLINE=0 \
              --no-healthcheck \
              --entrypoint sh ${DOCKER_IMAGE}:latest \
              -c "npx prisma migrate deploy && node dist/src/main.js" || rollback

            # Wait for app to start
            echo "⏳ Waiting for application to start..."
            sleep 30

            # Health check
            echo "🔍 Performing health check..."
            for i in {1..60}; do
              if docker exec $CONTAINER_NAME curl -f http://localhost:3000/ >/dev/null 2>&1; then
                echo "✅ Health check passed"
                break
              fi
              if [ $i -eq 60 ]; then
                echo "❌ Health check failed"
                docker logs --tail 50 $CONTAINER_NAME || true
                rollback
              fi
              echo "Waiting for application to respond... ($i/60)"
              sleep 3
            done

            # Cleanup
            echo "🧹 Cleaning up..."
            docker images | grep "${DOCKER_IMAGE}:backup-" | grep -v "backup-current" | awk '{print $3}' | xargs -r docker rmi || true
            docker image prune -f || true

            echo "✅ Deployment completed successfully!"
            echo "📊 Container status:"
            docker ps | grep $CONTAINER_NAME
            echo "📝 Recent logs:"
            docker logs --tail 20 $CONTAINER_NAME

      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.3
        env:
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        with:
          host: ${{ secrets.DO_HOST }}
          username: root
          key: ${{ secrets.DO_SSH_KEY }}
          envs: CONTAINER_NAME
          script: |
            echo "🔍 Final deployment verification..."

            # Check container is running
            if ! docker ps | grep -q "$CONTAINER_NAME"; then
              echo "❌ Container is not running!"
              exit 1
            fi

            # Test application response
            sleep 10
            if docker exec $CONTAINER_NAME curl -f http://localhost:3000/ >/dev/null 2>&1; then
              echo "✅ Application is responding with 'Hello World!'"
            else
              echo "❌ Application is not responding"
              echo "Container logs:"
              docker logs --tail 50 $CONTAINER_NAME
              exit 1
            fi

            echo "🎉 Deployment verification successful!"

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "🎉 Deployment of commit ${{ github.sha }} completed successfully!"
          echo "📦 Image: ${{ env.IMAGE_NAME }}:latest"
          echo "💰 Cost: FREE (Docker Hub public repository)"

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "❌ Deployment failed for commit ${{ github.sha }}"
