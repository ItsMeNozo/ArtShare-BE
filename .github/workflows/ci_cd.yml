# .github/workflows/ci_cd.yml
name: ArtShare Backend CI/CD

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

# Environment variables available to all jobs
env:
  REGISTRY: docker.io
  IMAGE_NAME: itsmestarlight/artshare-backend
  DOCKER_IMAGE: artshare-backend
  CONTAINER_NAME: backend
  VOLUME_NAME: artshare_model_cache

jobs:
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'
      - name: Install Dependencies
        run: yarn install --frozen-lockfile
      - name: Run Linting
        run: yarn lint
      - name: Audit for High Severity Vulnerabilities
        run: yarn audit --level=high
        continue-on-error: true

  build-and-test:
    name: Build and Verify Container
    runs-on: ubuntu-latest
    env:
      SECRETS_CONTEXT: ${{ toJSON(secrets) }}

    services:
      postgres:
        image: postgres:15-alpine
        env: { POSTGRES_USER: test, POSTGRES_PASSWORD: test, POSTGRES_DB: test }
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          # Build with layer caching for faster builds
          docker build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from ${{ env.IMAGE_NAME }}:latest \
            -t ${{ env.IMAGE_NAME }}:test .

      - name: Create .env file from secrets context
        env:
          ENV_VARS: ${{ secrets.DOT_ENV_FILE }}
        run: |
          echo "üß™ Creating .env.ci file..."

          # This is the core command. The double quotes are crucial.
          # They ensure that all newlines and special characters from the secret are preserved.
          echo "${ENV_VARS}" > .env.ci

          echo "‚úÖ .env.ci file created successfully."
          echo "--- .env.ci keys (values are masked) ---"
          cut -d'=' -f1 .env.ci
          echo 'NODE_ENV=production' >> .env.ci
          echo 'DATABASE_URL=postgresql://test:test@host.docker.internal:5432/test' >> .env.ci
          echo "----------------------------------------"

      - name: Verify Container in a Production-like Environment
        run: |
          echo "üß™ Starting full container verification..."
          function handle_failure() {
            echo "‚ùå Verification failed: $1"
            echo "--- Container Logs ---"
            docker logs test-container
            echo "----------------------"
            docker stop test-container
            exit 1
          }


          # The container's entrypoint.sh will automatically run migrations
          docker run -d --name test-container \
            -p 3000:3000 \
            --add-host=host.docker.internal:host-gateway \
            --env-file .env.ci \
            -e ENABLE_SWAGGER_FOR_CI=true \
            ${{ env.IMAGE_NAME }}:test

          echo "‚è≥ Waiting for container to start and pass health check..."
          for i in {1..30}; do
            if docker exec test-container curl -f http://localhost:3000/ >/dev/null 2>&1; then
              echo "‚úÖ Container is responsive."

              if docker exec test-container curl -f http://localhost:3000/api/swagger-ui-init.js >/dev/null 2>&1; then
                echo "‚úÖ Swagger UI is accessible."
                echo "‚úÖ All container checks passed!"
                docker stop test-container
                exit 0
              fi
              
              handle_failure "Swagger UI endpoint is not accessible."
            fi
            echo "Waiting... (attempt $i/30)"
            sleep 5
          done

          handle_failure "Container never became healthy."

      - name: Login and Push to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin  

          echo "üè∑Ô∏è  Tagging image with 'latest' and '${{ github.sha }}'"
          docker tag ${{ env.IMAGE_NAME }}:test ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker tag ${{ env.IMAGE_NAME }}:test ${{ env.IMAGE_NAME }}:latest

          echo "üì§ Pushing all tags to Docker Hub..."
          docker push --all-tags ${{ env.IMAGE_NAME }}

      - name: Report Status
        run: echo "‚úÖ CI Job Completed."

  ci-result:
    name: CI Result
    runs-on: ubuntu-latest
    needs: [static-analysis, build-and-test]
    if: always()
    steps:
      - name: Check status of previous jobs
        run: |
          echo "Static Analysis Result: ${{ needs.static-analysis.result }}"
          echo "Build and Test Result: ${{ needs.build-and-test.result }}"
          if [[ "${{ needs.static-analysis.result }}" == "failure" || "${{ needs.build-and-test.result }}" == "failure" ]]; then
            echo "‚ùå One or more jobs failed."
            exit 1
          else
            echo "‚úÖ All jobs passed."
          fi
  # ==================================
  #      CD Job: Deploy
  # ==================================
  # This job runs ONLY after 'build-and-test' succeeds on a push to 'main'.
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: root
          key: ${{ secrets.DO_SSH_KEY }}
          envs: GITHUB_SHA,REGISTRY,IMAGE_NAME,DOCKER_IMAGE,CONTAINER_NAME,VOLUME_NAME,MEM_LIMIT,CPU_LIMIT
          script: |
            set -euo pipefail

            echo "üöÄ Deploying commit: $GITHUB_SHA"
            docker volume create "$VOLUME_NAME" >/dev/null 2>&1 || true
            cd ArtShare-BE/

            start_prod_container() {
              local tag="${1:-latest}" 
              local name="${2:-$CONTAINER_NAME}"
              local host_port="${3:-3000}"
              printf "‚ñ∂Ô∏è  Starting container %s:%s as %s on port %s\n" \
                    "$DOCKER_IMAGE" "$tag" "$name" "$host_port"

              docker run -d --name "$name" \
                --restart=unless-stopped \
                --cap-drop=ALL \
                --cap-add=CHOWN --cap-add=SETGID --cap-add=SETUID \
                --security-opt no-new-privileges:true \
                -p "127.0.0.1:${host_port}:3000" \
                --env-file .env \
                --memory="${MEM_LIMIT:=7g}" \
                --memory-swap="${MEM_LIMIT:=7g}" \
                --cpus="${CPU_LIMIT:=3.8}" \
                -e TZ=Asia/Ho_Chi_Minh \
                -e LC_ALL=en_GB.UTF-8 \
                -v "${VOLUME_NAME}:/app/.cache" \
                --label "app=artshare" \
                --label "deploy_sha=${GITHUB_SHA}" \
                "${DOCKER_IMAGE}:${tag}"
            }

            rollback() {
              echo "‚ùå Deployment failed ‚Äì rolling back‚Ä¶"
              trap - ERR
              
              if docker image inspect "$BACKUP_TAG" >/dev/null 2>&1; then
                docker stop "${CONTAINER_NAME}" 2>/dev/null || true
                docker rm   "${CONTAINER_NAME}" 2>/dev/null || true
                docker tag "${BACKUP_TAG}" "${DOCKER_IMAGE}:latest"
                start_prod_container latest
                echo "‚úÖ Rollback complete ‚Äì service restored from backup"
              else
                echo "‚ö†Ô∏è  No backup available; manual fix required"
                exit 1
              fi
            }

            trap 'rollback' ERR

            # ------------------------------------------------------------------
            # Backup current image (if any)
            # ------------------------------------------------------------------
            BACKUP_TAG="${DOCKER_IMAGE}:backup-current"
            if docker image inspect "$DOCKER_IMAGE:latest" >/dev/null 2>&1; then
              docker rmi "${BACKUP_TAG}" 2>/dev/null || true
              docker tag "${DOCKER_IMAGE}:latest" "${BACKUP_TAG}"
              echo "‚úÖ Backup created ‚Üí ${BACKUP_TAG}"
            else
              echo "‚ÑπÔ∏è  No existing image to back up."
            fi

            # ------------------------------------------------------------------
            # Pull new image and tag
            # ------------------------------------------------------------------
            docker pull "${IMAGE_NAME}:${GITHUB_SHA}"
            docker tag  "${IMAGE_NAME}:${GITHUB_SHA}" "${DOCKER_IMAGE}:latest"

            # ------------------------------------------------------------------
            # Stop & clean
            # ------------------------------------------------------------------
            docker stop -t 30 "${CONTAINER_NAME}" 2>/dev/null || true
            docker rm   "${CONTAINER_NAME}" 2>/dev/null || true


            # ------------------------------------------------------------------
            # Start new container with health checks
            # ------------------------------------------------------------------
            start_prod_container latest

            echo "‚è≥ Waiting for app to be healthy‚Ä¶"
            for i in {1..120}; do
              if docker exec "${CONTAINER_NAME}" curl -fSs http://localhost:3000/ >/dev/null 2>&1; then
                echo "‚úÖ Health check passed"
                break
              fi
              if [ "$i" -eq 120 ]; then
                echo "‚ùå Health check timed out"
                docker logs --tail 100 "${CONTAINER_NAME}" || true
                false # ‚Üê returns exit-code 1
              fi
              sleep 2
            done

            if docker ps -q --filter "name=$CONTAINER_NAME" --filter "status=running" | grep -q .; then
              docker stats --no-stream "$CONTAINER_NAME"
            fi

            trap - ERR  # success ‚Üí disable rollback trap

            # ------------------------------------------------------------------
            # House-keeping
            # ------------------------------------------------------------------
            docker images --filter "reference=${DOCKER_IMAGE}:backup-*" -q \
              | xargs -r docker rmi || true
            docker image prune -f

            echo "üéâ Deployment finished successfully!"
            docker ps --filter "name=${CONTAINER_NAME}"

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "üéâ Deployment of commit ${{ github.sha }} completed successfully!"
          echo "üì¶ Image: ${{ env.IMAGE_NAME }}:latest"
          echo "üí∞ Cost: FREE (Docker Hub public repository)"

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed for commit ${{ github.sha }}"

  deploy-test:
    name: Deploy Test Environment
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy Test Environment to Digital Ocean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: root
          key: ${{ secrets.DO_SSH_KEY }}
          envs: GITHUB_SHA,IMAGE_NAME
          script: |
            set -euo pipefail

            CONTAINER_NAME="backend-test"
            VOLUME_NAME="artshare_test_model_cache"
            HOST_PORT="3001"
            ENV_FILE=".env.test"

            echo "üöÄ Deploying test env with commit: $GITHUB_SHA"
            docker volume create "$VOLUME_NAME" >/dev/null 2>&1 || true
            cd ArtShare-BE/

            # Pull latest image
            docker pull "${IMAGE_NAME}:${GITHUB_SHA}"

            # Stop and remove existing test container
            docker stop "$CONTAINER_NAME" 2>/dev/null || true
            docker rm "$CONTAINER_NAME" 2>/dev/null || true

            # Start test container with memory limits
            docker run -d --name "$CONTAINER_NAME" \
              --restart=unless-stopped \
              --memory=2g \
              --memory-swap=2g \
              --cpus=2 \
              --cap-drop=ALL \
              --cap-add=CHOWN \
              --cap-add=SETGID \
              --cap-add=SETUID \
              --security-opt=no-new-privileges:true \
              -p 127.0.0.1:3001:3001 \
              --env-file "$ENV_FILE" \
              -e OMP_NUM_THREADS=1 \
              -e ONNX_DISABLE_OPTIMIZATION=1 \
              -e TZ=Asia/Ho_Chi_Minh \
              -e LC_ALL=en_GB.UTF-8 \
              -e NODE_ENV=test \
              -e PORT=3001 \
              -v "${VOLUME_NAME}:/app/.cache" \
              --no-healthcheck \
              "${IMAGE_NAME}:${GITHUB_SHA}"


            # Health check for test environment
            for i in {1..120}; do  # 4 minutes total timeout like production
              if docker exec "$CONTAINER_NAME" curl -fSs http://localhost:3001/ >/dev/null 2>&1; then
                echo "‚úÖ Test environment is running and healthy"
                break
              fi
              if [ $i -eq 120 ]; then
                echo "‚ùå Test environment failed to start"
                echo "üìã Container logs:"
                docker logs --tail 100 "$CONTAINER_NAME" || true
                exit 1
              fi
              echo "Waiting for test environment... ($i/120)"
              sleep 2
            done

            echo "‚úÖ Test environment deployed successfully!"
            echo "üåê Test environment will be available at: https://test.artsharebe.id.vn"
            echo "üìä Container status:"
            docker ps | grep backend-test
            docker stats backend-test --no-stream

      - name: Notify Test Deployment Success
        if: success()
        run: |
          echo "üéâ Test environment deployment of commit ${{ github.sha }} completed successfully!"
          echo "üåê Test URL: https://test.artsharebe.id.vn"
          echo "üíæ Memory limit: 2GB"

      - name: Notify Test Deployment Failure
        if: failure()
        run: |
          echo "‚ùå Test environment deployment failed for commit ${{ github.sha }}"
