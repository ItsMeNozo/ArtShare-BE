name: ArtShare Backend CI

on:
  push:
    branches-ignore: ['main'] 
  pull_request:
    branches: ['main']

env:
  REGISTRY: registry.digitalocean.com/artshare-be
  IMAGE_NAME: artshare-backend
  DOCKER_IMAGE: artshare-backend

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Run Linting
        run: yarn lint

      - name: Run Formatting Check
        run: yarn format

      - name: Audit Dependencies
        run: yarn audit --level=high
        continue-on-error: true

      - name: Build Project (Production)
        env:
          NODE_ENV: production
        run: |
          set -e
          yarn build
          if [ ! -d "dist" ] && [ ! -d "build" ]; then
            echo "Build output directory not found!"
            exit 1
          fi

      - name: Build Docker Image
        run: |
          # Build with layer caching for faster builds
          docker build \
            --cache-from ${{ env.DOCKER_IMAGE }}:latest \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            -t ${{ env.DOCKER_IMAGE }}:test .

      - name: Test Docker Container
        run: |
          # Test container can start
          docker run -d --name test-container \
            -p 3001:3000 \
            -e NODE_ENV=production \
            -e DATABASE_URL="postgresql://test:test@localhost:5432/test" \
            ${{ env.DOCKER_IMAGE }}:test \
            sh -c "echo 'Container test successful' && sleep 10"
          
          sleep 5
          docker logs test-container
          docker stop test-container || true
          docker rm test-container || true

      # Push to registry on all feature branches (so image is ready for deployment)
      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DIGITALOCEAN_REGISTRY_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_REGISTRY_TOKEN }}

      - name: Push to Registry (Feature Branches)
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          
          # Tag for registry
          docker tag ${{ env.DOCKER_IMAGE }}:test ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          docker tag ${{ env.DOCKER_IMAGE }}:test ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Push both tags
          echo "üì§ Pushing ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          
          echo "üì§ Pushing ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Clean up old registry tags
        run: |
          # Install doctl for registry management
          sudo snap install doctl
          echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | doctl auth init --access-token-stdin
          
          echo "üßπ Balanced cleanup for DO Basic plan (5GB, 1.6GB images)..."
          
          # Balanced strategy: Keep latest + 1 recent (total ~3.2GB = 64% of Basic plan)
          # This gives you rollback capability while staying safely under limit
          OLD_TAGS=$(doctl registry repository list-tags ${{ env.IMAGE_NAME }} --format Tag,UpdatedAt --no-header | grep -v "latest" | sort -k2 -r | tail -n +2 | awk '{print $1}')
          
          if [ -n "$OLD_TAGS" ]; then
            echo "üóëÔ∏è Deleting old tags (keeping latest + 1 recent): $OLD_TAGS"
            echo "üíæ Target storage: ~3.2GB (64% of DO Basic plan)"
            
            for tag in $OLD_TAGS; do
              doctl registry repository delete-tag ${{ env.IMAGE_NAME }} $tag --force || echo "Failed to delete $tag"
            done
            
            # Run garbage collection to free space
            echo "‚ôªÔ∏è Running garbage collection..."
            doctl registry garbage-collection start --force || echo "Garbage collection skipped"
            
            echo "üìä Expected result: 'latest' + 1 recent commit tag (~3.2GB total)"
          else
            echo "‚úÖ Already optimal (latest + 1 recent or fewer)"
          fi
          
          # Check storage usage
          TOTAL_STORAGE=$(doctl registry get --format StorageUsageBytes --no-header 2>/dev/null || echo "0")
          if [ "$TOTAL_STORAGE" != "0" ]; then
            TOTAL_STORAGE_MB=$((TOTAL_STORAGE / 1024 / 1024))
            echo "üìä Current usage: ${TOTAL_STORAGE_MB}MB of 5GB DO Basic plan"
            
            if [ $TOTAL_STORAGE_MB -gt 4000 ]; then
              echo "‚ö†Ô∏è WARNING: Approaching 80% of DO Basic plan limit"
            fi
          fi

      - name: Report Status
        run: |
          echo "‚úÖ Built, tested, and pushed to registry (ready for deployment when merged to main)"