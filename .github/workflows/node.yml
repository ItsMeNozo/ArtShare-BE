name: Node.js CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Run Linting
        run: yarn lint

      - name: Run Formatting Check
        run: yarn format

      - name: Audit Dependencies
        run: yarn audit --level=high
        continue-on-error: true  # Don't fail CI, but report

      - name: Build Project (Production)
        env:
          NODE_ENV: production
        run: |
          set -e
          yarn build
          # Validate build output exists
          if [ ! -d "dist" ] && [ ! -d "build" ]; then
            echo "Build output directory not found!"
            exit 1
          fi

      - name: Build Docker Image
        run: docker build -t artshare-backend:test .

      - name: Test Docker Container
        run: |
          # Run the container
          docker run -d --name test-container \
            -p 3000:3000 \
            -e NODE_ENV=production \
            artshare-backend:test
          
          # Wait for it to start
          sleep 10
          
          # Check if container is still running
          if [ ! "$(docker ps -q -f name=test-container)" ]; then
            echo "Container crashed!"
            docker logs test-container
            exit 1
          fi
          
          # Try to hit the health endpoint
          curl -f http://localhost:3000/health || \
            (docker logs test-container && exit 1)
          
          # Cleanup
          docker stop test-container
          docker rm test-container
      # - name: Run Unit Tests
      #   run: yarn test --coverage --passWithNoTests=false

      # - name: Run Integration Tests
      #   run: yarn test:integration
      #   if: ${{ always() }}  # Run even if unit tests fail

      # - name: Start and Smoke Test
      #   run: |
      #     yarn start & 
      #     SERVER_PID=$!
      #     sleep 10  # Wait for server to start
      #     curl -f http://localhost:3000 || (kill $SERVER_PID && exit 1)
      #     kill $SERVER_PID