name: ArtShare Backend CI/CD

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  DOCKER_IMAGE: artshare-backend
  CONTAINER_NAME: backend

jobs:
  # Build and Test Job (your existing logic with improvements)
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Run Linting
        run: yarn lint

      - name: Run Formatting Check
        run: yarn format

      - name: Audit Dependencies
        run: yarn audit --level=high
        continue-on-error: true

      - name: Build Project (Production)
        env:
          NODE_ENV: production
        run: |
          set -e
          yarn build
          if [ ! -d "dist" ] && [ ! -d "build" ]; then
            echo "Build output directory not found!"
            exit 1
          fi

      - name: Build Docker Image with Cache
        run: |
          # Build with layer caching for faster builds
          docker build \
            --cache-from ${{ env.DOCKER_IMAGE }}:latest \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            -t ${{ env.DOCKER_IMAGE }}:test .

      - name: Debug Branch Info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Is main branch: ${{ github.ref == 'refs/heads/main' }}"

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ github.sha }}
          path: docker-image.tar.gz
          retention-days: 7

      - name: Test Docker Container
        run: |
          # Test container can start
          docker run -d --name test-container \
            -p 3001:3000 \
            -e NODE_ENV=production \
            -e DATABASE_URL="postgresql://test:test@localhost:5432/test" \
            ${{ env.DOCKER_IMAGE }}:test \
            sh -c "echo 'Container test successful' && sleep 10"
          
          sleep 5
          docker logs test-container
          docker stop test-container || true
          docker rm test-container || true

  # Deploy Job (only runs on main branch push)
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.3
        env:
          GITHUB_SHA: ${{ github.sha }}
          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        with:
          host: ${{ secrets.DO_HOST }}
          username: root
          key: ${{ secrets.DO_SSH_KEY }}
          envs: GITHUB_SHA,DOCKER_IMAGE,CONTAINER_NAME
          script: |
            set -e
            
            echo "üöÄ Starting deployment for commit: $GITHUB_SHA"
            
            # Navigate to project directory
            cd ArtShare-BE/
            
            # Backup current state for rollback
            echo "üì¶ Creating backup of current deployment..."
            BACKUP_IMAGE="${DOCKER_IMAGE}:backup-$(date +%s)"
            if docker images | grep -q "${DOCKER_IMAGE}:latest"; then
              docker tag ${DOCKER_IMAGE}:latest $BACKUP_IMAGE
              echo "Backup created: $BACKUP_IMAGE"
            fi
            
            # Pull latest code
            echo "üì• Pulling latest code from main branch..."
            git fetch origin
            git checkout main
            git reset --hard origin/main
            
            # Build new image with layer caching for faster builds
            echo "üî® Building Docker image with caching..."
            docker build \
              --cache-from ${DOCKER_IMAGE}:latest \
              --build-arg BUILDKIT_INLINE_CACHE=1 \
              -t ${DOCKER_IMAGE}:${GITHUB_SHA} \
              -t ${DOCKER_IMAGE}:latest .
            
            # Function to rollback on failure
            rollback() {
              echo "‚ùå Deployment failed, rolling back..."
              if docker images | grep -q "$BACKUP_IMAGE"; then
                docker tag $BACKUP_IMAGE ${DOCKER_IMAGE}:latest
                echo "Rollback image restored"
              fi
              exit 1
            }
            
            # Health check function
            health_check() {
              echo "üîç Performing health check..."
              for i in {1..30}; do
                if docker exec $CONTAINER_NAME curl -f http://localhost:3000 2>/dev/null; then
                  echo "‚úÖ Health check passed"
                  return 0
                fi
                echo "Waiting for application to start... ($i/30)"
                sleep 2
              done
              echo "‚ùå Health check failed"
              return 1
            }
            
            # Zero-downtime deployment strategy
            echo "üîÑ Starting zero-downtime deployment..."
            
            # Start new container with temporary name
            TEMP_CONTAINER="${CONTAINER_NAME}-new"
            
            echo "üöÄ Starting new container: $TEMP_CONTAINER"
            docker run -d --name $TEMP_CONTAINER \
              --restart=unless-stopped \
              --cap-drop=ALL \
              --cap-add=CHOWN \
              --cap-add=SETGID \
              --cap-add=SETUID \
              --security-opt=no-new-privileges:true \
              -p 127.0.0.1:3001:3000 \
              --env-file .env \
              --entrypoint sh ${DOCKER_IMAGE}:latest \
              -c "npx prisma migrate deploy && node dist/src/main.js" || rollback
            
            # Wait for new container to be ready
            echo "‚è≥ Waiting for new container to be ready..."
            sleep 10
            
            # Check if new container is running
            if ! docker ps | grep -q $TEMP_CONTAINER; then
              echo "‚ùå New container failed to start"
              docker logs $TEMP_CONTAINER
              docker rm -f $TEMP_CONTAINER 2>/dev/null || true
              rollback
            fi
            
            # Test new container
            echo "üîç Testing new container..."
            for i in {1..30}; do
              if docker exec $TEMP_CONTAINER curl -f http://localhost:3000 2>/dev/null; then
                echo "‚úÖ New container is healthy"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "‚ùå New container health check failed"
                docker logs $TEMP_CONTAINER
                docker rm -f $TEMP_CONTAINER
                rollback
              fi
              echo "Waiting for new container... ($i/30)"
              sleep 2
            done
            
            # Stop old container and start new one on correct port
            echo "üîÑ Switching to new container..."
            
            # Stop old container
            if docker ps | grep -q "$CONTAINER_NAME"; then
              docker stop $CONTAINER_NAME
              docker rm $CONTAINER_NAME
            fi
            
            # Stop temp container
            docker stop $TEMP_CONTAINER
            docker rm $TEMP_CONTAINER
            
            # Start final container on production port
            echo "üöÄ Starting production container..."
            docker run -d --name $CONTAINER_NAME \
              --restart=unless-stopped \
              --cap-drop=ALL \
              --cap-add=CHOWN \
              --cap-add=SETGID \
              --cap-add=SETUID \
              --security-opt=no-new-privileges:true \
              -p 127.0.0.1:3000:3000 \
              --env-file .env \
              --entrypoint sh ${DOCKER_IMAGE}:latest \
              -c "npx prisma migrate deploy && node dist/src/main.js" || rollback
            
            # Final health check
            sleep 10
            if ! health_check; then
              rollback
            fi
            
            # Clean up old images (keep last 3)
            echo "üßπ Cleaning up old Docker images..."
            docker images $DOCKER_IMAGE --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | \
              grep -v "latest\|backup" | \
              tail -n +4 | \
              awk '{print $1}' | \
              xargs -r docker rmi || true
            
            echo "‚úÖ Deployment completed successfully!"
            echo "üìä Container status:"
            docker ps | grep $CONTAINER_NAME
            
            echo "üìù Recent logs:"
            docker logs --tail 20 $CONTAINER_NAME

      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.3
        env:
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        with:
          host: ${{ secrets.DO_HOST }}
          username: root
          key: ${{ secrets.DO_SSH_KEY }}
          envs: CONTAINER_NAME
          script: |
            # Final verification
            echo "üîç Final deployment verification..."
            
            # Check container is running
            if ! docker ps | grep -q "$CONTAINER_NAME"; then
              echo "‚ùå Container is not running!"
              exit 1
            fi
            
            # Check application responds
            sleep 5
            if docker exec $CONTAINER_NAME curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "‚úÖ Application is responding"
            else
              echo "‚ùå Application is not responding"
              echo "Container logs:"
              docker logs --tail 50 $CONTAINER_NAME
              exit 1
            fi
            
            echo "üéâ Deployment verification successful!"

      - name: Notify Deployment Success
        if: success()
        uses: appleboy/ssh-action@v1.0.3
        env:
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        with:
          host: ${{ secrets.DO_HOST }}
          username: root
          key: ${{ secrets.DO_SSH_KEY }}
          envs: CONTAINER_NAME
          script: |
            echo "üéâ Deployment of commit ${{ github.sha }} completed successfully!"
            echo "üìä Current status:"
            docker ps | grep $CONTAINER_NAME
            echo "üîó Application should be available at your domain"

      - name: Notify Deployment Failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        env:
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        with:
          host: ${{ secrets.DO_HOST }}
          username: root
          key: ${{ secrets.DO_SSH_KEY }}
          envs: CONTAINER_NAME
          script: |
            echo "‚ùå Deployment failed for commit ${{ github.sha }}"
            echo "üìä Current container status:"
            docker ps -a | grep $CONTAINER_NAME || echo "No backend container found"
            echo "üìù Recent logs:"
            docker logs --tail 50 $CONTAINER_NAME 2>/dev/null || echo "No logs available"