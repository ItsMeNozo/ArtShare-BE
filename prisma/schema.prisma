generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  role_id   Int        @id @default(autoincrement())
  role_name String     @unique
  createdAt DateTime   @default(now()) @map("created_at")
  users     UserRole[]

  @@map("role")
}

model UserRole {
  user_id    String
  role_id    Int
  assignedAt DateTime @default(now()) @map("assigned_at")
  role       Role     @relation(fields: [role_id], references: [role_id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, role_id])
  @@map("user_role")
}

model User {
  id                  String    @id
  username            String    @unique
  email               String    @unique
  full_name           String?
  profile_picture_url String?
  bio                 String?
  birthday            DateTime? @db.Date
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt
  refresh_token       String?
  followers_count     Int       @default(0)
  followings_count    Int       @default(0)

  collections Collection[]
  blogs       Blog[]
  bookmarks   Bookmark[]
  comments    Comment[]
  followers   Follow[]     @relation("Follower")
  followings  Follow[]     @relation("Following")
  likes       Like[]
  posts       Post[]
  ratings     Rating[]
  shares      Share[]
  roles       UserRole[]
  Report      Report[]     @relation("UserReports")

  @@map("user")
}

model Post {
  id            Int       @id @default(autoincrement())
  user_id       String
  title         String
  description   String?
  created_at    DateTime  @default(now())
  is_published  Boolean   @default(false)
  is_private    Boolean   @default(false)
  group_id      Int?
  share_count   Int       @default(0)
  comment_count Int       @default(0)
  view_count    Int       @default(0)
  like_count    Int       @default(0)
  thumbnail_url String
  updated_at    DateTime? @updatedAt
  is_mature     Boolean   @default(false)
  ai_created    Boolean   @default(false)

  likes       Like[]
  medias      Media[]
  collections Collection[]
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  shares      Share[]
  categories  Category[]   @relation("CategoryToPost")

  @@index([user_id])
  @@map("post")
}

model Blog {
  id              Int       @id @default(autoincrement())
  user_id         String
  title           String
  content         String
  created_at      DateTime  @default(now())
  is_published    Boolean   @default(false)
  like_count      Int       @default(0)
  comment_count   Int       @default(0)
  share_count     Int       @default(0)
  view_count      Int       @default(0)
  updated_at      DateTime? @updatedAt
  average_rating  Float     @default(0)
  is_protected    Boolean   @default(false)
  rating_count    Int       @default(0)
  embedded_videos String[]

  pictures   String[]
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  bookmarks  Bookmark[]
  likes      Like[]
  ratings    Rating[]
  shares     Share[]
  categories Category[] @relation("CategoryToBlog")

  @@index([user_id])
  @@index([created_at])
  @@map("blog")
}

model Media {
  id          Int       @id @default(autoincrement())
  post_id     Int
  media_type  MediaType
  description String?
  url         String
  downloads   Int       @default(0)
  created_at  DateTime  @default(now())
  creator_id  String
  post        Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([post_id])
  @@map("media")
}

model Category {
  created_at     DateTime     @default(now())
  id             Int          @id @default(autoincrement())
  name           String       @unique
  description    String?
  example_images String[]
  type           CategoryType @default(ATTRIBUTE)
  updated_at     DateTime?    @updatedAt
  blogs          Blog[]       @relation("CategoryToBlog")
  posts          Post[]       @relation("CategoryToPost")

  @@map("category")
}

model Like {
  id         Int      @id @default(autoincrement())
  user_id    String
  post_id    Int?
  blog_id    Int?
  created_at DateTime @default(now())

  post Post? @relation(fields: [post_id], references: [id], onDelete: Cascade)
  blog Blog? @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  user User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id], map: "unique_user_post_like")
  @@unique([user_id, blog_id], map: "unique_user_blog_like")
  @@map("like")
}

model Comment {
  id                Int        @id @default(autoincrement())
  user_id           String
  parent_comment_id Int?
  target_id         Int
  target_type       TargetType
  content           String
  created_at        DateTime   @default(now())
  updated_at        DateTime?  @updatedAt
  parent_comment    Comment?   @relation("CommentReplies", fields: [parent_comment_id], references: [id], onDelete: NoAction)
  replies           Comment[]  @relation("CommentReplies")
  user              User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([target_id, target_type])
  @@index([parent_comment_id])
  @@map("comment")
}

model Share {
  id             Int           @id @default(autoincrement())
  user_id        String
  post_id        Int?
  blog_id        Int?
  share_platform SharePlatform
  created_at     DateTime      @default(now())

  /// Relations
  post Post? @relation(fields: [post_id], references: [id], onDelete: Cascade)
  blog Blog? @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  user User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id], map: "unique_user_post_share")
  @@unique([user_id, blog_id], map: "unique_user_blog_share")
  @@map("share")
}

model Follow {
  follower_id   String
  following_id  String
  created_at    DateTime @default(now())
  is_subscribed Boolean  @default(false)
  follower      User     @relation("Follower", fields: [follower_id], references: [id], onDelete: Cascade)
  following     User     @relation("Following", fields: [following_id], references: [id], onDelete: Cascade)

  @@id([follower_id, following_id])
  @@index([follower_id])
  @@index([following_id])
  @@map("follow")
}

model Bookmark {
  user_id    String
  blog_id    Int
  created_at DateTime @default(now())
  blog       Blog     @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, blog_id])
  @@index([blog_id])
  @@map("bookmark")
}

model Rating {
  user_id    String
  blog_id    Int
  value      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  blog       Blog     @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, blog_id])
  @@index([blog_id])
  @@map("rating")
}

model Collection {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  is_private    Boolean  @default(false)
  thumbnail_url String?
  user_id       String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id])
  posts         Post[]

  @@index([user_id])
}

model Report {
  id Int @id @default(autoincrement())

  reporter_id String
  target_id   Int
  target_type ReportTargetType

  reason String       @db.Text
  status ReportStatus @default(PENDING)

  created_at DateTime @default(now()) @map("created_at")

  reporter User @relation("UserReports", fields: [reporter_id], references: [id], onDelete: Cascade)

  // --- Indexes ---
  @@index([reporter_id])
  @@index([status])
  @@index([target_id, target_type])
  @@map("report")
}

enum MediaType {
  image
  video
}

enum TargetType {
  POST
  BLOG
}

enum SharePlatform {
  FACEBOOK
  GOOGLE
}

enum CategoryType {
  MEDIUM
  ATTRIBUTE
}

enum ReportTargetType {
  POST
  BLOG
  COMMENT
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
}
