generator client {
  binaryTargets = ["native", "darwin-arm64", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x", "windows"]
  provider      = "prisma-client"
  output        = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  roleId    Int      @id @default(autoincrement()) @map("role_id")
  roleName  String   @unique @map("role_name")
  createdAt DateTime @default(now()) @map("created_at")

  users UserRole[]

  @@map("role")
}

model UserRole {
  userId     String   @map("user_id")
  roleId     Int      @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  role Role @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_role")
}

model User {
  id                String     @id
  username          String     @unique
  email             String     @unique
  fullName          String?    @map("full_name")
  profilePictureUrl String?    @map("profile_picture_url")
  bio               String?
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime?  @updatedAt @map("updated_at")
  refreshToken      String?    @map("refresh_token")
  birthday          DateTime?  @db.Date
  followersCount    Int        @default(0) @map("followers_count")
  followingsCount   Int        @default(0) @map("followings_count")
  stripeCustomerId  String?    @unique @map("stripe_customer_id")
  isOnboard         Boolean    @default(false) @map("is_onboard")
  status            UserStatus @default(ACTIVE)

  collections     Collection[]
  blogs           Blog[]
  bookmarks       Bookmark[]
  comments        Comment[]
  followers       Follow[]       @relation("followers_of_user")
  followings      Follow[]       @relation("users_following")
  likes           Like[]
  posts           Post[]
  ratings         Rating[]
  Report          Report[]       @relation("UserReports")
  shares          Share[]
  userAccess      UserAccess?
  roles           UserRole[]
  UserUsage       UserUsage[]
  CommentLike     CommentLike[]
  reportsResolved Report[]       @relation("ModeratorReports")
  AutoProject     AutoProject[]
  notifications   Notification[]
  Conversation    Conversation[]

  @@map("user")
}

model Post {
  id                Int       @id @default(autoincrement())
  userId            String    @map("user_id")
  title             String
  description       String?
  createdAt         DateTime  @default(now()) @map("created_at")
  isPublished       Boolean   @default(false) @map("is_published")
  isPrivate         Boolean   @default(false) @map("is_private")
  groupId           Int?      @map("group_id")
  shareCount        Int       @default(0) @map("share_count")
  commentCount      Int       @default(0) @map("comment_count")
  viewCount         Int       @default(0) @map("view_count")
  likeCount         Int       @default(0) @map("like_count")
  thumbnailUrl      String    @map("thumbnail_url")
  updatedAt         DateTime? @updatedAt @map("updated_at")
  isMature          Boolean   @default(false) @map("is_mature")
  aiCreated         Boolean   @default(false) @map("ai_created")
  artGenerationId   Int?      @map("art_generation_id")
  thumbnailCropMeta Json?     @map("thumbnail_crop_meta")

  likes         Like[]
  medias        Media[]
  shares        Share[]
  collections   PostsOnCollections[]
  categories    Category[]           @relation("CategoryToPost")
  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  artGeneration ArtGeneration?       @relation(fields: [artGenerationId], references: [id])

  @@index([userId])
  @@map("post")
}

model Blog {
  id             Int       @id @default(autoincrement())
  userId         String    @map("user_id")
  title          String
  content        String
  createdAt      DateTime  @default(now()) @map("created_at")
  isPublished    Boolean   @default(false) @map("is_published")
  likeCount      Int       @default(0) @map("like_count")
  commentCount   Int       @default(0) @map("comment_count")
  shareCount     Int       @default(0) @map("share_count")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  averageRating  Float     @default(0) @map("average_rating")
  isProtected    Boolean   @default(false) @map("is_protected")
  ratingCount    Int       @default(0) @map("rating_count")
  pictures       String[]
  embeddedVideos String[]  @map("embedded_videos")
  viewCount      Int       @default(0) @map("view_count")

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmarks  Bookmark[]
  likes      Like[]
  ratings    Rating[]
  shares     Share[]
  categories Category[] @relation("CategoryToBlog")

  @@index([userId])
  @@index([createdAt])
  @@map("blog")
}

model Media {
  id          Int       @id @default(autoincrement())
  postId      Int       @map("post_id")
  mediaType   MediaType @map("media_type")
  description String?
  url         String
  downloads   Int       @default(0)
  createdAt   DateTime  @default(now()) @map("created_at")
  creatorId   String    @map("creator_id")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@map("media")
}

model Category {
  createdAt     DateTime     @default(now()) @map("created_at")
  id            Int          @id @default(autoincrement())
  name          String       @unique
  description   String
  exampleImages String[]     @map("example_images")
  type          CategoryType @default(ATTRIBUTE)
  updatedAt     DateTime?    @updatedAt @map("updated_at")

  blogs Blog[] @relation("CategoryToBlog")
  posts Post[] @relation("CategoryToPost")

  @@map("category")
}

model Like {
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  blogId    Int?     @map("blog_id")
  id        Int      @id @default(autoincrement())
  postId    Int?     @map("post_id")

  blog Blog? @relation(fields: [blogId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], map: "unique_user_post_like")
  @@unique([userId, blogId], map: "unique_user_blog_like")
  @@map("like")
}

model CommentLike {
  userId    String   @map("user_id")
  commentId Int      @map("comment_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
  @@index([commentId])
  @@map("comment_like")
}

model Comment {
  id              Int           @id @default(autoincrement())
  userId          String        @map("user_id")
  parentCommentId Int?          @map("parent_comment_id")
  content         String
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  targetId        Int           @map("target_id")
  likeCount       Int           @default(0) @map("like_count")
  targetType      TargetType    @map("target_type")
  parentComment   Comment?      @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies         Comment[]     @relation("CommentReplies")
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  CommentLike     CommentLike[]

  @@index([targetId, targetType])
  @@index([parentCommentId])
  @@map("comment")
}

model Share {
  id            Int           @id @default(autoincrement())
  userId        String        @map("user_id")
  sharePlatform SharePlatform @map("share_platform")
  createdAt     DateTime      @default(now()) @map("created_at")
  blogId        Int?          @map("blog_id")
  postId        Int?          @map("post_id")

  blog Blog? @relation(fields: [blogId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], map: "unique_user_post_share")
  @@unique([userId, blogId], map: "unique_user_blog_share")
  @@map("share")
}

model Follow {
  followerId   String   @map("follower_id")
  followingId  String   @map("following_id")
  createdAt    DateTime @default(now()) @map("created_at")
  isSubscribed Boolean  @default(false) @map("is_subscribed")

  follower  User @relation("users_following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("followers_of_user", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follow")
}

model Bookmark {
  userId    String   @map("user_id")
  blogId    Int      @map("blog_id")
  createdAt DateTime @default(now()) @map("created_at")

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, blogId])
  @@index([blogId])
  @@map("bookmark")
}

model Rating {
  userId    String    @map("user_id")
  blogId    Int       @map("blog_id")
  value     Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, blogId])
  @@index([blogId])
  @@map("rating")
}

model Collection {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  isPrivate    Boolean   @default(false) @map("is_private")
  thumbnailUrl String?   @map("thumbnail_url")
  userId       String    @map("user_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  user  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts PostsOnCollections[]

  @@index([userId])
  @@map("collection")
}

model Report {
  id                Int              @id @default(autoincrement())
  reporterId        String           @map("reporter_id")
  targetId          Int              @map("target_id")
  userId            String?          @map("user_id")
  targetType        ReportTargetType @map("target_type")
  reason            String
  status            ReportStatus     @default(PENDING)
  createdAt         DateTime         @default(now()) @map("created_at")
  resolvedAt        DateTime?        @map("resolved_at")
  resolutionComment String?          @map("resolution_comment")
  moderatorId       String?          @map("moderator_id")
  targetUrl         String?          @map("target_url")

  reporter  User  @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  moderator User? @relation("ModeratorReports", fields: [moderatorId], references: [id])

  @@index([reporterId])
  @@index([status])
  @@index([targetId, targetType])
  @@map("report")
}

model UserAccess {
  userId               String          @id
  planId               PaidAccessLevel
  expiresAt            DateTime        @map("expires_at")
  stripeSubscriptionId String?         @unique @map("stripe_subscription_id")
  stripePriceId        String?         @map("stripe_price_id")
  stripeCustomerId     String?         @map("stripe_customer_id")
  createdAt            DateTime        @default(now()) @map("created_at")
  updatedAt            DateTime?       @updatedAt @map("updated_at")
  cancelAtPeriodEnd    Boolean         @default(false) @map("cancel_at_period_end")
  plan                 Plan            @relation(fields: [planId], references: [id])
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stripeCustomerId])
  @@map("user_access")
}

model Plan {
  id                      PaidAccessLevel @id
  name                    String
  description             String?
  stripeProductId         String?         @unique @map("stripe_product_id")
  imageQualityAllowed     ImageQuality    @default(LOW) @map("image_quality_allowed")
  monthlyQuotaCredits     Int?            @map("monthly_quota_credits")
  dailyQuotaCredits       Int             @map("daily_quota_credits")
  storageQuotaMB          Int?            @map("storage_quota_mb")
  maxTeamSeats            Int             @default(1) @map("max_team_seats")
  allowHighResolution     Boolean         @default(false) @map("allow_high_resolution")
  maxResolutionWidth      Int?            @map("max_resolution_width")
  maxResolutionHeight     Int?            @map("max_resolution_height")
  removeWatermark         Boolean         @default(false) @map("remove_watermark")
  smartSuggestionsEnabled Boolean         @default(false) @map("smart_suggestions_enabled")
  createdAt               DateTime        @default(now()) @map("created_at")
  updatedAt               DateTime?       @updatedAt @map("updated_at")

  userAccess UserAccess[]

  @@map("plans")
}

model UserUsage {
  id             String    @id @default(cuid())
  userId         String    @map("user_id")
  featureKey     String    @map("feature_key")
  usedAmount     Float     @default(0) @map("used_amount")
  cycleStartedAt DateTime  @map("cycle_started_at")
  cycleEndsAt    DateTime  @map("cycle_ends_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, featureKey, cycleStartedAt])
  @@index([userId, featureKey, cycleEndsAt])
  @@map("user_usage")
}

model ArtGeneration {
  id                      Int         @id @default(autoincrement())
  userId                  String      @map("user_id")
  userPrompt              String      @map("user_prompt")
  finalPrompt             String      @map("final_prompt")
  modelKey                String      @map("model_key")
  numberOfImagesGenerated Int         @map("number_of_images_generated")
  imageUrls               String[]    @map("image_urls")
  aspectRatio             AspectRatio @map("aspect_ratio")
  style                   String?
  lighting                String?
  camera                  String?
  createdAt               DateTime    @default(now()) @map("created_at")
  updatedAt               DateTime?   @updatedAt @map("updated_at")

  Post Post[]

  @@map("art_generation")
}

model TrendingPrompt {
  id        Int       @id @default(autoincrement())
  promptKey String    @unique @map("prompt_key")
  prompts   String[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("trending_prompts")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  type      String
  payload   Json
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Platform {
  id                Int       @id @default(autoincrement())
  config            Json
  userId            String    @map("user_id")
  externalPageId    String    @map("external_page_id")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime? @updatedAt @map("updated_at")
  tokenExpiresAt    DateTime? @map("token_expires_at")
  pictureUrl        String?   @map("picture_url")
  facebookAccountId Int?      @map("facebook_account_id")

  name            SharePlatform
  status          PlatformStatus   @default(ACTIVE)
  facebookAccount FacebookAccount? @relation(fields: [facebookAccountId], references: [id], onDelete: Cascade)
  autoProjects    AutoProject[]

  @@unique([userId, name, externalPageId])
  @@map("platform")
}

model AutoProject {
  id          Int               @id @default(autoincrement())
  title       String
  description String?
  status      AutoProjectStatus @default(ACTIVE)
  createdAt   DateTime          @default(now()) @map("created_at")
  userId      String            @map("user_id")
  updatedAt   DateTime?         @updatedAt @map("updated_at")
  platformId  Int               @map("platform_id")

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  autoPosts AutoPost[]
  platform  Platform   @relation(fields: [platformId], references: [id], onDelete: Cascade)

  @@map("auto_project")
}

model AutoPost {
  id             Int            @id @default(autoincrement())
  autoProjectId  Int            @map("auto_project_id")
  content        String
  imageUrls      String[]       @default([]) @map("image_urls")
  scheduledAt    DateTime?      @map("scheduled_at")
  status         AutoPostStatus @default(PENDING)
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime?      @updatedAt @map("updated_at")
  postedAt       DateTime?      @map("posted_at")
  errorMessage   String?        @map("error_message")
  n8nTriggeredAt DateTime?      @map("n8n_triggered_at")
  n8nExecutionId String?        @map("n8n_execution_id")
  platformPostId String?        @map("platform_post_id")

  autoProject AutoProject @relation(fields: [autoProjectId], references: [id], onDelete: Cascade)

  @@map("auto_post")
}

model Conversation {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  title         String?
  lastMessageAt DateTime  @default(now()) @map("last_message_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  messages Message[]
  user     User      @relation(fields: [userId], references: [id])

  @@index([userId, lastMessageAt])
  @@map("conversation")
}

model Message {
  id             String      @id @default(cuid())
  conversationId String      @map("conversation_id")
  role           MessageRole
  content        String      @db.Text
  metadata       Json?
  createdAt      DateTime    @default(now()) @map("created_at")

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@map("message")
}

model FacebookAccount {
  id                       Int       @id @default(autoincrement())
  userId                   String    @map("user_id")
  facebookUserId           String    @unique @map("facebook_user_id")
  name                     String
  longLivedUserAccessToken String    @map("long_lived_user_access_token")
  tokenExpiresAt           DateTime? @map("token_expires_at")
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime? @updatedAt @map("updated_at")

  platforms Platform[]

  @@map("facebook_accounts")
}

model PostsOnCollections {
  postId       Int
  collectionId Int
  assignedAt   DateTime @default(now()) @map("assigned_at")

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, collectionId])
  @@map("posts_on_collections")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum PaidAccessLevel {
  FREE       @map("free")
  ARTIST_PRO @map("artist_pro")
  STUDIO     @map("studio")
  ENTERPRISE @map("enterprise")
}

enum ImageQuality {
  LOW    @map("low")
  MEDIUM @map("medium")
  HIGH   @map("high")
}

enum CommercialRightsLevel {
  NONE     @map("none")
  STANDARD @map("standard")
  ENHANCED @map("enhanced")
}

enum SupportLevel {
  COMMUNITY @map("community")
  STANDARD  @map("standard")
  PRIORITY  @map("priority")
  DEDICATED @map("dedicated")
}

enum MediaType {
  image
  video
}

enum TargetType {
  POST
  BLOG
}

enum SharePlatform {
  FACEBOOK
  GOOGLE
  INSTAGRAM
}

enum CategoryType {
  MEDIUM
  ATTRIBUTE
}

enum ReportTargetType {
  POST
  BLOG
  COMMENT
  USER
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum AspectRatio {
  SQUARE
  LANDSCAPE
  PORTRAIT
}

enum AutoProjectStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  FAILED
  DRAFT
  PAUSED
}

enum AutoPostStatus {
  PENDING
  POSTED
  FAILED
  CANCELLED
  PROCESSING
}

enum PlatformStatus {
  ACTIVE
  INACTIVE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}
