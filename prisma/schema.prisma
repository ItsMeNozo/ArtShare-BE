generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id
  username            String    @unique
  email               String    @unique
  full_name           String?
  profile_picture_url String?
  bio                 String?
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt
  refresh_token       String?
  comments            Comment[]
  followers           Follow[]  @relation("Follower")
  followings          Follow[]  @relation("Following")
  likes               Like[]
  posts               Post[]
  shares              Share[]

  @@map("user")
}

model Post {
  id            Int        @id @default(autoincrement())
  user_id       String
  title         String
  description   String?
  created_at    DateTime   @default(now())
  is_published  Boolean    @default(false)
  is_private    Boolean    @default(false)
  group_id      Int?
  share_count   Int        @default(0)
  comment_count Int        @default(0)
  like_count    Int        @default(0)
  thumbnail_url String
  updated_at    DateTime?  @updatedAt
  is_mature     Boolean    @default(false)
  ai_created    Boolean    @default(false)
  comments      Comment[]
  likes         Like[]
  medias        Media[]
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  shares        Share[]
  categories    Category[] @relation("CategoryToPost")

  @@map("post")
}

model Media {
  id          Int       @id @default(autoincrement())
  post_id     Int
  media_type  MediaType
  description String?
  url         String
  downloads   Int       @default(0)
  created_at  DateTime  @default(now())
  creator_id  String
  post        Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("media")
}

model Category {
  cate_name  String   @unique
  created_at DateTime @default(now())
  url        String?  @unique
  id         Int      @id @default(autoincrement())
  posts      Post[]   @relation("CategoryToPost")

  @@map("category")
}

model Like {
  user_id     String
  target_id   Int
  target_type TargetType
  created_at  DateTime   @default(now())
  post        Post       @relation(fields: [target_id], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, target_id])
  @@map("like")
}

model Comment {
  id                Int        @id @default(autoincrement())
  user_id           String
  parent_comment_id Int?
  target_id         Int
  target_type       TargetType
  content           String
  created_at        DateTime   @default(now())
  updated_at        DateTime?  @updatedAt
  parent_comment    Comment?   @relation("CommentReplies", fields: [parent_comment_id], references: [id], onDelete: Cascade)
  replies           Comment[]  @relation("CommentReplies")
  post              Post       @relation(fields: [target_id], references: [id], onDelete: Cascade)
  user              User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("comment")
}

model Share {
  id             Int           @id @default(autoincrement())
  user_id        String
  target_id      Int
  target_type    TargetType
  share_platform SharePlatform
  created_at     DateTime      @default(now())
  post           Post          @relation(fields: [target_id], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("share")
}

model Follow {
  follower_id   String
  following_id  String
  created_at    DateTime @default(now())
  is_subscribed Boolean  @default(false)
  follower      User     @relation("Follower", fields: [follower_id], references: [id], onDelete: Cascade)
  following     User     @relation("Following", fields: [following_id], references: [id], onDelete: Cascade)

  @@id([follower_id, following_id])
  @@map("follow")
}

enum MediaType {
  image
  video
}

enum TargetType {
  POST
  BLOG
}

enum SharePlatform {
  FACEBOOK
  TWITTER
  LINKEDIN
}
