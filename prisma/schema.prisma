generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  role_id   Int      @id @default(autoincrement())
  role_name String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  users UserRole[]

  @@map("role")
}

model UserRole {
  user_id    String
  role_id    Int
  assignedAt DateTime @default(now()) @map("assigned_at")

  role Role @relation(fields: [role_id], references: [role_id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, role_id])
  @@map("user_role")
}

model User {
  id                  String    @id
  username            String    @unique
  email               String    @unique
  full_name           String?
  profile_picture_url String?
  bio                 String?
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt
  refresh_token       String?
  birthday            DateTime? @db.Date
  followers_count     Int       @default(0)
  followings_count    Int       @default(0)
  stripe_customer_id  String?   @unique
  is_onboard          Boolean   @default(false)

  collections      Collection[]
  blogs            Blog[]
  bookmarks        Bookmark[]
  comments         Comment[]
  followers        Follow[]      @relation("followers_of_user")
  followings       Follow[]      @relation("users_following")
  likes            Like[]
  posts            Post[]
  ratings          Rating[]
  Report           Report[]      @relation("UserReports")
  shares           Share[]
  userAccess       UserAccess?
  roles            UserRole[]
  UserUsage        UserUsage[]
  CommentLike      CommentLike[]
  reportsResolved  Report[] @relation("ModeratorReports") 
  @@map("user")
}

model Post {
  id                Int       @id @default(autoincrement())
  user_id           String
  title             String
  description       String?
  created_at        DateTime  @default(now())
  is_published      Boolean   @default(false)
  is_private        Boolean   @default(false)
  group_id          Int?
  share_count       Int       @default(0)
  comment_count     Int       @default(0)
  view_count        Int       @default(0)
  like_count        Int       @default(0)
  thumbnail_url     String
  updated_at        DateTime? @updatedAt
  is_mature         Boolean   @default(false)
  ai_created        Boolean   @default(false)
  art_generation_id Int?

  likes               Like[]
  medias              Media[]
  user                User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  shares              Share[]
  categories          Category[]     @relation("CategoryToPost")
  thumbnail_crop_meta Json?
  Collection          Collection?    @relation(fields: [collectionId], references: [id])
  collectionId        Int?
  art_generation      ArtGeneration? @relation(fields: [art_generation_id], references: [id])

  @@index([user_id])
  @@map("post")
}

model Blog {
  id              Int       @id @default(autoincrement())
  user_id         String
  title           String
  content         String
  created_at      DateTime  @default(now())
  is_published    Boolean   @default(false)
  like_count      Int       @default(0)
  comment_count   Int       @default(0)
  share_count     Int       @default(0)
  updated_at      DateTime? @updatedAt
  average_rating  Float     @default(0)
  is_protected    Boolean   @default(false)
  rating_count    Int       @default(0)
  pictures        String[]
  embedded_videos String[]
  view_count      Int       @default(0)

  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  bookmarks  Bookmark[]
  likes      Like[]
  ratings    Rating[]
  shares     Share[]
  categories Category[] @relation("CategoryToBlog")

  @@index([user_id])
  @@index([created_at])
  @@map("blog")
}

model Media {
  id          Int       @id @default(autoincrement())
  post_id     Int
  media_type  MediaType
  description String?
  url         String
  downloads   Int       @default(0)
  created_at  DateTime  @default(now())
  creator_id  String

  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([post_id])
  @@map("media")
}

model Category {
  created_at     DateTime     @default(now())
  id             Int          @id @default(autoincrement())
  name           String       @unique
  description    String
  example_images String[]
  type           CategoryType @default(ATTRIBUTE)
  updated_at     DateTime?    @updatedAt

  blogs Blog[] @relation("CategoryToBlog")
  posts Post[] @relation("CategoryToPost")

  @@map("category")
}

model Like {
  user_id    String
  created_at DateTime @default(now())
  blog_id    Int?
  id         Int      @id @default(autoincrement())
  post_id    Int?

  blog Blog? @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id], map: "unique_user_post_like")
  @@unique([user_id, blog_id], map: "unique_user_blog_like")
  @@map("like")
}

model CommentLike {
  user_id    String
  comment_id Int
  created_at DateTime @default(now())

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  @@id([user_id, comment_id])
  @@index([comment_id])
  @@map("comment_like")
}

model Comment {
  id                Int           @id @default(autoincrement())
  user_id           String
  parent_comment_id Int?
  content           String
  created_at        DateTime      @default(now())
  updated_at        DateTime?     @updatedAt
  target_id         Int
  like_count        Int           @default(0)
  target_type       TargetType
  parent_comment    Comment?      @relation("CommentReplies", fields: [parent_comment_id], references: [id], onDelete: Cascade)
  replies           Comment[]     @relation("CommentReplies")
  user              User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  CommentLike       CommentLike[]

  @@index([target_id, target_type])
  @@index([parent_comment_id])
  @@map("comment")
}

model Share {
  id             Int           @id @default(autoincrement())
  user_id        String
  share_platform SharePlatform
  created_at     DateTime      @default(now())
  blog_id        Int?
  post_id        Int?

  blog Blog? @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id], map: "unique_user_post_share")
  @@unique([user_id, blog_id], map: "unique_user_blog_share")
  @@map("share")
}

model Follow {
  follower_id   String
  following_id  String
  created_at    DateTime @default(now())
  is_subscribed Boolean  @default(false)

  follower  User @relation("users_following", fields: [follower_id], references: [id], onDelete: Cascade)
  following User @relation("followers_of_user", fields: [following_id], references: [id], onDelete: Cascade)

  @@id([follower_id, following_id])
  @@index([follower_id])
  @@index([following_id])
  @@map("follow")
}

model Bookmark {
  user_id    String
  blog_id    Int
  created_at DateTime @default(now())

  blog Blog @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, blog_id])
  @@index([blog_id])
  @@map("bookmark")
}

model Rating {
  user_id    String
  blog_id    Int
  value      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  blog Blog @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, blog_id])
  @@index([blog_id])
  @@map("rating")
}

model Collection {
  id            Int     @id @default(autoincrement())
  name          String
  description   String?
  is_private    Boolean @default(false)
  thumbnail_url String?
  user_id       String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
  posts      Post[]

  @@index([user_id])
}

model Report {
  id                 Int              @id @default(autoincrement())
  reporter_id        String
  target_id          Int
  user_id            String?
  target_type        ReportTargetType
  reason             String
  status             ReportStatus     @default(PENDING)
  created_at         DateTime         @default(now()) @map("created_at")
  resolved_at        DateTime?
  resolution_comment String?
  moderator_id       String?
  target_url         String?

  reporter  User  @relation("UserReports", fields: [reporter_id], references: [id], onDelete: Cascade)
  moderator User? @relation("ModeratorReports", fields: [moderator_id], references: [id])

  @@index([reporter_id])
  @@index([status])
  @@index([target_id, target_type])
  @@map("report")
}

model UserAccess {
  userId               String          @id
  planId               PaidAccessLevel
  expiresAt            DateTime        @map("expires_at")
  stripeSubscriptionId String          @unique @map("stripe_subscription_id")
  stripePriceId        String          @map("stripe_price_id")
  stripeCustomerId     String          @map("stripe_customer_id")
  createdAt            DateTime        @default(now()) @map("created_at")
  updatedAt            DateTime        @updatedAt @map("updated_at")
  cancelAtPeriodEnd    Boolean         @default(false) @map("cancel_at_period_end")

  plan Plan @relation(fields: [planId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stripeCustomerId])
  @@map("user_access")
}

model Plan {
  id                      PaidAccessLevel @id
  name                    String
  description             String?
  stripeProductId         String?         @unique
  imageQualityAllowed     ImageQuality    @default(LOW) @map("image_quality_allowed")
  monthlyQuotaCredits     Int?            @map("monthly_quota_credits")
  dailyQuotaCredits       Int
  storageQuotaMB          Int?            @map("storage_quota_mb")
  maxTeamSeats            Int             @default(1) @map("max_team_seats")
  allowHighResolution     Boolean         @default(false) @map("allow_high_resolution")
  maxResolutionWidth      Int?            @map("max_resolution_width")
  maxResolutionHeight     Int?            @map("max_resolution_height")
  removeWatermark         Boolean         @default(false) @map("remove_watermark")
  smartSuggestionsEnabled Boolean         @default(false) @map("smart_suggestions_enabled")
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt

  userAccess UserAccess[]

  @@map("plans")
}

model UserUsage {
  id             String   @id @default(cuid())
  userId         String
  featureKey     String
  usedAmount     Float    @default(0) @map("used_amount")
  cycleStartedAt DateTime @map("cycle_started_at")
  cycleEndsAt    DateTime @map("cycle_ends_at")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, featureKey, cycleStartedAt])
  @@index([userId, featureKey, cycleEndsAt])
  @@map("user_usage")
}

model ArtGeneration {
  id                         Int         @id @default(autoincrement())
  user_id                    String
  user_prompt                String
  final_prompt               String
  model_key                  String
  number_of_images_generated Int
  image_urls                 String[]
  aspect_ratio               AspectRatio
  style                      String?
  lighting                   String?
  camera                     String?
  created_at                 DateTime    @default(now())
  updated_at                 DateTime?   @updatedAt

  Post Post[]

  @@map("art_generation")
}

model TrendingPrompt {
  id         Int      @id @default(autoincrement())
  prompt_key String   @unique
  prompts    String[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("trending_prompts")
}

enum PaidAccessLevel {
  FREE       @map("free")
  ARTIST_PRO @map("artist_pro")
  STUDIO     @map("studio")
  ENTERPRISE @map("enterprise")
}

enum ImageQuality {
  LOW    @map("low")
  MEDIUM @map("medium")
  HIGH   @map("high")
}

enum CommercialRightsLevel {
  NONE     @map("none")
  STANDARD @map("standard")
  ENHANCED @map("enhanced")
}

enum SupportLevel {
  COMMUNITY @map("community")
  STANDARD  @map("standard")
  PRIORITY  @map("priority")
  DEDICATED @map("dedicated")
}

enum MediaType {
  image
  video
}

enum TargetType {
  POST
  BLOG
}

enum SharePlatform {
  FACEBOOK
  GOOGLE
}

enum CategoryType {
  MEDIUM
  ATTRIBUTE
}

enum ReportTargetType {
  POST
  BLOG
  COMMENT
  USER
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum AspectRatio {
  SQUARE
  LANDSCAPE
  PORTRAIT
}
