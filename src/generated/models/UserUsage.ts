
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserUsage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserUsage
 * 
 */
export type UserUsageModel = runtime.Types.Result.DefaultSelection<Prisma.$UserUsagePayload>

export type AggregateUserUsage = {
  _count: UserUsageCountAggregateOutputType | null
  _avg: UserUsageAvgAggregateOutputType | null
  _sum: UserUsageSumAggregateOutputType | null
  _min: UserUsageMinAggregateOutputType | null
  _max: UserUsageMaxAggregateOutputType | null
}

export type UserUsageAvgAggregateOutputType = {
  usedAmount: number | null
}

export type UserUsageSumAggregateOutputType = {
  usedAmount: number | null
}

export type UserUsageMinAggregateOutputType = {
  id: string | null
  userId: string | null
  featureKey: string | null
  usedAmount: number | null
  cycleStartedAt: Date | null
  cycleEndsAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserUsageMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  featureKey: string | null
  usedAmount: number | null
  cycleStartedAt: Date | null
  cycleEndsAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserUsageCountAggregateOutputType = {
  id: number
  userId: number
  featureKey: number
  usedAmount: number
  cycleStartedAt: number
  cycleEndsAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type UserUsageAvgAggregateInputType = {
  usedAmount?: true
}

export type UserUsageSumAggregateInputType = {
  usedAmount?: true
}

export type UserUsageMinAggregateInputType = {
  id?: true
  userId?: true
  featureKey?: true
  usedAmount?: true
  cycleStartedAt?: true
  cycleEndsAt?: true
  createdAt?: true
  updatedAt?: true
}

export type UserUsageMaxAggregateInputType = {
  id?: true
  userId?: true
  featureKey?: true
  usedAmount?: true
  cycleStartedAt?: true
  cycleEndsAt?: true
  createdAt?: true
  updatedAt?: true
}

export type UserUsageCountAggregateInputType = {
  id?: true
  userId?: true
  featureKey?: true
  usedAmount?: true
  cycleStartedAt?: true
  cycleEndsAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UserUsageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserUsage to aggregate.
   */
  where?: Prisma.UserUsageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserUsages to fetch.
   */
  orderBy?: Prisma.UserUsageOrderByWithRelationInput | Prisma.UserUsageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserUsageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserUsages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserUsages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserUsages
  **/
  _count?: true | UserUsageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserUsageAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserUsageSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserUsageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserUsageMaxAggregateInputType
}

export type GetUserUsageAggregateType<T extends UserUsageAggregateArgs> = {
      [P in keyof T & keyof AggregateUserUsage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserUsage[P]>
    : Prisma.GetScalarType<T[P], AggregateUserUsage[P]>
}




export type UserUsageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserUsageWhereInput
  orderBy?: Prisma.UserUsageOrderByWithAggregationInput | Prisma.UserUsageOrderByWithAggregationInput[]
  by: Prisma.UserUsageScalarFieldEnum[] | Prisma.UserUsageScalarFieldEnum
  having?: Prisma.UserUsageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserUsageCountAggregateInputType | true
  _avg?: UserUsageAvgAggregateInputType
  _sum?: UserUsageSumAggregateInputType
  _min?: UserUsageMinAggregateInputType
  _max?: UserUsageMaxAggregateInputType
}

export type UserUsageGroupByOutputType = {
  id: string
  userId: string
  featureKey: string
  usedAmount: number
  cycleStartedAt: Date
  cycleEndsAt: Date
  createdAt: Date
  updatedAt: Date
  _count: UserUsageCountAggregateOutputType | null
  _avg: UserUsageAvgAggregateOutputType | null
  _sum: UserUsageSumAggregateOutputType | null
  _min: UserUsageMinAggregateOutputType | null
  _max: UserUsageMaxAggregateOutputType | null
}

type GetUserUsageGroupByPayload<T extends UserUsageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserUsageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserUsageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserUsageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserUsageGroupByOutputType[P]>
      }
    >
  > 



export type UserUsageWhereInput = {
  AND?: Prisma.UserUsageWhereInput | Prisma.UserUsageWhereInput[]
  OR?: Prisma.UserUsageWhereInput[]
  NOT?: Prisma.UserUsageWhereInput | Prisma.UserUsageWhereInput[]
  id?: Prisma.StringFilter<"UserUsage"> | string
  userId?: Prisma.StringFilter<"UserUsage"> | string
  featureKey?: Prisma.StringFilter<"UserUsage"> | string
  usedAmount?: Prisma.FloatFilter<"UserUsage"> | number
  cycleStartedAt?: Prisma.DateTimeFilter<"UserUsage"> | Date | string
  cycleEndsAt?: Prisma.DateTimeFilter<"UserUsage"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"UserUsage"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserUsage"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type UserUsageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  featureKey?: Prisma.SortOrder
  usedAmount?: Prisma.SortOrder
  cycleStartedAt?: Prisma.SortOrder
  cycleEndsAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type UserUsageWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_featureKey_cycleStartedAt?: Prisma.UserUsageUserIdFeatureKeyCycleStartedAtCompoundUniqueInput
  AND?: Prisma.UserUsageWhereInput | Prisma.UserUsageWhereInput[]
  OR?: Prisma.UserUsageWhereInput[]
  NOT?: Prisma.UserUsageWhereInput | Prisma.UserUsageWhereInput[]
  userId?: Prisma.StringFilter<"UserUsage"> | string
  featureKey?: Prisma.StringFilter<"UserUsage"> | string
  usedAmount?: Prisma.FloatFilter<"UserUsage"> | number
  cycleStartedAt?: Prisma.DateTimeFilter<"UserUsage"> | Date | string
  cycleEndsAt?: Prisma.DateTimeFilter<"UserUsage"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"UserUsage"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserUsage"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId_featureKey_cycleStartedAt">

export type UserUsageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  featureKey?: Prisma.SortOrder
  usedAmount?: Prisma.SortOrder
  cycleStartedAt?: Prisma.SortOrder
  cycleEndsAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UserUsageCountOrderByAggregateInput
  _avg?: Prisma.UserUsageAvgOrderByAggregateInput
  _max?: Prisma.UserUsageMaxOrderByAggregateInput
  _min?: Prisma.UserUsageMinOrderByAggregateInput
  _sum?: Prisma.UserUsageSumOrderByAggregateInput
}

export type UserUsageScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserUsageScalarWhereWithAggregatesInput | Prisma.UserUsageScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserUsageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserUsageScalarWhereWithAggregatesInput | Prisma.UserUsageScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserUsage"> | string
  userId?: Prisma.StringWithAggregatesFilter<"UserUsage"> | string
  featureKey?: Prisma.StringWithAggregatesFilter<"UserUsage"> | string
  usedAmount?: Prisma.FloatWithAggregatesFilter<"UserUsage"> | number
  cycleStartedAt?: Prisma.DateTimeWithAggregatesFilter<"UserUsage"> | Date | string
  cycleEndsAt?: Prisma.DateTimeWithAggregatesFilter<"UserUsage"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserUsage"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserUsage"> | Date | string
}

export type UserUsageCreateInput = {
  id?: string
  featureKey: string
  usedAmount?: number
  cycleStartedAt: Date | string
  cycleEndsAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutUserUsageInput
}

export type UserUsageUncheckedCreateInput = {
  id?: string
  userId: string
  featureKey: string
  usedAmount?: number
  cycleStartedAt: Date | string
  cycleEndsAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserUsageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  featureKey?: Prisma.StringFieldUpdateOperationsInput | string
  usedAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  cycleStartedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  cycleEndsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutUserUsageNestedInput
}

export type UserUsageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  featureKey?: Prisma.StringFieldUpdateOperationsInput | string
  usedAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  cycleStartedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  cycleEndsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserUsageCreateManyInput = {
  id?: string
  userId: string
  featureKey: string
  usedAmount?: number
  cycleStartedAt: Date | string
  cycleEndsAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserUsageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  featureKey?: Prisma.StringFieldUpdateOperationsInput | string
  usedAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  cycleStartedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  cycleEndsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserUsageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  featureKey?: Prisma.StringFieldUpdateOperationsInput | string
  usedAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  cycleStartedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  cycleEndsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserUsageListRelationFilter = {
  every?: Prisma.UserUsageWhereInput
  some?: Prisma.UserUsageWhereInput
  none?: Prisma.UserUsageWhereInput
}

export type UserUsageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserUsageUserIdFeatureKeyCycleStartedAtCompoundUniqueInput = {
  userId: string
  featureKey: string
  cycleStartedAt: Date | string
}

export type UserUsageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  featureKey?: Prisma.SortOrder
  usedAmount?: Prisma.SortOrder
  cycleStartedAt?: Prisma.SortOrder
  cycleEndsAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserUsageAvgOrderByAggregateInput = {
  usedAmount?: Prisma.SortOrder
}

export type UserUsageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  featureKey?: Prisma.SortOrder
  usedAmount?: Prisma.SortOrder
  cycleStartedAt?: Prisma.SortOrder
  cycleEndsAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserUsageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  featureKey?: Prisma.SortOrder
  usedAmount?: Prisma.SortOrder
  cycleStartedAt?: Prisma.SortOrder
  cycleEndsAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserUsageSumOrderByAggregateInput = {
  usedAmount?: Prisma.SortOrder
}

export type UserUsageCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserUsageCreateWithoutUserInput, Prisma.UserUsageUncheckedCreateWithoutUserInput> | Prisma.UserUsageCreateWithoutUserInput[] | Prisma.UserUsageUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserUsageCreateOrConnectWithoutUserInput | Prisma.UserUsageCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserUsageCreateManyUserInputEnvelope
  connect?: Prisma.UserUsageWhereUniqueInput | Prisma.UserUsageWhereUniqueInput[]
}

export type UserUsageUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserUsageCreateWithoutUserInput, Prisma.UserUsageUncheckedCreateWithoutUserInput> | Prisma.UserUsageCreateWithoutUserInput[] | Prisma.UserUsageUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserUsageCreateOrConnectWithoutUserInput | Prisma.UserUsageCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserUsageCreateManyUserInputEnvelope
  connect?: Prisma.UserUsageWhereUniqueInput | Prisma.UserUsageWhereUniqueInput[]
}

export type UserUsageUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserUsageCreateWithoutUserInput, Prisma.UserUsageUncheckedCreateWithoutUserInput> | Prisma.UserUsageCreateWithoutUserInput[] | Prisma.UserUsageUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserUsageCreateOrConnectWithoutUserInput | Prisma.UserUsageCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserUsageUpsertWithWhereUniqueWithoutUserInput | Prisma.UserUsageUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserUsageCreateManyUserInputEnvelope
  set?: Prisma.UserUsageWhereUniqueInput | Prisma.UserUsageWhereUniqueInput[]
  disconnect?: Prisma.UserUsageWhereUniqueInput | Prisma.UserUsageWhereUniqueInput[]
  delete?: Prisma.UserUsageWhereUniqueInput | Prisma.UserUsageWhereUniqueInput[]
  connect?: Prisma.UserUsageWhereUniqueInput | Prisma.UserUsageWhereUniqueInput[]
  update?: Prisma.UserUsageUpdateWithWhereUniqueWithoutUserInput | Prisma.UserUsageUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserUsageUpdateManyWithWhereWithoutUserInput | Prisma.UserUsageUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserUsageScalarWhereInput | Prisma.UserUsageScalarWhereInput[]
}

export type UserUsageUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserUsageCreateWithoutUserInput, Prisma.UserUsageUncheckedCreateWithoutUserInput> | Prisma.UserUsageCreateWithoutUserInput[] | Prisma.UserUsageUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserUsageCreateOrConnectWithoutUserInput | Prisma.UserUsageCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserUsageUpsertWithWhereUniqueWithoutUserInput | Prisma.UserUsageUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserUsageCreateManyUserInputEnvelope
  set?: Prisma.UserUsageWhereUniqueInput | Prisma.UserUsageWhereUniqueInput[]
  disconnect?: Prisma.UserUsageWhereUniqueInput | Prisma.UserUsageWhereUniqueInput[]
  delete?: Prisma.UserUsageWhereUniqueInput | Prisma.UserUsageWhereUniqueInput[]
  connect?: Prisma.UserUsageWhereUniqueInput | Prisma.UserUsageWhereUniqueInput[]
  update?: Prisma.UserUsageUpdateWithWhereUniqueWithoutUserInput | Prisma.UserUsageUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserUsageUpdateManyWithWhereWithoutUserInput | Prisma.UserUsageUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserUsageScalarWhereInput | Prisma.UserUsageScalarWhereInput[]
}

export type UserUsageCreateWithoutUserInput = {
  id?: string
  featureKey: string
  usedAmount?: number
  cycleStartedAt: Date | string
  cycleEndsAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserUsageUncheckedCreateWithoutUserInput = {
  id?: string
  featureKey: string
  usedAmount?: number
  cycleStartedAt: Date | string
  cycleEndsAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserUsageCreateOrConnectWithoutUserInput = {
  where: Prisma.UserUsageWhereUniqueInput
  create: Prisma.XOR<Prisma.UserUsageCreateWithoutUserInput, Prisma.UserUsageUncheckedCreateWithoutUserInput>
}

export type UserUsageCreateManyUserInputEnvelope = {
  data: Prisma.UserUsageCreateManyUserInput | Prisma.UserUsageCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserUsageUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserUsageWhereUniqueInput
  update: Prisma.XOR<Prisma.UserUsageUpdateWithoutUserInput, Prisma.UserUsageUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserUsageCreateWithoutUserInput, Prisma.UserUsageUncheckedCreateWithoutUserInput>
}

export type UserUsageUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserUsageWhereUniqueInput
  data: Prisma.XOR<Prisma.UserUsageUpdateWithoutUserInput, Prisma.UserUsageUncheckedUpdateWithoutUserInput>
}

export type UserUsageUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserUsageScalarWhereInput
  data: Prisma.XOR<Prisma.UserUsageUpdateManyMutationInput, Prisma.UserUsageUncheckedUpdateManyWithoutUserInput>
}

export type UserUsageScalarWhereInput = {
  AND?: Prisma.UserUsageScalarWhereInput | Prisma.UserUsageScalarWhereInput[]
  OR?: Prisma.UserUsageScalarWhereInput[]
  NOT?: Prisma.UserUsageScalarWhereInput | Prisma.UserUsageScalarWhereInput[]
  id?: Prisma.StringFilter<"UserUsage"> | string
  userId?: Prisma.StringFilter<"UserUsage"> | string
  featureKey?: Prisma.StringFilter<"UserUsage"> | string
  usedAmount?: Prisma.FloatFilter<"UserUsage"> | number
  cycleStartedAt?: Prisma.DateTimeFilter<"UserUsage"> | Date | string
  cycleEndsAt?: Prisma.DateTimeFilter<"UserUsage"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"UserUsage"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserUsage"> | Date | string
}

export type UserUsageCreateManyUserInput = {
  id?: string
  featureKey: string
  usedAmount?: number
  cycleStartedAt: Date | string
  cycleEndsAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserUsageUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  featureKey?: Prisma.StringFieldUpdateOperationsInput | string
  usedAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  cycleStartedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  cycleEndsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserUsageUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  featureKey?: Prisma.StringFieldUpdateOperationsInput | string
  usedAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  cycleStartedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  cycleEndsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserUsageUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  featureKey?: Prisma.StringFieldUpdateOperationsInput | string
  usedAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  cycleStartedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  cycleEndsAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type UserUsageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  featureKey?: boolean
  usedAmount?: boolean
  cycleStartedAt?: boolean
  cycleEndsAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userUsage"]>

export type UserUsageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  featureKey?: boolean
  usedAmount?: boolean
  cycleStartedAt?: boolean
  cycleEndsAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userUsage"]>

export type UserUsageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  featureKey?: boolean
  usedAmount?: boolean
  cycleStartedAt?: boolean
  cycleEndsAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userUsage"]>

export type UserUsageSelectScalar = {
  id?: boolean
  userId?: boolean
  featureKey?: boolean
  usedAmount?: boolean
  cycleStartedAt?: boolean
  cycleEndsAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UserUsageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "featureKey" | "usedAmount" | "cycleStartedAt" | "cycleEndsAt" | "createdAt" | "updatedAt", ExtArgs["result"]["userUsage"]>
export type UserUsageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserUsageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserUsageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UserUsagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserUsage"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    featureKey: string
    usedAmount: number
    cycleStartedAt: Date
    cycleEndsAt: Date
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["userUsage"]>
  composites: {}
}

export type UserUsageGetPayload<S extends boolean | null | undefined | UserUsageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserUsagePayload, S>

export type UserUsageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserUsageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserUsageCountAggregateInputType | true
  }

export interface UserUsageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserUsage'], meta: { name: 'UserUsage' } }
  /**
   * Find zero or one UserUsage that matches the filter.
   * @param {UserUsageFindUniqueArgs} args - Arguments to find a UserUsage
   * @example
   * // Get one UserUsage
   * const userUsage = await prisma.userUsage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserUsageFindUniqueArgs>(args: Prisma.SelectSubset<T, UserUsageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserUsageClient<runtime.Types.Result.GetResult<Prisma.$UserUsagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserUsage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserUsageFindUniqueOrThrowArgs} args - Arguments to find a UserUsage
   * @example
   * // Get one UserUsage
   * const userUsage = await prisma.userUsage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserUsageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserUsageClient<runtime.Types.Result.GetResult<Prisma.$UserUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserUsage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserUsageFindFirstArgs} args - Arguments to find a UserUsage
   * @example
   * // Get one UserUsage
   * const userUsage = await prisma.userUsage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserUsageFindFirstArgs>(args?: Prisma.SelectSubset<T, UserUsageFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserUsageClient<runtime.Types.Result.GetResult<Prisma.$UserUsagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserUsage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserUsageFindFirstOrThrowArgs} args - Arguments to find a UserUsage
   * @example
   * // Get one UserUsage
   * const userUsage = await prisma.userUsage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserUsageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserUsageClient<runtime.Types.Result.GetResult<Prisma.$UserUsagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserUsages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserUsageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserUsages
   * const userUsages = await prisma.userUsage.findMany()
   * 
   * // Get first 10 UserUsages
   * const userUsages = await prisma.userUsage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userUsageWithIdOnly = await prisma.userUsage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserUsageFindManyArgs>(args?: Prisma.SelectSubset<T, UserUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserUsage.
   * @param {UserUsageCreateArgs} args - Arguments to create a UserUsage.
   * @example
   * // Create one UserUsage
   * const UserUsage = await prisma.userUsage.create({
   *   data: {
   *     // ... data to create a UserUsage
   *   }
   * })
   * 
   */
  create<T extends UserUsageCreateArgs>(args: Prisma.SelectSubset<T, UserUsageCreateArgs<ExtArgs>>): Prisma.Prisma__UserUsageClient<runtime.Types.Result.GetResult<Prisma.$UserUsagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserUsages.
   * @param {UserUsageCreateManyArgs} args - Arguments to create many UserUsages.
   * @example
   * // Create many UserUsages
   * const userUsage = await prisma.userUsage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserUsageCreateManyArgs>(args?: Prisma.SelectSubset<T, UserUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserUsages and returns the data saved in the database.
   * @param {UserUsageCreateManyAndReturnArgs} args - Arguments to create many UserUsages.
   * @example
   * // Create many UserUsages
   * const userUsage = await prisma.userUsage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserUsages and only return the `id`
   * const userUsageWithIdOnly = await prisma.userUsage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserUsageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserUsagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserUsage.
   * @param {UserUsageDeleteArgs} args - Arguments to delete one UserUsage.
   * @example
   * // Delete one UserUsage
   * const UserUsage = await prisma.userUsage.delete({
   *   where: {
   *     // ... filter to delete one UserUsage
   *   }
   * })
   * 
   */
  delete<T extends UserUsageDeleteArgs>(args: Prisma.SelectSubset<T, UserUsageDeleteArgs<ExtArgs>>): Prisma.Prisma__UserUsageClient<runtime.Types.Result.GetResult<Prisma.$UserUsagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserUsage.
   * @param {UserUsageUpdateArgs} args - Arguments to update one UserUsage.
   * @example
   * // Update one UserUsage
   * const userUsage = await prisma.userUsage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserUsageUpdateArgs>(args: Prisma.SelectSubset<T, UserUsageUpdateArgs<ExtArgs>>): Prisma.Prisma__UserUsageClient<runtime.Types.Result.GetResult<Prisma.$UserUsagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserUsages.
   * @param {UserUsageDeleteManyArgs} args - Arguments to filter UserUsages to delete.
   * @example
   * // Delete a few UserUsages
   * const { count } = await prisma.userUsage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserUsageDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserUsages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserUsageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserUsages
   * const userUsage = await prisma.userUsage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserUsageUpdateManyArgs>(args: Prisma.SelectSubset<T, UserUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserUsages and returns the data updated in the database.
   * @param {UserUsageUpdateManyAndReturnArgs} args - Arguments to update many UserUsages.
   * @example
   * // Update many UserUsages
   * const userUsage = await prisma.userUsage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserUsages and only return the `id`
   * const userUsageWithIdOnly = await prisma.userUsage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserUsageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserUsageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserUsagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserUsage.
   * @param {UserUsageUpsertArgs} args - Arguments to update or create a UserUsage.
   * @example
   * // Update or create a UserUsage
   * const userUsage = await prisma.userUsage.upsert({
   *   create: {
   *     // ... data to create a UserUsage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserUsage we want to update
   *   }
   * })
   */
  upsert<T extends UserUsageUpsertArgs>(args: Prisma.SelectSubset<T, UserUsageUpsertArgs<ExtArgs>>): Prisma.Prisma__UserUsageClient<runtime.Types.Result.GetResult<Prisma.$UserUsagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserUsages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserUsageCountArgs} args - Arguments to filter UserUsages to count.
   * @example
   * // Count the number of UserUsages
   * const count = await prisma.userUsage.count({
   *   where: {
   *     // ... the filter for the UserUsages we want to count
   *   }
   * })
  **/
  count<T extends UserUsageCountArgs>(
    args?: Prisma.Subset<T, UserUsageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserUsageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserUsage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserUsageAggregateArgs>(args: Prisma.Subset<T, UserUsageAggregateArgs>): Prisma.PrismaPromise<GetUserUsageAggregateType<T>>

  /**
   * Group by UserUsage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserUsageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserUsageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserUsageGroupByArgs['orderBy'] }
      : { orderBy?: UserUsageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserUsage model
 */
readonly fields: UserUsageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserUsage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserUsageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserUsage model
 */
export interface UserUsageFieldRefs {
  readonly id: Prisma.FieldRef<"UserUsage", 'String'>
  readonly userId: Prisma.FieldRef<"UserUsage", 'String'>
  readonly featureKey: Prisma.FieldRef<"UserUsage", 'String'>
  readonly usedAmount: Prisma.FieldRef<"UserUsage", 'Float'>
  readonly cycleStartedAt: Prisma.FieldRef<"UserUsage", 'DateTime'>
  readonly cycleEndsAt: Prisma.FieldRef<"UserUsage", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"UserUsage", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserUsage", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UserUsage findUnique
 */
export type UserUsageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserUsage
   */
  select?: Prisma.UserUsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserUsage
   */
  omit?: Prisma.UserUsageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserUsageInclude<ExtArgs> | null
  /**
   * Filter, which UserUsage to fetch.
   */
  where: Prisma.UserUsageWhereUniqueInput
}

/**
 * UserUsage findUniqueOrThrow
 */
export type UserUsageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserUsage
   */
  select?: Prisma.UserUsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserUsage
   */
  omit?: Prisma.UserUsageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserUsageInclude<ExtArgs> | null
  /**
   * Filter, which UserUsage to fetch.
   */
  where: Prisma.UserUsageWhereUniqueInput
}

/**
 * UserUsage findFirst
 */
export type UserUsageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserUsage
   */
  select?: Prisma.UserUsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserUsage
   */
  omit?: Prisma.UserUsageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserUsageInclude<ExtArgs> | null
  /**
   * Filter, which UserUsage to fetch.
   */
  where?: Prisma.UserUsageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserUsages to fetch.
   */
  orderBy?: Prisma.UserUsageOrderByWithRelationInput | Prisma.UserUsageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserUsages.
   */
  cursor?: Prisma.UserUsageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserUsages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserUsages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserUsages.
   */
  distinct?: Prisma.UserUsageScalarFieldEnum | Prisma.UserUsageScalarFieldEnum[]
}

/**
 * UserUsage findFirstOrThrow
 */
export type UserUsageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserUsage
   */
  select?: Prisma.UserUsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserUsage
   */
  omit?: Prisma.UserUsageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserUsageInclude<ExtArgs> | null
  /**
   * Filter, which UserUsage to fetch.
   */
  where?: Prisma.UserUsageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserUsages to fetch.
   */
  orderBy?: Prisma.UserUsageOrderByWithRelationInput | Prisma.UserUsageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserUsages.
   */
  cursor?: Prisma.UserUsageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserUsages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserUsages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserUsages.
   */
  distinct?: Prisma.UserUsageScalarFieldEnum | Prisma.UserUsageScalarFieldEnum[]
}

/**
 * UserUsage findMany
 */
export type UserUsageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserUsage
   */
  select?: Prisma.UserUsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserUsage
   */
  omit?: Prisma.UserUsageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserUsageInclude<ExtArgs> | null
  /**
   * Filter, which UserUsages to fetch.
   */
  where?: Prisma.UserUsageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserUsages to fetch.
   */
  orderBy?: Prisma.UserUsageOrderByWithRelationInput | Prisma.UserUsageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserUsages.
   */
  cursor?: Prisma.UserUsageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserUsages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserUsages.
   */
  skip?: number
  distinct?: Prisma.UserUsageScalarFieldEnum | Prisma.UserUsageScalarFieldEnum[]
}

/**
 * UserUsage create
 */
export type UserUsageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserUsage
   */
  select?: Prisma.UserUsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserUsage
   */
  omit?: Prisma.UserUsageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserUsageInclude<ExtArgs> | null
  /**
   * The data needed to create a UserUsage.
   */
  data: Prisma.XOR<Prisma.UserUsageCreateInput, Prisma.UserUsageUncheckedCreateInput>
}

/**
 * UserUsage createMany
 */
export type UserUsageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserUsages.
   */
  data: Prisma.UserUsageCreateManyInput | Prisma.UserUsageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserUsage createManyAndReturn
 */
export type UserUsageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserUsage
   */
  select?: Prisma.UserUsageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserUsage
   */
  omit?: Prisma.UserUsageOmit<ExtArgs> | null
  /**
   * The data used to create many UserUsages.
   */
  data: Prisma.UserUsageCreateManyInput | Prisma.UserUsageCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserUsageIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserUsage update
 */
export type UserUsageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserUsage
   */
  select?: Prisma.UserUsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserUsage
   */
  omit?: Prisma.UserUsageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserUsageInclude<ExtArgs> | null
  /**
   * The data needed to update a UserUsage.
   */
  data: Prisma.XOR<Prisma.UserUsageUpdateInput, Prisma.UserUsageUncheckedUpdateInput>
  /**
   * Choose, which UserUsage to update.
   */
  where: Prisma.UserUsageWhereUniqueInput
}

/**
 * UserUsage updateMany
 */
export type UserUsageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserUsages.
   */
  data: Prisma.XOR<Prisma.UserUsageUpdateManyMutationInput, Prisma.UserUsageUncheckedUpdateManyInput>
  /**
   * Filter which UserUsages to update
   */
  where?: Prisma.UserUsageWhereInput
  /**
   * Limit how many UserUsages to update.
   */
  limit?: number
}

/**
 * UserUsage updateManyAndReturn
 */
export type UserUsageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserUsage
   */
  select?: Prisma.UserUsageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserUsage
   */
  omit?: Prisma.UserUsageOmit<ExtArgs> | null
  /**
   * The data used to update UserUsages.
   */
  data: Prisma.XOR<Prisma.UserUsageUpdateManyMutationInput, Prisma.UserUsageUncheckedUpdateManyInput>
  /**
   * Filter which UserUsages to update
   */
  where?: Prisma.UserUsageWhereInput
  /**
   * Limit how many UserUsages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserUsageIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserUsage upsert
 */
export type UserUsageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserUsage
   */
  select?: Prisma.UserUsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserUsage
   */
  omit?: Prisma.UserUsageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserUsageInclude<ExtArgs> | null
  /**
   * The filter to search for the UserUsage to update in case it exists.
   */
  where: Prisma.UserUsageWhereUniqueInput
  /**
   * In case the UserUsage found by the `where` argument doesn't exist, create a new UserUsage with this data.
   */
  create: Prisma.XOR<Prisma.UserUsageCreateInput, Prisma.UserUsageUncheckedCreateInput>
  /**
   * In case the UserUsage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserUsageUpdateInput, Prisma.UserUsageUncheckedUpdateInput>
}

/**
 * UserUsage delete
 */
export type UserUsageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserUsage
   */
  select?: Prisma.UserUsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserUsage
   */
  omit?: Prisma.UserUsageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserUsageInclude<ExtArgs> | null
  /**
   * Filter which UserUsage to delete.
   */
  where: Prisma.UserUsageWhereUniqueInput
}

/**
 * UserUsage deleteMany
 */
export type UserUsageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserUsages to delete
   */
  where?: Prisma.UserUsageWhereInput
  /**
   * Limit how many UserUsages to delete.
   */
  limit?: number
}

/**
 * UserUsage without action
 */
export type UserUsageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserUsage
   */
  select?: Prisma.UserUsageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserUsage
   */
  omit?: Prisma.UserUsageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserUsageInclude<ExtArgs> | null
}
