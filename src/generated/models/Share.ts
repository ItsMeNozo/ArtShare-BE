
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `Share` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Share
 * 
 */
export type ShareModel = runtime.Types.Result.DefaultSelection<Prisma.$SharePayload>

export type AggregateShare = {
  _count: ShareCountAggregateOutputType | null
  _avg: ShareAvgAggregateOutputType | null
  _sum: ShareSumAggregateOutputType | null
  _min: ShareMinAggregateOutputType | null
  _max: ShareMaxAggregateOutputType | null
}

export type ShareAvgAggregateOutputType = {
  id: number | null
  blog_id: number | null
  post_id: number | null
}

export type ShareSumAggregateOutputType = {
  id: number | null
  blog_id: number | null
  post_id: number | null
}

export type ShareMinAggregateOutputType = {
  id: number | null
  user_id: string | null
  share_platform: $Enums.SharePlatform | null
  created_at: Date | null
  blog_id: number | null
  post_id: number | null
}

export type ShareMaxAggregateOutputType = {
  id: number | null
  user_id: string | null
  share_platform: $Enums.SharePlatform | null
  created_at: Date | null
  blog_id: number | null
  post_id: number | null
}

export type ShareCountAggregateOutputType = {
  id: number
  user_id: number
  share_platform: number
  created_at: number
  blog_id: number
  post_id: number
  _all: number
}


export type ShareAvgAggregateInputType = {
  id?: true
  blog_id?: true
  post_id?: true
}

export type ShareSumAggregateInputType = {
  id?: true
  blog_id?: true
  post_id?: true
}

export type ShareMinAggregateInputType = {
  id?: true
  user_id?: true
  share_platform?: true
  created_at?: true
  blog_id?: true
  post_id?: true
}

export type ShareMaxAggregateInputType = {
  id?: true
  user_id?: true
  share_platform?: true
  created_at?: true
  blog_id?: true
  post_id?: true
}

export type ShareCountAggregateInputType = {
  id?: true
  user_id?: true
  share_platform?: true
  created_at?: true
  blog_id?: true
  post_id?: true
  _all?: true
}

export type ShareAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Share to aggregate.
   */
  where?: Prisma.ShareWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shares to fetch.
   */
  orderBy?: Prisma.ShareOrderByWithRelationInput | Prisma.ShareOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ShareWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shares from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shares.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Shares
  **/
  _count?: true | ShareCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ShareAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ShareSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ShareMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ShareMaxAggregateInputType
}

export type GetShareAggregateType<T extends ShareAggregateArgs> = {
      [P in keyof T & keyof AggregateShare]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateShare[P]>
    : Prisma.GetScalarType<T[P], AggregateShare[P]>
}




export type ShareGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ShareWhereInput
  orderBy?: Prisma.ShareOrderByWithAggregationInput | Prisma.ShareOrderByWithAggregationInput[]
  by: Prisma.ShareScalarFieldEnum[] | Prisma.ShareScalarFieldEnum
  having?: Prisma.ShareScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ShareCountAggregateInputType | true
  _avg?: ShareAvgAggregateInputType
  _sum?: ShareSumAggregateInputType
  _min?: ShareMinAggregateInputType
  _max?: ShareMaxAggregateInputType
}

export type ShareGroupByOutputType = {
  id: number
  user_id: string
  share_platform: $Enums.SharePlatform
  created_at: Date
  blog_id: number | null
  post_id: number | null
  _count: ShareCountAggregateOutputType | null
  _avg: ShareAvgAggregateOutputType | null
  _sum: ShareSumAggregateOutputType | null
  _min: ShareMinAggregateOutputType | null
  _max: ShareMaxAggregateOutputType | null
}

type GetShareGroupByPayload<T extends ShareGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ShareGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ShareGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ShareGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ShareGroupByOutputType[P]>
      }
    >
  > 



export type ShareWhereInput = {
  AND?: Prisma.ShareWhereInput | Prisma.ShareWhereInput[]
  OR?: Prisma.ShareWhereInput[]
  NOT?: Prisma.ShareWhereInput | Prisma.ShareWhereInput[]
  id?: Prisma.IntFilter<"Share"> | number
  user_id?: Prisma.StringFilter<"Share"> | string
  share_platform?: Prisma.EnumSharePlatformFilter<"Share"> | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFilter<"Share"> | Date | string
  blog_id?: Prisma.IntNullableFilter<"Share"> | number | null
  post_id?: Prisma.IntNullableFilter<"Share"> | number | null
  blog?: Prisma.XOR<Prisma.BlogNullableScalarRelationFilter, Prisma.BlogWhereInput> | null
  post?: Prisma.XOR<Prisma.PostNullableScalarRelationFilter, Prisma.PostWhereInput> | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ShareOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  share_platform?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  blog_id?: Prisma.SortOrderInput | Prisma.SortOrder
  post_id?: Prisma.SortOrderInput | Prisma.SortOrder
  blog?: Prisma.BlogOrderByWithRelationInput
  post?: Prisma.PostOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type ShareWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  user_id_post_id?: Prisma.ShareUser_idPost_idCompoundUniqueInput
  user_id_blog_id?: Prisma.ShareUser_idBlog_idCompoundUniqueInput
  AND?: Prisma.ShareWhereInput | Prisma.ShareWhereInput[]
  OR?: Prisma.ShareWhereInput[]
  NOT?: Prisma.ShareWhereInput | Prisma.ShareWhereInput[]
  user_id?: Prisma.StringFilter<"Share"> | string
  share_platform?: Prisma.EnumSharePlatformFilter<"Share"> | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFilter<"Share"> | Date | string
  blog_id?: Prisma.IntNullableFilter<"Share"> | number | null
  post_id?: Prisma.IntNullableFilter<"Share"> | number | null
  blog?: Prisma.XOR<Prisma.BlogNullableScalarRelationFilter, Prisma.BlogWhereInput> | null
  post?: Prisma.XOR<Prisma.PostNullableScalarRelationFilter, Prisma.PostWhereInput> | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "user_id_post_id" | "user_id_blog_id">

export type ShareOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  share_platform?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  blog_id?: Prisma.SortOrderInput | Prisma.SortOrder
  post_id?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ShareCountOrderByAggregateInput
  _avg?: Prisma.ShareAvgOrderByAggregateInput
  _max?: Prisma.ShareMaxOrderByAggregateInput
  _min?: Prisma.ShareMinOrderByAggregateInput
  _sum?: Prisma.ShareSumOrderByAggregateInput
}

export type ShareScalarWhereWithAggregatesInput = {
  AND?: Prisma.ShareScalarWhereWithAggregatesInput | Prisma.ShareScalarWhereWithAggregatesInput[]
  OR?: Prisma.ShareScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ShareScalarWhereWithAggregatesInput | Prisma.ShareScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Share"> | number
  user_id?: Prisma.StringWithAggregatesFilter<"Share"> | string
  share_platform?: Prisma.EnumSharePlatformWithAggregatesFilter<"Share"> | $Enums.SharePlatform
  created_at?: Prisma.DateTimeWithAggregatesFilter<"Share"> | Date | string
  blog_id?: Prisma.IntNullableWithAggregatesFilter<"Share"> | number | null
  post_id?: Prisma.IntNullableWithAggregatesFilter<"Share"> | number | null
}

export type ShareCreateInput = {
  share_platform: $Enums.SharePlatform
  created_at?: Date | string
  blog?: Prisma.BlogCreateNestedOneWithoutSharesInput
  post?: Prisma.PostCreateNestedOneWithoutSharesInput
  user: Prisma.UserCreateNestedOneWithoutSharesInput
}

export type ShareUncheckedCreateInput = {
  id?: number
  user_id: string
  share_platform: $Enums.SharePlatform
  created_at?: Date | string
  blog_id?: number | null
  post_id?: number | null
}

export type ShareUpdateInput = {
  share_platform?: Prisma.EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  blog?: Prisma.BlogUpdateOneWithoutSharesNestedInput
  post?: Prisma.PostUpdateOneWithoutSharesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutSharesNestedInput
}

export type ShareUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  share_platform?: Prisma.EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  blog_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  post_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ShareCreateManyInput = {
  id?: number
  user_id: string
  share_platform: $Enums.SharePlatform
  created_at?: Date | string
  blog_id?: number | null
  post_id?: number | null
}

export type ShareUpdateManyMutationInput = {
  share_platform?: Prisma.EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShareUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  share_platform?: Prisma.EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  blog_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  post_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ShareListRelationFilter = {
  every?: Prisma.ShareWhereInput
  some?: Prisma.ShareWhereInput
  none?: Prisma.ShareWhereInput
}

export type ShareOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ShareUser_idPost_idCompoundUniqueInput = {
  user_id: string
  post_id: number
}

export type ShareUser_idBlog_idCompoundUniqueInput = {
  user_id: string
  blog_id: number
}

export type ShareCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  share_platform?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  blog_id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
}

export type ShareAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  blog_id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
}

export type ShareMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  share_platform?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  blog_id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
}

export type ShareMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  share_platform?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  blog_id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
}

export type ShareSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  blog_id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
}

export type ShareCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ShareCreateWithoutUserInput, Prisma.ShareUncheckedCreateWithoutUserInput> | Prisma.ShareCreateWithoutUserInput[] | Prisma.ShareUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ShareCreateOrConnectWithoutUserInput | Prisma.ShareCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ShareCreateManyUserInputEnvelope
  connect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
}

export type ShareUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ShareCreateWithoutUserInput, Prisma.ShareUncheckedCreateWithoutUserInput> | Prisma.ShareCreateWithoutUserInput[] | Prisma.ShareUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ShareCreateOrConnectWithoutUserInput | Prisma.ShareCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ShareCreateManyUserInputEnvelope
  connect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
}

export type ShareUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ShareCreateWithoutUserInput, Prisma.ShareUncheckedCreateWithoutUserInput> | Prisma.ShareCreateWithoutUserInput[] | Prisma.ShareUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ShareCreateOrConnectWithoutUserInput | Prisma.ShareCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ShareUpsertWithWhereUniqueWithoutUserInput | Prisma.ShareUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ShareCreateManyUserInputEnvelope
  set?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  disconnect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  delete?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  connect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  update?: Prisma.ShareUpdateWithWhereUniqueWithoutUserInput | Prisma.ShareUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ShareUpdateManyWithWhereWithoutUserInput | Prisma.ShareUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ShareScalarWhereInput | Prisma.ShareScalarWhereInput[]
}

export type ShareUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ShareCreateWithoutUserInput, Prisma.ShareUncheckedCreateWithoutUserInput> | Prisma.ShareCreateWithoutUserInput[] | Prisma.ShareUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ShareCreateOrConnectWithoutUserInput | Prisma.ShareCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ShareUpsertWithWhereUniqueWithoutUserInput | Prisma.ShareUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ShareCreateManyUserInputEnvelope
  set?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  disconnect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  delete?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  connect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  update?: Prisma.ShareUpdateWithWhereUniqueWithoutUserInput | Prisma.ShareUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ShareUpdateManyWithWhereWithoutUserInput | Prisma.ShareUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ShareScalarWhereInput | Prisma.ShareScalarWhereInput[]
}

export type ShareCreateNestedManyWithoutPostInput = {
  create?: Prisma.XOR<Prisma.ShareCreateWithoutPostInput, Prisma.ShareUncheckedCreateWithoutPostInput> | Prisma.ShareCreateWithoutPostInput[] | Prisma.ShareUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.ShareCreateOrConnectWithoutPostInput | Prisma.ShareCreateOrConnectWithoutPostInput[]
  createMany?: Prisma.ShareCreateManyPostInputEnvelope
  connect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
}

export type ShareUncheckedCreateNestedManyWithoutPostInput = {
  create?: Prisma.XOR<Prisma.ShareCreateWithoutPostInput, Prisma.ShareUncheckedCreateWithoutPostInput> | Prisma.ShareCreateWithoutPostInput[] | Prisma.ShareUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.ShareCreateOrConnectWithoutPostInput | Prisma.ShareCreateOrConnectWithoutPostInput[]
  createMany?: Prisma.ShareCreateManyPostInputEnvelope
  connect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
}

export type ShareUpdateManyWithoutPostNestedInput = {
  create?: Prisma.XOR<Prisma.ShareCreateWithoutPostInput, Prisma.ShareUncheckedCreateWithoutPostInput> | Prisma.ShareCreateWithoutPostInput[] | Prisma.ShareUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.ShareCreateOrConnectWithoutPostInput | Prisma.ShareCreateOrConnectWithoutPostInput[]
  upsert?: Prisma.ShareUpsertWithWhereUniqueWithoutPostInput | Prisma.ShareUpsertWithWhereUniqueWithoutPostInput[]
  createMany?: Prisma.ShareCreateManyPostInputEnvelope
  set?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  disconnect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  delete?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  connect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  update?: Prisma.ShareUpdateWithWhereUniqueWithoutPostInput | Prisma.ShareUpdateWithWhereUniqueWithoutPostInput[]
  updateMany?: Prisma.ShareUpdateManyWithWhereWithoutPostInput | Prisma.ShareUpdateManyWithWhereWithoutPostInput[]
  deleteMany?: Prisma.ShareScalarWhereInput | Prisma.ShareScalarWhereInput[]
}

export type ShareUncheckedUpdateManyWithoutPostNestedInput = {
  create?: Prisma.XOR<Prisma.ShareCreateWithoutPostInput, Prisma.ShareUncheckedCreateWithoutPostInput> | Prisma.ShareCreateWithoutPostInput[] | Prisma.ShareUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.ShareCreateOrConnectWithoutPostInput | Prisma.ShareCreateOrConnectWithoutPostInput[]
  upsert?: Prisma.ShareUpsertWithWhereUniqueWithoutPostInput | Prisma.ShareUpsertWithWhereUniqueWithoutPostInput[]
  createMany?: Prisma.ShareCreateManyPostInputEnvelope
  set?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  disconnect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  delete?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  connect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  update?: Prisma.ShareUpdateWithWhereUniqueWithoutPostInput | Prisma.ShareUpdateWithWhereUniqueWithoutPostInput[]
  updateMany?: Prisma.ShareUpdateManyWithWhereWithoutPostInput | Prisma.ShareUpdateManyWithWhereWithoutPostInput[]
  deleteMany?: Prisma.ShareScalarWhereInput | Prisma.ShareScalarWhereInput[]
}

export type ShareCreateNestedManyWithoutBlogInput = {
  create?: Prisma.XOR<Prisma.ShareCreateWithoutBlogInput, Prisma.ShareUncheckedCreateWithoutBlogInput> | Prisma.ShareCreateWithoutBlogInput[] | Prisma.ShareUncheckedCreateWithoutBlogInput[]
  connectOrCreate?: Prisma.ShareCreateOrConnectWithoutBlogInput | Prisma.ShareCreateOrConnectWithoutBlogInput[]
  createMany?: Prisma.ShareCreateManyBlogInputEnvelope
  connect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
}

export type ShareUncheckedCreateNestedManyWithoutBlogInput = {
  create?: Prisma.XOR<Prisma.ShareCreateWithoutBlogInput, Prisma.ShareUncheckedCreateWithoutBlogInput> | Prisma.ShareCreateWithoutBlogInput[] | Prisma.ShareUncheckedCreateWithoutBlogInput[]
  connectOrCreate?: Prisma.ShareCreateOrConnectWithoutBlogInput | Prisma.ShareCreateOrConnectWithoutBlogInput[]
  createMany?: Prisma.ShareCreateManyBlogInputEnvelope
  connect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
}

export type ShareUpdateManyWithoutBlogNestedInput = {
  create?: Prisma.XOR<Prisma.ShareCreateWithoutBlogInput, Prisma.ShareUncheckedCreateWithoutBlogInput> | Prisma.ShareCreateWithoutBlogInput[] | Prisma.ShareUncheckedCreateWithoutBlogInput[]
  connectOrCreate?: Prisma.ShareCreateOrConnectWithoutBlogInput | Prisma.ShareCreateOrConnectWithoutBlogInput[]
  upsert?: Prisma.ShareUpsertWithWhereUniqueWithoutBlogInput | Prisma.ShareUpsertWithWhereUniqueWithoutBlogInput[]
  createMany?: Prisma.ShareCreateManyBlogInputEnvelope
  set?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  disconnect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  delete?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  connect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  update?: Prisma.ShareUpdateWithWhereUniqueWithoutBlogInput | Prisma.ShareUpdateWithWhereUniqueWithoutBlogInput[]
  updateMany?: Prisma.ShareUpdateManyWithWhereWithoutBlogInput | Prisma.ShareUpdateManyWithWhereWithoutBlogInput[]
  deleteMany?: Prisma.ShareScalarWhereInput | Prisma.ShareScalarWhereInput[]
}

export type ShareUncheckedUpdateManyWithoutBlogNestedInput = {
  create?: Prisma.XOR<Prisma.ShareCreateWithoutBlogInput, Prisma.ShareUncheckedCreateWithoutBlogInput> | Prisma.ShareCreateWithoutBlogInput[] | Prisma.ShareUncheckedCreateWithoutBlogInput[]
  connectOrCreate?: Prisma.ShareCreateOrConnectWithoutBlogInput | Prisma.ShareCreateOrConnectWithoutBlogInput[]
  upsert?: Prisma.ShareUpsertWithWhereUniqueWithoutBlogInput | Prisma.ShareUpsertWithWhereUniqueWithoutBlogInput[]
  createMany?: Prisma.ShareCreateManyBlogInputEnvelope
  set?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  disconnect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  delete?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  connect?: Prisma.ShareWhereUniqueInput | Prisma.ShareWhereUniqueInput[]
  update?: Prisma.ShareUpdateWithWhereUniqueWithoutBlogInput | Prisma.ShareUpdateWithWhereUniqueWithoutBlogInput[]
  updateMany?: Prisma.ShareUpdateManyWithWhereWithoutBlogInput | Prisma.ShareUpdateManyWithWhereWithoutBlogInput[]
  deleteMany?: Prisma.ShareScalarWhereInput | Prisma.ShareScalarWhereInput[]
}

export type EnumSharePlatformFieldUpdateOperationsInput = {
  set?: $Enums.SharePlatform
}

export type ShareCreateWithoutUserInput = {
  share_platform: $Enums.SharePlatform
  created_at?: Date | string
  blog?: Prisma.BlogCreateNestedOneWithoutSharesInput
  post?: Prisma.PostCreateNestedOneWithoutSharesInput
}

export type ShareUncheckedCreateWithoutUserInput = {
  id?: number
  share_platform: $Enums.SharePlatform
  created_at?: Date | string
  blog_id?: number | null
  post_id?: number | null
}

export type ShareCreateOrConnectWithoutUserInput = {
  where: Prisma.ShareWhereUniqueInput
  create: Prisma.XOR<Prisma.ShareCreateWithoutUserInput, Prisma.ShareUncheckedCreateWithoutUserInput>
}

export type ShareCreateManyUserInputEnvelope = {
  data: Prisma.ShareCreateManyUserInput | Prisma.ShareCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ShareUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ShareWhereUniqueInput
  update: Prisma.XOR<Prisma.ShareUpdateWithoutUserInput, Prisma.ShareUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ShareCreateWithoutUserInput, Prisma.ShareUncheckedCreateWithoutUserInput>
}

export type ShareUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ShareWhereUniqueInput
  data: Prisma.XOR<Prisma.ShareUpdateWithoutUserInput, Prisma.ShareUncheckedUpdateWithoutUserInput>
}

export type ShareUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ShareScalarWhereInput
  data: Prisma.XOR<Prisma.ShareUpdateManyMutationInput, Prisma.ShareUncheckedUpdateManyWithoutUserInput>
}

export type ShareScalarWhereInput = {
  AND?: Prisma.ShareScalarWhereInput | Prisma.ShareScalarWhereInput[]
  OR?: Prisma.ShareScalarWhereInput[]
  NOT?: Prisma.ShareScalarWhereInput | Prisma.ShareScalarWhereInput[]
  id?: Prisma.IntFilter<"Share"> | number
  user_id?: Prisma.StringFilter<"Share"> | string
  share_platform?: Prisma.EnumSharePlatformFilter<"Share"> | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFilter<"Share"> | Date | string
  blog_id?: Prisma.IntNullableFilter<"Share"> | number | null
  post_id?: Prisma.IntNullableFilter<"Share"> | number | null
}

export type ShareCreateWithoutPostInput = {
  share_platform: $Enums.SharePlatform
  created_at?: Date | string
  blog?: Prisma.BlogCreateNestedOneWithoutSharesInput
  user: Prisma.UserCreateNestedOneWithoutSharesInput
}

export type ShareUncheckedCreateWithoutPostInput = {
  id?: number
  user_id: string
  share_platform: $Enums.SharePlatform
  created_at?: Date | string
  blog_id?: number | null
}

export type ShareCreateOrConnectWithoutPostInput = {
  where: Prisma.ShareWhereUniqueInput
  create: Prisma.XOR<Prisma.ShareCreateWithoutPostInput, Prisma.ShareUncheckedCreateWithoutPostInput>
}

export type ShareCreateManyPostInputEnvelope = {
  data: Prisma.ShareCreateManyPostInput | Prisma.ShareCreateManyPostInput[]
  skipDuplicates?: boolean
}

export type ShareUpsertWithWhereUniqueWithoutPostInput = {
  where: Prisma.ShareWhereUniqueInput
  update: Prisma.XOR<Prisma.ShareUpdateWithoutPostInput, Prisma.ShareUncheckedUpdateWithoutPostInput>
  create: Prisma.XOR<Prisma.ShareCreateWithoutPostInput, Prisma.ShareUncheckedCreateWithoutPostInput>
}

export type ShareUpdateWithWhereUniqueWithoutPostInput = {
  where: Prisma.ShareWhereUniqueInput
  data: Prisma.XOR<Prisma.ShareUpdateWithoutPostInput, Prisma.ShareUncheckedUpdateWithoutPostInput>
}

export type ShareUpdateManyWithWhereWithoutPostInput = {
  where: Prisma.ShareScalarWhereInput
  data: Prisma.XOR<Prisma.ShareUpdateManyMutationInput, Prisma.ShareUncheckedUpdateManyWithoutPostInput>
}

export type ShareCreateWithoutBlogInput = {
  share_platform: $Enums.SharePlatform
  created_at?: Date | string
  post?: Prisma.PostCreateNestedOneWithoutSharesInput
  user: Prisma.UserCreateNestedOneWithoutSharesInput
}

export type ShareUncheckedCreateWithoutBlogInput = {
  id?: number
  user_id: string
  share_platform: $Enums.SharePlatform
  created_at?: Date | string
  post_id?: number | null
}

export type ShareCreateOrConnectWithoutBlogInput = {
  where: Prisma.ShareWhereUniqueInput
  create: Prisma.XOR<Prisma.ShareCreateWithoutBlogInput, Prisma.ShareUncheckedCreateWithoutBlogInput>
}

export type ShareCreateManyBlogInputEnvelope = {
  data: Prisma.ShareCreateManyBlogInput | Prisma.ShareCreateManyBlogInput[]
  skipDuplicates?: boolean
}

export type ShareUpsertWithWhereUniqueWithoutBlogInput = {
  where: Prisma.ShareWhereUniqueInput
  update: Prisma.XOR<Prisma.ShareUpdateWithoutBlogInput, Prisma.ShareUncheckedUpdateWithoutBlogInput>
  create: Prisma.XOR<Prisma.ShareCreateWithoutBlogInput, Prisma.ShareUncheckedCreateWithoutBlogInput>
}

export type ShareUpdateWithWhereUniqueWithoutBlogInput = {
  where: Prisma.ShareWhereUniqueInput
  data: Prisma.XOR<Prisma.ShareUpdateWithoutBlogInput, Prisma.ShareUncheckedUpdateWithoutBlogInput>
}

export type ShareUpdateManyWithWhereWithoutBlogInput = {
  where: Prisma.ShareScalarWhereInput
  data: Prisma.XOR<Prisma.ShareUpdateManyMutationInput, Prisma.ShareUncheckedUpdateManyWithoutBlogInput>
}

export type ShareCreateManyUserInput = {
  id?: number
  share_platform: $Enums.SharePlatform
  created_at?: Date | string
  blog_id?: number | null
  post_id?: number | null
}

export type ShareUpdateWithoutUserInput = {
  share_platform?: Prisma.EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  blog?: Prisma.BlogUpdateOneWithoutSharesNestedInput
  post?: Prisma.PostUpdateOneWithoutSharesNestedInput
}

export type ShareUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  share_platform?: Prisma.EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  blog_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  post_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ShareUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  share_platform?: Prisma.EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  blog_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  post_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ShareCreateManyPostInput = {
  id?: number
  user_id: string
  share_platform: $Enums.SharePlatform
  created_at?: Date | string
  blog_id?: number | null
}

export type ShareUpdateWithoutPostInput = {
  share_platform?: Prisma.EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  blog?: Prisma.BlogUpdateOneWithoutSharesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutSharesNestedInput
}

export type ShareUncheckedUpdateWithoutPostInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  share_platform?: Prisma.EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  blog_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ShareUncheckedUpdateManyWithoutPostInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  share_platform?: Prisma.EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  blog_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ShareCreateManyBlogInput = {
  id?: number
  user_id: string
  share_platform: $Enums.SharePlatform
  created_at?: Date | string
  post_id?: number | null
}

export type ShareUpdateWithoutBlogInput = {
  share_platform?: Prisma.EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  post?: Prisma.PostUpdateOneWithoutSharesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutSharesNestedInput
}

export type ShareUncheckedUpdateWithoutBlogInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  share_platform?: Prisma.EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  post_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ShareUncheckedUpdateManyWithoutBlogInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  share_platform?: Prisma.EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  post_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type ShareSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  share_platform?: boolean
  created_at?: boolean
  blog_id?: boolean
  post_id?: boolean
  blog?: boolean | Prisma.Share$blogArgs<ExtArgs>
  post?: boolean | Prisma.Share$postArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["share"]>

export type ShareSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  share_platform?: boolean
  created_at?: boolean
  blog_id?: boolean
  post_id?: boolean
  blog?: boolean | Prisma.Share$blogArgs<ExtArgs>
  post?: boolean | Prisma.Share$postArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["share"]>

export type ShareSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  share_platform?: boolean
  created_at?: boolean
  blog_id?: boolean
  post_id?: boolean
  blog?: boolean | Prisma.Share$blogArgs<ExtArgs>
  post?: boolean | Prisma.Share$postArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["share"]>

export type ShareSelectScalar = {
  id?: boolean
  user_id?: boolean
  share_platform?: boolean
  created_at?: boolean
  blog_id?: boolean
  post_id?: boolean
}

export type ShareOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "user_id" | "share_platform" | "created_at" | "blog_id" | "post_id", ExtArgs["result"]["share"]>
export type ShareInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  blog?: boolean | Prisma.Share$blogArgs<ExtArgs>
  post?: boolean | Prisma.Share$postArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ShareIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  blog?: boolean | Prisma.Share$blogArgs<ExtArgs>
  post?: boolean | Prisma.Share$postArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ShareIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  blog?: boolean | Prisma.Share$blogArgs<ExtArgs>
  post?: boolean | Prisma.Share$postArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $SharePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Share"
  objects: {
    blog: Prisma.$BlogPayload<ExtArgs> | null
    post: Prisma.$PostPayload<ExtArgs> | null
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    user_id: string
    share_platform: $Enums.SharePlatform
    created_at: Date
    blog_id: number | null
    post_id: number | null
  }, ExtArgs["result"]["share"]>
  composites: {}
}

export type ShareGetPayload<S extends boolean | null | undefined | ShareDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SharePayload, S>

export type ShareCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ShareFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ShareCountAggregateInputType | true
  }

export interface ShareDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Share'], meta: { name: 'Share' } }
  /**
   * Find zero or one Share that matches the filter.
   * @param {ShareFindUniqueArgs} args - Arguments to find a Share
   * @example
   * // Get one Share
   * const share = await prisma.share.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ShareFindUniqueArgs>(args: Prisma.SelectSubset<T, ShareFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ShareClient<runtime.Types.Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Share that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ShareFindUniqueOrThrowArgs} args - Arguments to find a Share
   * @example
   * // Get one Share
   * const share = await prisma.share.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ShareFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ShareFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShareClient<runtime.Types.Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Share that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShareFindFirstArgs} args - Arguments to find a Share
   * @example
   * // Get one Share
   * const share = await prisma.share.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ShareFindFirstArgs>(args?: Prisma.SelectSubset<T, ShareFindFirstArgs<ExtArgs>>): Prisma.Prisma__ShareClient<runtime.Types.Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Share that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShareFindFirstOrThrowArgs} args - Arguments to find a Share
   * @example
   * // Get one Share
   * const share = await prisma.share.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ShareFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ShareFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShareClient<runtime.Types.Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Shares that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShareFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Shares
   * const shares = await prisma.share.findMany()
   * 
   * // Get first 10 Shares
   * const shares = await prisma.share.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const shareWithIdOnly = await prisma.share.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ShareFindManyArgs>(args?: Prisma.SelectSubset<T, ShareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Share.
   * @param {ShareCreateArgs} args - Arguments to create a Share.
   * @example
   * // Create one Share
   * const Share = await prisma.share.create({
   *   data: {
   *     // ... data to create a Share
   *   }
   * })
   * 
   */
  create<T extends ShareCreateArgs>(args: Prisma.SelectSubset<T, ShareCreateArgs<ExtArgs>>): Prisma.Prisma__ShareClient<runtime.Types.Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Shares.
   * @param {ShareCreateManyArgs} args - Arguments to create many Shares.
   * @example
   * // Create many Shares
   * const share = await prisma.share.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ShareCreateManyArgs>(args?: Prisma.SelectSubset<T, ShareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Shares and returns the data saved in the database.
   * @param {ShareCreateManyAndReturnArgs} args - Arguments to create many Shares.
   * @example
   * // Create many Shares
   * const share = await prisma.share.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Shares and only return the `id`
   * const shareWithIdOnly = await prisma.share.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ShareCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ShareCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Share.
   * @param {ShareDeleteArgs} args - Arguments to delete one Share.
   * @example
   * // Delete one Share
   * const Share = await prisma.share.delete({
   *   where: {
   *     // ... filter to delete one Share
   *   }
   * })
   * 
   */
  delete<T extends ShareDeleteArgs>(args: Prisma.SelectSubset<T, ShareDeleteArgs<ExtArgs>>): Prisma.Prisma__ShareClient<runtime.Types.Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Share.
   * @param {ShareUpdateArgs} args - Arguments to update one Share.
   * @example
   * // Update one Share
   * const share = await prisma.share.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ShareUpdateArgs>(args: Prisma.SelectSubset<T, ShareUpdateArgs<ExtArgs>>): Prisma.Prisma__ShareClient<runtime.Types.Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Shares.
   * @param {ShareDeleteManyArgs} args - Arguments to filter Shares to delete.
   * @example
   * // Delete a few Shares
   * const { count } = await prisma.share.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ShareDeleteManyArgs>(args?: Prisma.SelectSubset<T, ShareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Shares.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShareUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Shares
   * const share = await prisma.share.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ShareUpdateManyArgs>(args: Prisma.SelectSubset<T, ShareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Shares and returns the data updated in the database.
   * @param {ShareUpdateManyAndReturnArgs} args - Arguments to update many Shares.
   * @example
   * // Update many Shares
   * const share = await prisma.share.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Shares and only return the `id`
   * const shareWithIdOnly = await prisma.share.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ShareUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ShareUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Share.
   * @param {ShareUpsertArgs} args - Arguments to update or create a Share.
   * @example
   * // Update or create a Share
   * const share = await prisma.share.upsert({
   *   create: {
   *     // ... data to create a Share
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Share we want to update
   *   }
   * })
   */
  upsert<T extends ShareUpsertArgs>(args: Prisma.SelectSubset<T, ShareUpsertArgs<ExtArgs>>): Prisma.Prisma__ShareClient<runtime.Types.Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Shares.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShareCountArgs} args - Arguments to filter Shares to count.
   * @example
   * // Count the number of Shares
   * const count = await prisma.share.count({
   *   where: {
   *     // ... the filter for the Shares we want to count
   *   }
   * })
  **/
  count<T extends ShareCountArgs>(
    args?: Prisma.Subset<T, ShareCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ShareCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Share.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ShareAggregateArgs>(args: Prisma.Subset<T, ShareAggregateArgs>): Prisma.PrismaPromise<GetShareAggregateType<T>>

  /**
   * Group by Share.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShareGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ShareGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ShareGroupByArgs['orderBy'] }
      : { orderBy?: ShareGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Share model
 */
readonly fields: ShareFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Share.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ShareClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  blog<T extends Prisma.Share$blogArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Share$blogArgs<ExtArgs>>): Prisma.Prisma__BlogClient<runtime.Types.Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  post<T extends Prisma.Share$postArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Share$postArgs<ExtArgs>>): Prisma.Prisma__PostClient<runtime.Types.Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Share model
 */
export interface ShareFieldRefs {
  readonly id: Prisma.FieldRef<"Share", 'Int'>
  readonly user_id: Prisma.FieldRef<"Share", 'String'>
  readonly share_platform: Prisma.FieldRef<"Share", 'SharePlatform'>
  readonly created_at: Prisma.FieldRef<"Share", 'DateTime'>
  readonly blog_id: Prisma.FieldRef<"Share", 'Int'>
  readonly post_id: Prisma.FieldRef<"Share", 'Int'>
}
    

// Custom InputTypes
/**
 * Share findUnique
 */
export type ShareFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Share
   */
  select?: Prisma.ShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Share
   */
  omit?: Prisma.ShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShareInclude<ExtArgs> | null
  /**
   * Filter, which Share to fetch.
   */
  where: Prisma.ShareWhereUniqueInput
}

/**
 * Share findUniqueOrThrow
 */
export type ShareFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Share
   */
  select?: Prisma.ShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Share
   */
  omit?: Prisma.ShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShareInclude<ExtArgs> | null
  /**
   * Filter, which Share to fetch.
   */
  where: Prisma.ShareWhereUniqueInput
}

/**
 * Share findFirst
 */
export type ShareFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Share
   */
  select?: Prisma.ShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Share
   */
  omit?: Prisma.ShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShareInclude<ExtArgs> | null
  /**
   * Filter, which Share to fetch.
   */
  where?: Prisma.ShareWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shares to fetch.
   */
  orderBy?: Prisma.ShareOrderByWithRelationInput | Prisma.ShareOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Shares.
   */
  cursor?: Prisma.ShareWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shares from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shares.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Shares.
   */
  distinct?: Prisma.ShareScalarFieldEnum | Prisma.ShareScalarFieldEnum[]
}

/**
 * Share findFirstOrThrow
 */
export type ShareFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Share
   */
  select?: Prisma.ShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Share
   */
  omit?: Prisma.ShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShareInclude<ExtArgs> | null
  /**
   * Filter, which Share to fetch.
   */
  where?: Prisma.ShareWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shares to fetch.
   */
  orderBy?: Prisma.ShareOrderByWithRelationInput | Prisma.ShareOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Shares.
   */
  cursor?: Prisma.ShareWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shares from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shares.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Shares.
   */
  distinct?: Prisma.ShareScalarFieldEnum | Prisma.ShareScalarFieldEnum[]
}

/**
 * Share findMany
 */
export type ShareFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Share
   */
  select?: Prisma.ShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Share
   */
  omit?: Prisma.ShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShareInclude<ExtArgs> | null
  /**
   * Filter, which Shares to fetch.
   */
  where?: Prisma.ShareWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shares to fetch.
   */
  orderBy?: Prisma.ShareOrderByWithRelationInput | Prisma.ShareOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Shares.
   */
  cursor?: Prisma.ShareWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shares from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shares.
   */
  skip?: number
  distinct?: Prisma.ShareScalarFieldEnum | Prisma.ShareScalarFieldEnum[]
}

/**
 * Share create
 */
export type ShareCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Share
   */
  select?: Prisma.ShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Share
   */
  omit?: Prisma.ShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShareInclude<ExtArgs> | null
  /**
   * The data needed to create a Share.
   */
  data: Prisma.XOR<Prisma.ShareCreateInput, Prisma.ShareUncheckedCreateInput>
}

/**
 * Share createMany
 */
export type ShareCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Shares.
   */
  data: Prisma.ShareCreateManyInput | Prisma.ShareCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Share createManyAndReturn
 */
export type ShareCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Share
   */
  select?: Prisma.ShareSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Share
   */
  omit?: Prisma.ShareOmit<ExtArgs> | null
  /**
   * The data used to create many Shares.
   */
  data: Prisma.ShareCreateManyInput | Prisma.ShareCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShareIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Share update
 */
export type ShareUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Share
   */
  select?: Prisma.ShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Share
   */
  omit?: Prisma.ShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShareInclude<ExtArgs> | null
  /**
   * The data needed to update a Share.
   */
  data: Prisma.XOR<Prisma.ShareUpdateInput, Prisma.ShareUncheckedUpdateInput>
  /**
   * Choose, which Share to update.
   */
  where: Prisma.ShareWhereUniqueInput
}

/**
 * Share updateMany
 */
export type ShareUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Shares.
   */
  data: Prisma.XOR<Prisma.ShareUpdateManyMutationInput, Prisma.ShareUncheckedUpdateManyInput>
  /**
   * Filter which Shares to update
   */
  where?: Prisma.ShareWhereInput
  /**
   * Limit how many Shares to update.
   */
  limit?: number
}

/**
 * Share updateManyAndReturn
 */
export type ShareUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Share
   */
  select?: Prisma.ShareSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Share
   */
  omit?: Prisma.ShareOmit<ExtArgs> | null
  /**
   * The data used to update Shares.
   */
  data: Prisma.XOR<Prisma.ShareUpdateManyMutationInput, Prisma.ShareUncheckedUpdateManyInput>
  /**
   * Filter which Shares to update
   */
  where?: Prisma.ShareWhereInput
  /**
   * Limit how many Shares to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShareIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Share upsert
 */
export type ShareUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Share
   */
  select?: Prisma.ShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Share
   */
  omit?: Prisma.ShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShareInclude<ExtArgs> | null
  /**
   * The filter to search for the Share to update in case it exists.
   */
  where: Prisma.ShareWhereUniqueInput
  /**
   * In case the Share found by the `where` argument doesn't exist, create a new Share with this data.
   */
  create: Prisma.XOR<Prisma.ShareCreateInput, Prisma.ShareUncheckedCreateInput>
  /**
   * In case the Share was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ShareUpdateInput, Prisma.ShareUncheckedUpdateInput>
}

/**
 * Share delete
 */
export type ShareDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Share
   */
  select?: Prisma.ShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Share
   */
  omit?: Prisma.ShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShareInclude<ExtArgs> | null
  /**
   * Filter which Share to delete.
   */
  where: Prisma.ShareWhereUniqueInput
}

/**
 * Share deleteMany
 */
export type ShareDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Shares to delete
   */
  where?: Prisma.ShareWhereInput
  /**
   * Limit how many Shares to delete.
   */
  limit?: number
}

/**
 * Share.blog
 */
export type Share$blogArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Blog
   */
  select?: Prisma.BlogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Blog
   */
  omit?: Prisma.BlogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlogInclude<ExtArgs> | null
  where?: Prisma.BlogWhereInput
}

/**
 * Share.post
 */
export type Share$postArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Post
   */
  select?: Prisma.PostSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Post
   */
  omit?: Prisma.PostOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostInclude<ExtArgs> | null
  where?: Prisma.PostWhereInput
}

/**
 * Share without action
 */
export type ShareDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Share
   */
  select?: Prisma.ShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Share
   */
  omit?: Prisma.ShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShareInclude<ExtArgs> | null
}
