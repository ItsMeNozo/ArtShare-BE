
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `UserAccess` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model UserAccess
 * 
 */
export type UserAccessModel = runtime.Types.Result.DefaultSelection<Prisma.$UserAccessPayload>

export type AggregateUserAccess = {
  _count: UserAccessCountAggregateOutputType | null
  _min: UserAccessMinAggregateOutputType | null
  _max: UserAccessMaxAggregateOutputType | null
}

export type UserAccessMinAggregateOutputType = {
  userId: string | null
  planId: $Enums.PaidAccessLevel | null
  expiresAt: Date | null
  stripeSubscriptionId: string | null
  stripePriceId: string | null
  stripeCustomerId: string | null
  createdAt: Date | null
  updatedAt: Date | null
  cancelAtPeriodEnd: boolean | null
}

export type UserAccessMaxAggregateOutputType = {
  userId: string | null
  planId: $Enums.PaidAccessLevel | null
  expiresAt: Date | null
  stripeSubscriptionId: string | null
  stripePriceId: string | null
  stripeCustomerId: string | null
  createdAt: Date | null
  updatedAt: Date | null
  cancelAtPeriodEnd: boolean | null
}

export type UserAccessCountAggregateOutputType = {
  userId: number
  planId: number
  expiresAt: number
  stripeSubscriptionId: number
  stripePriceId: number
  stripeCustomerId: number
  createdAt: number
  updatedAt: number
  cancelAtPeriodEnd: number
  _all: number
}


export type UserAccessMinAggregateInputType = {
  userId?: true
  planId?: true
  expiresAt?: true
  stripeSubscriptionId?: true
  stripePriceId?: true
  stripeCustomerId?: true
  createdAt?: true
  updatedAt?: true
  cancelAtPeriodEnd?: true
}

export type UserAccessMaxAggregateInputType = {
  userId?: true
  planId?: true
  expiresAt?: true
  stripeSubscriptionId?: true
  stripePriceId?: true
  stripeCustomerId?: true
  createdAt?: true
  updatedAt?: true
  cancelAtPeriodEnd?: true
}

export type UserAccessCountAggregateInputType = {
  userId?: true
  planId?: true
  expiresAt?: true
  stripeSubscriptionId?: true
  stripePriceId?: true
  stripeCustomerId?: true
  createdAt?: true
  updatedAt?: true
  cancelAtPeriodEnd?: true
  _all?: true
}

export type UserAccessAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserAccess to aggregate.
   */
  where?: Prisma.UserAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserAccesses to fetch.
   */
  orderBy?: Prisma.UserAccessOrderByWithRelationInput | Prisma.UserAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserAccesses
  **/
  _count?: true | UserAccessCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserAccessMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserAccessMaxAggregateInputType
}

export type GetUserAccessAggregateType<T extends UserAccessAggregateArgs> = {
      [P in keyof T & keyof AggregateUserAccess]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserAccess[P]>
    : Prisma.GetScalarType<T[P], AggregateUserAccess[P]>
}




export type UserAccessGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserAccessWhereInput
  orderBy?: Prisma.UserAccessOrderByWithAggregationInput | Prisma.UserAccessOrderByWithAggregationInput[]
  by: Prisma.UserAccessScalarFieldEnum[] | Prisma.UserAccessScalarFieldEnum
  having?: Prisma.UserAccessScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserAccessCountAggregateInputType | true
  _min?: UserAccessMinAggregateInputType
  _max?: UserAccessMaxAggregateInputType
}

export type UserAccessGroupByOutputType = {
  userId: string
  planId: $Enums.PaidAccessLevel
  expiresAt: Date
  stripeSubscriptionId: string | null
  stripePriceId: string | null
  stripeCustomerId: string | null
  createdAt: Date
  updatedAt: Date | null
  cancelAtPeriodEnd: boolean
  _count: UserAccessCountAggregateOutputType | null
  _min: UserAccessMinAggregateOutputType | null
  _max: UserAccessMaxAggregateOutputType | null
}

type GetUserAccessGroupByPayload<T extends UserAccessGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserAccessGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserAccessGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserAccessGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserAccessGroupByOutputType[P]>
      }
    >
  > 



export type UserAccessWhereInput = {
  AND?: Prisma.UserAccessWhereInput | Prisma.UserAccessWhereInput[]
  OR?: Prisma.UserAccessWhereInput[]
  NOT?: Prisma.UserAccessWhereInput | Prisma.UserAccessWhereInput[]
  userId?: Prisma.StringFilter<"UserAccess"> | string
  planId?: Prisma.EnumPaidAccessLevelFilter<"UserAccess"> | $Enums.PaidAccessLevel
  expiresAt?: Prisma.DateTimeFilter<"UserAccess"> | Date | string
  stripeSubscriptionId?: Prisma.StringNullableFilter<"UserAccess"> | string | null
  stripePriceId?: Prisma.StringNullableFilter<"UserAccess"> | string | null
  stripeCustomerId?: Prisma.StringNullableFilter<"UserAccess"> | string | null
  createdAt?: Prisma.DateTimeFilter<"UserAccess"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"UserAccess"> | Date | string | null
  cancelAtPeriodEnd?: Prisma.BoolFilter<"UserAccess"> | boolean
  plan?: Prisma.XOR<Prisma.PlanScalarRelationFilter, Prisma.PlanWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type UserAccessOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  planId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  stripeSubscriptionId?: Prisma.SortOrderInput | Prisma.SortOrder
  stripePriceId?: Prisma.SortOrderInput | Prisma.SortOrder
  stripeCustomerId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  cancelAtPeriodEnd?: Prisma.SortOrder
  plan?: Prisma.PlanOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type UserAccessWhereUniqueInput = Prisma.AtLeast<{
  userId?: string
  stripeSubscriptionId?: string
  AND?: Prisma.UserAccessWhereInput | Prisma.UserAccessWhereInput[]
  OR?: Prisma.UserAccessWhereInput[]
  NOT?: Prisma.UserAccessWhereInput | Prisma.UserAccessWhereInput[]
  planId?: Prisma.EnumPaidAccessLevelFilter<"UserAccess"> | $Enums.PaidAccessLevel
  expiresAt?: Prisma.DateTimeFilter<"UserAccess"> | Date | string
  stripePriceId?: Prisma.StringNullableFilter<"UserAccess"> | string | null
  stripeCustomerId?: Prisma.StringNullableFilter<"UserAccess"> | string | null
  createdAt?: Prisma.DateTimeFilter<"UserAccess"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"UserAccess"> | Date | string | null
  cancelAtPeriodEnd?: Prisma.BoolFilter<"UserAccess"> | boolean
  plan?: Prisma.XOR<Prisma.PlanScalarRelationFilter, Prisma.PlanWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "userId" | "stripeSubscriptionId">

export type UserAccessOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  planId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  stripeSubscriptionId?: Prisma.SortOrderInput | Prisma.SortOrder
  stripePriceId?: Prisma.SortOrderInput | Prisma.SortOrder
  stripeCustomerId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  cancelAtPeriodEnd?: Prisma.SortOrder
  _count?: Prisma.UserAccessCountOrderByAggregateInput
  _max?: Prisma.UserAccessMaxOrderByAggregateInput
  _min?: Prisma.UserAccessMinOrderByAggregateInput
}

export type UserAccessScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserAccessScalarWhereWithAggregatesInput | Prisma.UserAccessScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserAccessScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserAccessScalarWhereWithAggregatesInput | Prisma.UserAccessScalarWhereWithAggregatesInput[]
  userId?: Prisma.StringWithAggregatesFilter<"UserAccess"> | string
  planId?: Prisma.EnumPaidAccessLevelWithAggregatesFilter<"UserAccess"> | $Enums.PaidAccessLevel
  expiresAt?: Prisma.DateTimeWithAggregatesFilter<"UserAccess"> | Date | string
  stripeSubscriptionId?: Prisma.StringNullableWithAggregatesFilter<"UserAccess"> | string | null
  stripePriceId?: Prisma.StringNullableWithAggregatesFilter<"UserAccess"> | string | null
  stripeCustomerId?: Prisma.StringNullableWithAggregatesFilter<"UserAccess"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserAccess"> | Date | string
  updatedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"UserAccess"> | Date | string | null
  cancelAtPeriodEnd?: Prisma.BoolWithAggregatesFilter<"UserAccess"> | boolean
}

export type UserAccessCreateInput = {
  expiresAt: Date | string
  stripeSubscriptionId?: string | null
  stripePriceId?: string | null
  stripeCustomerId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  cancelAtPeriodEnd?: boolean
  plan: Prisma.PlanCreateNestedOneWithoutUserAccessInput
  user: Prisma.UserCreateNestedOneWithoutUserAccessInput
}

export type UserAccessUncheckedCreateInput = {
  userId: string
  planId: $Enums.PaidAccessLevel
  expiresAt: Date | string
  stripeSubscriptionId?: string | null
  stripePriceId?: string | null
  stripeCustomerId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  cancelAtPeriodEnd?: boolean
}

export type UserAccessUpdateInput = {
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  stripeSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripePriceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripeCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelAtPeriodEnd?: Prisma.BoolFieldUpdateOperationsInput | boolean
  plan?: Prisma.PlanUpdateOneRequiredWithoutUserAccessNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutUserAccessNestedInput
}

export type UserAccessUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  planId?: Prisma.EnumPaidAccessLevelFieldUpdateOperationsInput | $Enums.PaidAccessLevel
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  stripeSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripePriceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripeCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelAtPeriodEnd?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserAccessCreateManyInput = {
  userId: string
  planId: $Enums.PaidAccessLevel
  expiresAt: Date | string
  stripeSubscriptionId?: string | null
  stripePriceId?: string | null
  stripeCustomerId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  cancelAtPeriodEnd?: boolean
}

export type UserAccessUpdateManyMutationInput = {
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  stripeSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripePriceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripeCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelAtPeriodEnd?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserAccessUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  planId?: Prisma.EnumPaidAccessLevelFieldUpdateOperationsInput | $Enums.PaidAccessLevel
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  stripeSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripePriceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripeCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelAtPeriodEnd?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserAccessNullableScalarRelationFilter = {
  is?: Prisma.UserAccessWhereInput | null
  isNot?: Prisma.UserAccessWhereInput | null
}

export type UserAccessCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  planId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  stripeSubscriptionId?: Prisma.SortOrder
  stripePriceId?: Prisma.SortOrder
  stripeCustomerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  cancelAtPeriodEnd?: Prisma.SortOrder
}

export type UserAccessMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  planId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  stripeSubscriptionId?: Prisma.SortOrder
  stripePriceId?: Prisma.SortOrder
  stripeCustomerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  cancelAtPeriodEnd?: Prisma.SortOrder
}

export type UserAccessMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  planId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  stripeSubscriptionId?: Prisma.SortOrder
  stripePriceId?: Prisma.SortOrder
  stripeCustomerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  cancelAtPeriodEnd?: Prisma.SortOrder
}

export type UserAccessListRelationFilter = {
  every?: Prisma.UserAccessWhereInput
  some?: Prisma.UserAccessWhereInput
  none?: Prisma.UserAccessWhereInput
}

export type UserAccessOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserAccessCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserAccessCreateWithoutUserInput, Prisma.UserAccessUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserAccessCreateOrConnectWithoutUserInput
  connect?: Prisma.UserAccessWhereUniqueInput
}

export type UserAccessUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserAccessCreateWithoutUserInput, Prisma.UserAccessUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserAccessCreateOrConnectWithoutUserInput
  connect?: Prisma.UserAccessWhereUniqueInput
}

export type UserAccessUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserAccessCreateWithoutUserInput, Prisma.UserAccessUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserAccessCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserAccessUpsertWithoutUserInput
  disconnect?: Prisma.UserAccessWhereInput | boolean
  delete?: Prisma.UserAccessWhereInput | boolean
  connect?: Prisma.UserAccessWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserAccessUpdateToOneWithWhereWithoutUserInput, Prisma.UserAccessUpdateWithoutUserInput>, Prisma.UserAccessUncheckedUpdateWithoutUserInput>
}

export type UserAccessUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserAccessCreateWithoutUserInput, Prisma.UserAccessUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserAccessCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserAccessUpsertWithoutUserInput
  disconnect?: Prisma.UserAccessWhereInput | boolean
  delete?: Prisma.UserAccessWhereInput | boolean
  connect?: Prisma.UserAccessWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserAccessUpdateToOneWithWhereWithoutUserInput, Prisma.UserAccessUpdateWithoutUserInput>, Prisma.UserAccessUncheckedUpdateWithoutUserInput>
}

export type EnumPaidAccessLevelFieldUpdateOperationsInput = {
  set?: $Enums.PaidAccessLevel
}

export type UserAccessCreateNestedManyWithoutPlanInput = {
  create?: Prisma.XOR<Prisma.UserAccessCreateWithoutPlanInput, Prisma.UserAccessUncheckedCreateWithoutPlanInput> | Prisma.UserAccessCreateWithoutPlanInput[] | Prisma.UserAccessUncheckedCreateWithoutPlanInput[]
  connectOrCreate?: Prisma.UserAccessCreateOrConnectWithoutPlanInput | Prisma.UserAccessCreateOrConnectWithoutPlanInput[]
  createMany?: Prisma.UserAccessCreateManyPlanInputEnvelope
  connect?: Prisma.UserAccessWhereUniqueInput | Prisma.UserAccessWhereUniqueInput[]
}

export type UserAccessUncheckedCreateNestedManyWithoutPlanInput = {
  create?: Prisma.XOR<Prisma.UserAccessCreateWithoutPlanInput, Prisma.UserAccessUncheckedCreateWithoutPlanInput> | Prisma.UserAccessCreateWithoutPlanInput[] | Prisma.UserAccessUncheckedCreateWithoutPlanInput[]
  connectOrCreate?: Prisma.UserAccessCreateOrConnectWithoutPlanInput | Prisma.UserAccessCreateOrConnectWithoutPlanInput[]
  createMany?: Prisma.UserAccessCreateManyPlanInputEnvelope
  connect?: Prisma.UserAccessWhereUniqueInput | Prisma.UserAccessWhereUniqueInput[]
}

export type UserAccessUpdateManyWithoutPlanNestedInput = {
  create?: Prisma.XOR<Prisma.UserAccessCreateWithoutPlanInput, Prisma.UserAccessUncheckedCreateWithoutPlanInput> | Prisma.UserAccessCreateWithoutPlanInput[] | Prisma.UserAccessUncheckedCreateWithoutPlanInput[]
  connectOrCreate?: Prisma.UserAccessCreateOrConnectWithoutPlanInput | Prisma.UserAccessCreateOrConnectWithoutPlanInput[]
  upsert?: Prisma.UserAccessUpsertWithWhereUniqueWithoutPlanInput | Prisma.UserAccessUpsertWithWhereUniqueWithoutPlanInput[]
  createMany?: Prisma.UserAccessCreateManyPlanInputEnvelope
  set?: Prisma.UserAccessWhereUniqueInput | Prisma.UserAccessWhereUniqueInput[]
  disconnect?: Prisma.UserAccessWhereUniqueInput | Prisma.UserAccessWhereUniqueInput[]
  delete?: Prisma.UserAccessWhereUniqueInput | Prisma.UserAccessWhereUniqueInput[]
  connect?: Prisma.UserAccessWhereUniqueInput | Prisma.UserAccessWhereUniqueInput[]
  update?: Prisma.UserAccessUpdateWithWhereUniqueWithoutPlanInput | Prisma.UserAccessUpdateWithWhereUniqueWithoutPlanInput[]
  updateMany?: Prisma.UserAccessUpdateManyWithWhereWithoutPlanInput | Prisma.UserAccessUpdateManyWithWhereWithoutPlanInput[]
  deleteMany?: Prisma.UserAccessScalarWhereInput | Prisma.UserAccessScalarWhereInput[]
}

export type UserAccessUncheckedUpdateManyWithoutPlanNestedInput = {
  create?: Prisma.XOR<Prisma.UserAccessCreateWithoutPlanInput, Prisma.UserAccessUncheckedCreateWithoutPlanInput> | Prisma.UserAccessCreateWithoutPlanInput[] | Prisma.UserAccessUncheckedCreateWithoutPlanInput[]
  connectOrCreate?: Prisma.UserAccessCreateOrConnectWithoutPlanInput | Prisma.UserAccessCreateOrConnectWithoutPlanInput[]
  upsert?: Prisma.UserAccessUpsertWithWhereUniqueWithoutPlanInput | Prisma.UserAccessUpsertWithWhereUniqueWithoutPlanInput[]
  createMany?: Prisma.UserAccessCreateManyPlanInputEnvelope
  set?: Prisma.UserAccessWhereUniqueInput | Prisma.UserAccessWhereUniqueInput[]
  disconnect?: Prisma.UserAccessWhereUniqueInput | Prisma.UserAccessWhereUniqueInput[]
  delete?: Prisma.UserAccessWhereUniqueInput | Prisma.UserAccessWhereUniqueInput[]
  connect?: Prisma.UserAccessWhereUniqueInput | Prisma.UserAccessWhereUniqueInput[]
  update?: Prisma.UserAccessUpdateWithWhereUniqueWithoutPlanInput | Prisma.UserAccessUpdateWithWhereUniqueWithoutPlanInput[]
  updateMany?: Prisma.UserAccessUpdateManyWithWhereWithoutPlanInput | Prisma.UserAccessUpdateManyWithWhereWithoutPlanInput[]
  deleteMany?: Prisma.UserAccessScalarWhereInput | Prisma.UserAccessScalarWhereInput[]
}

export type UserAccessCreateWithoutUserInput = {
  expiresAt: Date | string
  stripeSubscriptionId?: string | null
  stripePriceId?: string | null
  stripeCustomerId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  cancelAtPeriodEnd?: boolean
  plan: Prisma.PlanCreateNestedOneWithoutUserAccessInput
}

export type UserAccessUncheckedCreateWithoutUserInput = {
  planId: $Enums.PaidAccessLevel
  expiresAt: Date | string
  stripeSubscriptionId?: string | null
  stripePriceId?: string | null
  stripeCustomerId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  cancelAtPeriodEnd?: boolean
}

export type UserAccessCreateOrConnectWithoutUserInput = {
  where: Prisma.UserAccessWhereUniqueInput
  create: Prisma.XOR<Prisma.UserAccessCreateWithoutUserInput, Prisma.UserAccessUncheckedCreateWithoutUserInput>
}

export type UserAccessUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.UserAccessUpdateWithoutUserInput, Prisma.UserAccessUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserAccessCreateWithoutUserInput, Prisma.UserAccessUncheckedCreateWithoutUserInput>
  where?: Prisma.UserAccessWhereInput
}

export type UserAccessUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.UserAccessWhereInput
  data: Prisma.XOR<Prisma.UserAccessUpdateWithoutUserInput, Prisma.UserAccessUncheckedUpdateWithoutUserInput>
}

export type UserAccessUpdateWithoutUserInput = {
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  stripeSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripePriceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripeCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelAtPeriodEnd?: Prisma.BoolFieldUpdateOperationsInput | boolean
  plan?: Prisma.PlanUpdateOneRequiredWithoutUserAccessNestedInput
}

export type UserAccessUncheckedUpdateWithoutUserInput = {
  planId?: Prisma.EnumPaidAccessLevelFieldUpdateOperationsInput | $Enums.PaidAccessLevel
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  stripeSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripePriceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripeCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelAtPeriodEnd?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserAccessCreateWithoutPlanInput = {
  expiresAt: Date | string
  stripeSubscriptionId?: string | null
  stripePriceId?: string | null
  stripeCustomerId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  cancelAtPeriodEnd?: boolean
  user: Prisma.UserCreateNestedOneWithoutUserAccessInput
}

export type UserAccessUncheckedCreateWithoutPlanInput = {
  userId: string
  expiresAt: Date | string
  stripeSubscriptionId?: string | null
  stripePriceId?: string | null
  stripeCustomerId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  cancelAtPeriodEnd?: boolean
}

export type UserAccessCreateOrConnectWithoutPlanInput = {
  where: Prisma.UserAccessWhereUniqueInput
  create: Prisma.XOR<Prisma.UserAccessCreateWithoutPlanInput, Prisma.UserAccessUncheckedCreateWithoutPlanInput>
}

export type UserAccessCreateManyPlanInputEnvelope = {
  data: Prisma.UserAccessCreateManyPlanInput | Prisma.UserAccessCreateManyPlanInput[]
  skipDuplicates?: boolean
}

export type UserAccessUpsertWithWhereUniqueWithoutPlanInput = {
  where: Prisma.UserAccessWhereUniqueInput
  update: Prisma.XOR<Prisma.UserAccessUpdateWithoutPlanInput, Prisma.UserAccessUncheckedUpdateWithoutPlanInput>
  create: Prisma.XOR<Prisma.UserAccessCreateWithoutPlanInput, Prisma.UserAccessUncheckedCreateWithoutPlanInput>
}

export type UserAccessUpdateWithWhereUniqueWithoutPlanInput = {
  where: Prisma.UserAccessWhereUniqueInput
  data: Prisma.XOR<Prisma.UserAccessUpdateWithoutPlanInput, Prisma.UserAccessUncheckedUpdateWithoutPlanInput>
}

export type UserAccessUpdateManyWithWhereWithoutPlanInput = {
  where: Prisma.UserAccessScalarWhereInput
  data: Prisma.XOR<Prisma.UserAccessUpdateManyMutationInput, Prisma.UserAccessUncheckedUpdateManyWithoutPlanInput>
}

export type UserAccessScalarWhereInput = {
  AND?: Prisma.UserAccessScalarWhereInput | Prisma.UserAccessScalarWhereInput[]
  OR?: Prisma.UserAccessScalarWhereInput[]
  NOT?: Prisma.UserAccessScalarWhereInput | Prisma.UserAccessScalarWhereInput[]
  userId?: Prisma.StringFilter<"UserAccess"> | string
  planId?: Prisma.EnumPaidAccessLevelFilter<"UserAccess"> | $Enums.PaidAccessLevel
  expiresAt?: Prisma.DateTimeFilter<"UserAccess"> | Date | string
  stripeSubscriptionId?: Prisma.StringNullableFilter<"UserAccess"> | string | null
  stripePriceId?: Prisma.StringNullableFilter<"UserAccess"> | string | null
  stripeCustomerId?: Prisma.StringNullableFilter<"UserAccess"> | string | null
  createdAt?: Prisma.DateTimeFilter<"UserAccess"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"UserAccess"> | Date | string | null
  cancelAtPeriodEnd?: Prisma.BoolFilter<"UserAccess"> | boolean
}

export type UserAccessCreateManyPlanInput = {
  userId: string
  expiresAt: Date | string
  stripeSubscriptionId?: string | null
  stripePriceId?: string | null
  stripeCustomerId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string | null
  cancelAtPeriodEnd?: boolean
}

export type UserAccessUpdateWithoutPlanInput = {
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  stripeSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripePriceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripeCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelAtPeriodEnd?: Prisma.BoolFieldUpdateOperationsInput | boolean
  user?: Prisma.UserUpdateOneRequiredWithoutUserAccessNestedInput
}

export type UserAccessUncheckedUpdateWithoutPlanInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  stripeSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripePriceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripeCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelAtPeriodEnd?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserAccessUncheckedUpdateManyWithoutPlanInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  stripeSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripePriceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stripeCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelAtPeriodEnd?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type UserAccessSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  planId?: boolean
  expiresAt?: boolean
  stripeSubscriptionId?: boolean
  stripePriceId?: boolean
  stripeCustomerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  cancelAtPeriodEnd?: boolean
  plan?: boolean | Prisma.PlanDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userAccess"]>

export type UserAccessSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  planId?: boolean
  expiresAt?: boolean
  stripeSubscriptionId?: boolean
  stripePriceId?: boolean
  stripeCustomerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  cancelAtPeriodEnd?: boolean
  plan?: boolean | Prisma.PlanDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userAccess"]>

export type UserAccessSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  planId?: boolean
  expiresAt?: boolean
  stripeSubscriptionId?: boolean
  stripePriceId?: boolean
  stripeCustomerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  cancelAtPeriodEnd?: boolean
  plan?: boolean | Prisma.PlanDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userAccess"]>

export type UserAccessSelectScalar = {
  userId?: boolean
  planId?: boolean
  expiresAt?: boolean
  stripeSubscriptionId?: boolean
  stripePriceId?: boolean
  stripeCustomerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  cancelAtPeriodEnd?: boolean
}

export type UserAccessOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "planId" | "expiresAt" | "stripeSubscriptionId" | "stripePriceId" | "stripeCustomerId" | "createdAt" | "updatedAt" | "cancelAtPeriodEnd", ExtArgs["result"]["userAccess"]>
export type UserAccessInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  plan?: boolean | Prisma.PlanDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserAccessIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  plan?: boolean | Prisma.PlanDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserAccessIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  plan?: boolean | Prisma.PlanDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UserAccessPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserAccess"
  objects: {
    plan: Prisma.$PlanPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    userId: string
    planId: $Enums.PaidAccessLevel
    expiresAt: Date
    stripeSubscriptionId: string | null
    stripePriceId: string | null
    stripeCustomerId: string | null
    createdAt: Date
    updatedAt: Date | null
    cancelAtPeriodEnd: boolean
  }, ExtArgs["result"]["userAccess"]>
  composites: {}
}

export type UserAccessGetPayload<S extends boolean | null | undefined | UserAccessDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserAccessPayload, S>

export type UserAccessCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserAccessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserAccessCountAggregateInputType | true
  }

export interface UserAccessDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAccess'], meta: { name: 'UserAccess' } }
  /**
   * Find zero or one UserAccess that matches the filter.
   * @param {UserAccessFindUniqueArgs} args - Arguments to find a UserAccess
   * @example
   * // Get one UserAccess
   * const userAccess = await prisma.userAccess.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserAccessFindUniqueArgs>(args: Prisma.SelectSubset<T, UserAccessFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserAccessClient<runtime.Types.Result.GetResult<Prisma.$UserAccessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserAccess that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserAccessFindUniqueOrThrowArgs} args - Arguments to find a UserAccess
   * @example
   * // Get one UserAccess
   * const userAccess = await prisma.userAccess.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserAccessFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserAccessClient<runtime.Types.Result.GetResult<Prisma.$UserAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserAccess that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAccessFindFirstArgs} args - Arguments to find a UserAccess
   * @example
   * // Get one UserAccess
   * const userAccess = await prisma.userAccess.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserAccessFindFirstArgs>(args?: Prisma.SelectSubset<T, UserAccessFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserAccessClient<runtime.Types.Result.GetResult<Prisma.$UserAccessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserAccess that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAccessFindFirstOrThrowArgs} args - Arguments to find a UserAccess
   * @example
   * // Get one UserAccess
   * const userAccess = await prisma.userAccess.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserAccessFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserAccessClient<runtime.Types.Result.GetResult<Prisma.$UserAccessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserAccesses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAccessFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserAccesses
   * const userAccesses = await prisma.userAccess.findMany()
   * 
   * // Get first 10 UserAccesses
   * const userAccesses = await prisma.userAccess.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const userAccessWithUserIdOnly = await prisma.userAccess.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends UserAccessFindManyArgs>(args?: Prisma.SelectSubset<T, UserAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserAccess.
   * @param {UserAccessCreateArgs} args - Arguments to create a UserAccess.
   * @example
   * // Create one UserAccess
   * const UserAccess = await prisma.userAccess.create({
   *   data: {
   *     // ... data to create a UserAccess
   *   }
   * })
   * 
   */
  create<T extends UserAccessCreateArgs>(args: Prisma.SelectSubset<T, UserAccessCreateArgs<ExtArgs>>): Prisma.Prisma__UserAccessClient<runtime.Types.Result.GetResult<Prisma.$UserAccessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserAccesses.
   * @param {UserAccessCreateManyArgs} args - Arguments to create many UserAccesses.
   * @example
   * // Create many UserAccesses
   * const userAccess = await prisma.userAccess.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserAccessCreateManyArgs>(args?: Prisma.SelectSubset<T, UserAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserAccesses and returns the data saved in the database.
   * @param {UserAccessCreateManyAndReturnArgs} args - Arguments to create many UserAccesses.
   * @example
   * // Create many UserAccesses
   * const userAccess = await prisma.userAccess.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserAccesses and only return the `userId`
   * const userAccessWithUserIdOnly = await prisma.userAccess.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserAccessCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserAccessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserAccess.
   * @param {UserAccessDeleteArgs} args - Arguments to delete one UserAccess.
   * @example
   * // Delete one UserAccess
   * const UserAccess = await prisma.userAccess.delete({
   *   where: {
   *     // ... filter to delete one UserAccess
   *   }
   * })
   * 
   */
  delete<T extends UserAccessDeleteArgs>(args: Prisma.SelectSubset<T, UserAccessDeleteArgs<ExtArgs>>): Prisma.Prisma__UserAccessClient<runtime.Types.Result.GetResult<Prisma.$UserAccessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserAccess.
   * @param {UserAccessUpdateArgs} args - Arguments to update one UserAccess.
   * @example
   * // Update one UserAccess
   * const userAccess = await prisma.userAccess.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserAccessUpdateArgs>(args: Prisma.SelectSubset<T, UserAccessUpdateArgs<ExtArgs>>): Prisma.Prisma__UserAccessClient<runtime.Types.Result.GetResult<Prisma.$UserAccessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserAccesses.
   * @param {UserAccessDeleteManyArgs} args - Arguments to filter UserAccesses to delete.
   * @example
   * // Delete a few UserAccesses
   * const { count } = await prisma.userAccess.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserAccessDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserAccesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAccessUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserAccesses
   * const userAccess = await prisma.userAccess.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserAccessUpdateManyArgs>(args: Prisma.SelectSubset<T, UserAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserAccesses and returns the data updated in the database.
   * @param {UserAccessUpdateManyAndReturnArgs} args - Arguments to update many UserAccesses.
   * @example
   * // Update many UserAccesses
   * const userAccess = await prisma.userAccess.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserAccesses and only return the `userId`
   * const userAccessWithUserIdOnly = await prisma.userAccess.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserAccessUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserAccessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserAccessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserAccess.
   * @param {UserAccessUpsertArgs} args - Arguments to update or create a UserAccess.
   * @example
   * // Update or create a UserAccess
   * const userAccess = await prisma.userAccess.upsert({
   *   create: {
   *     // ... data to create a UserAccess
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserAccess we want to update
   *   }
   * })
   */
  upsert<T extends UserAccessUpsertArgs>(args: Prisma.SelectSubset<T, UserAccessUpsertArgs<ExtArgs>>): Prisma.Prisma__UserAccessClient<runtime.Types.Result.GetResult<Prisma.$UserAccessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserAccesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAccessCountArgs} args - Arguments to filter UserAccesses to count.
   * @example
   * // Count the number of UserAccesses
   * const count = await prisma.userAccess.count({
   *   where: {
   *     // ... the filter for the UserAccesses we want to count
   *   }
   * })
  **/
  count<T extends UserAccessCountArgs>(
    args?: Prisma.Subset<T, UserAccessCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserAccessCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserAccess.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserAccessAggregateArgs>(args: Prisma.Subset<T, UserAccessAggregateArgs>): Prisma.PrismaPromise<GetUserAccessAggregateType<T>>

  /**
   * Group by UserAccess.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAccessGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserAccessGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserAccessGroupByArgs['orderBy'] }
      : { orderBy?: UserAccessGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserAccess model
 */
readonly fields: UserAccessFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserAccess.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserAccessClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  plan<T extends Prisma.PlanDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlanDefaultArgs<ExtArgs>>): Prisma.Prisma__PlanClient<runtime.Types.Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserAccess model
 */
export interface UserAccessFieldRefs {
  readonly userId: Prisma.FieldRef<"UserAccess", 'String'>
  readonly planId: Prisma.FieldRef<"UserAccess", 'PaidAccessLevel'>
  readonly expiresAt: Prisma.FieldRef<"UserAccess", 'DateTime'>
  readonly stripeSubscriptionId: Prisma.FieldRef<"UserAccess", 'String'>
  readonly stripePriceId: Prisma.FieldRef<"UserAccess", 'String'>
  readonly stripeCustomerId: Prisma.FieldRef<"UserAccess", 'String'>
  readonly createdAt: Prisma.FieldRef<"UserAccess", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserAccess", 'DateTime'>
  readonly cancelAtPeriodEnd: Prisma.FieldRef<"UserAccess", 'Boolean'>
}
    

// Custom InputTypes
/**
 * UserAccess findUnique
 */
export type UserAccessFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAccess
   */
  select?: Prisma.UserAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAccess
   */
  omit?: Prisma.UserAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAccessInclude<ExtArgs> | null
  /**
   * Filter, which UserAccess to fetch.
   */
  where: Prisma.UserAccessWhereUniqueInput
}

/**
 * UserAccess findUniqueOrThrow
 */
export type UserAccessFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAccess
   */
  select?: Prisma.UserAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAccess
   */
  omit?: Prisma.UserAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAccessInclude<ExtArgs> | null
  /**
   * Filter, which UserAccess to fetch.
   */
  where: Prisma.UserAccessWhereUniqueInput
}

/**
 * UserAccess findFirst
 */
export type UserAccessFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAccess
   */
  select?: Prisma.UserAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAccess
   */
  omit?: Prisma.UserAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAccessInclude<ExtArgs> | null
  /**
   * Filter, which UserAccess to fetch.
   */
  where?: Prisma.UserAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserAccesses to fetch.
   */
  orderBy?: Prisma.UserAccessOrderByWithRelationInput | Prisma.UserAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserAccesses.
   */
  cursor?: Prisma.UserAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserAccesses.
   */
  distinct?: Prisma.UserAccessScalarFieldEnum | Prisma.UserAccessScalarFieldEnum[]
}

/**
 * UserAccess findFirstOrThrow
 */
export type UserAccessFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAccess
   */
  select?: Prisma.UserAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAccess
   */
  omit?: Prisma.UserAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAccessInclude<ExtArgs> | null
  /**
   * Filter, which UserAccess to fetch.
   */
  where?: Prisma.UserAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserAccesses to fetch.
   */
  orderBy?: Prisma.UserAccessOrderByWithRelationInput | Prisma.UserAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserAccesses.
   */
  cursor?: Prisma.UserAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserAccesses.
   */
  distinct?: Prisma.UserAccessScalarFieldEnum | Prisma.UserAccessScalarFieldEnum[]
}

/**
 * UserAccess findMany
 */
export type UserAccessFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAccess
   */
  select?: Prisma.UserAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAccess
   */
  omit?: Prisma.UserAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAccessInclude<ExtArgs> | null
  /**
   * Filter, which UserAccesses to fetch.
   */
  where?: Prisma.UserAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserAccesses to fetch.
   */
  orderBy?: Prisma.UserAccessOrderByWithRelationInput | Prisma.UserAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserAccesses.
   */
  cursor?: Prisma.UserAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserAccesses.
   */
  skip?: number
  distinct?: Prisma.UserAccessScalarFieldEnum | Prisma.UserAccessScalarFieldEnum[]
}

/**
 * UserAccess create
 */
export type UserAccessCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAccess
   */
  select?: Prisma.UserAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAccess
   */
  omit?: Prisma.UserAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAccessInclude<ExtArgs> | null
  /**
   * The data needed to create a UserAccess.
   */
  data: Prisma.XOR<Prisma.UserAccessCreateInput, Prisma.UserAccessUncheckedCreateInput>
}

/**
 * UserAccess createMany
 */
export type UserAccessCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserAccesses.
   */
  data: Prisma.UserAccessCreateManyInput | Prisma.UserAccessCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserAccess createManyAndReturn
 */
export type UserAccessCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAccess
   */
  select?: Prisma.UserAccessSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserAccess
   */
  omit?: Prisma.UserAccessOmit<ExtArgs> | null
  /**
   * The data used to create many UserAccesses.
   */
  data: Prisma.UserAccessCreateManyInput | Prisma.UserAccessCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAccessIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserAccess update
 */
export type UserAccessUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAccess
   */
  select?: Prisma.UserAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAccess
   */
  omit?: Prisma.UserAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAccessInclude<ExtArgs> | null
  /**
   * The data needed to update a UserAccess.
   */
  data: Prisma.XOR<Prisma.UserAccessUpdateInput, Prisma.UserAccessUncheckedUpdateInput>
  /**
   * Choose, which UserAccess to update.
   */
  where: Prisma.UserAccessWhereUniqueInput
}

/**
 * UserAccess updateMany
 */
export type UserAccessUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserAccesses.
   */
  data: Prisma.XOR<Prisma.UserAccessUpdateManyMutationInput, Prisma.UserAccessUncheckedUpdateManyInput>
  /**
   * Filter which UserAccesses to update
   */
  where?: Prisma.UserAccessWhereInput
  /**
   * Limit how many UserAccesses to update.
   */
  limit?: number
}

/**
 * UserAccess updateManyAndReturn
 */
export type UserAccessUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAccess
   */
  select?: Prisma.UserAccessSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserAccess
   */
  omit?: Prisma.UserAccessOmit<ExtArgs> | null
  /**
   * The data used to update UserAccesses.
   */
  data: Prisma.XOR<Prisma.UserAccessUpdateManyMutationInput, Prisma.UserAccessUncheckedUpdateManyInput>
  /**
   * Filter which UserAccesses to update
   */
  where?: Prisma.UserAccessWhereInput
  /**
   * Limit how many UserAccesses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAccessIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserAccess upsert
 */
export type UserAccessUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAccess
   */
  select?: Prisma.UserAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAccess
   */
  omit?: Prisma.UserAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAccessInclude<ExtArgs> | null
  /**
   * The filter to search for the UserAccess to update in case it exists.
   */
  where: Prisma.UserAccessWhereUniqueInput
  /**
   * In case the UserAccess found by the `where` argument doesn't exist, create a new UserAccess with this data.
   */
  create: Prisma.XOR<Prisma.UserAccessCreateInput, Prisma.UserAccessUncheckedCreateInput>
  /**
   * In case the UserAccess was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserAccessUpdateInput, Prisma.UserAccessUncheckedUpdateInput>
}

/**
 * UserAccess delete
 */
export type UserAccessDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAccess
   */
  select?: Prisma.UserAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAccess
   */
  omit?: Prisma.UserAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAccessInclude<ExtArgs> | null
  /**
   * Filter which UserAccess to delete.
   */
  where: Prisma.UserAccessWhereUniqueInput
}

/**
 * UserAccess deleteMany
 */
export type UserAccessDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserAccesses to delete
   */
  where?: Prisma.UserAccessWhereInput
  /**
   * Limit how many UserAccesses to delete.
   */
  limit?: number
}

/**
 * UserAccess without action
 */
export type UserAccessDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAccess
   */
  select?: Prisma.UserAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAccess
   */
  omit?: Prisma.UserAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAccessInclude<ExtArgs> | null
}
