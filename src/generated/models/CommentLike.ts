
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `CommentLike` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model CommentLike
 * 
 */
export type CommentLikeModel = runtime.Types.Result.DefaultSelection<Prisma.$CommentLikePayload>

export type AggregateCommentLike = {
  _count: CommentLikeCountAggregateOutputType | null
  _avg: CommentLikeAvgAggregateOutputType | null
  _sum: CommentLikeSumAggregateOutputType | null
  _min: CommentLikeMinAggregateOutputType | null
  _max: CommentLikeMaxAggregateOutputType | null
}

export type CommentLikeAvgAggregateOutputType = {
  commentId: number | null
}

export type CommentLikeSumAggregateOutputType = {
  commentId: number | null
}

export type CommentLikeMinAggregateOutputType = {
  userId: string | null
  commentId: number | null
  createdAt: Date | null
}

export type CommentLikeMaxAggregateOutputType = {
  userId: string | null
  commentId: number | null
  createdAt: Date | null
}

export type CommentLikeCountAggregateOutputType = {
  userId: number
  commentId: number
  createdAt: number
  _all: number
}


export type CommentLikeAvgAggregateInputType = {
  commentId?: true
}

export type CommentLikeSumAggregateInputType = {
  commentId?: true
}

export type CommentLikeMinAggregateInputType = {
  userId?: true
  commentId?: true
  createdAt?: true
}

export type CommentLikeMaxAggregateInputType = {
  userId?: true
  commentId?: true
  createdAt?: true
}

export type CommentLikeCountAggregateInputType = {
  userId?: true
  commentId?: true
  createdAt?: true
  _all?: true
}

export type CommentLikeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CommentLike to aggregate.
   */
  where?: Prisma.CommentLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CommentLikes to fetch.
   */
  orderBy?: Prisma.CommentLikeOrderByWithRelationInput | Prisma.CommentLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CommentLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CommentLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CommentLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CommentLikes
  **/
  _count?: true | CommentLikeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CommentLikeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CommentLikeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CommentLikeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CommentLikeMaxAggregateInputType
}

export type GetCommentLikeAggregateType<T extends CommentLikeAggregateArgs> = {
      [P in keyof T & keyof AggregateCommentLike]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCommentLike[P]>
    : Prisma.GetScalarType<T[P], AggregateCommentLike[P]>
}




export type CommentLikeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CommentLikeWhereInput
  orderBy?: Prisma.CommentLikeOrderByWithAggregationInput | Prisma.CommentLikeOrderByWithAggregationInput[]
  by: Prisma.CommentLikeScalarFieldEnum[] | Prisma.CommentLikeScalarFieldEnum
  having?: Prisma.CommentLikeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CommentLikeCountAggregateInputType | true
  _avg?: CommentLikeAvgAggregateInputType
  _sum?: CommentLikeSumAggregateInputType
  _min?: CommentLikeMinAggregateInputType
  _max?: CommentLikeMaxAggregateInputType
}

export type CommentLikeGroupByOutputType = {
  userId: string
  commentId: number
  createdAt: Date
  _count: CommentLikeCountAggregateOutputType | null
  _avg: CommentLikeAvgAggregateOutputType | null
  _sum: CommentLikeSumAggregateOutputType | null
  _min: CommentLikeMinAggregateOutputType | null
  _max: CommentLikeMaxAggregateOutputType | null
}

type GetCommentLikeGroupByPayload<T extends CommentLikeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CommentLikeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CommentLikeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CommentLikeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CommentLikeGroupByOutputType[P]>
      }
    >
  > 



export type CommentLikeWhereInput = {
  AND?: Prisma.CommentLikeWhereInput | Prisma.CommentLikeWhereInput[]
  OR?: Prisma.CommentLikeWhereInput[]
  NOT?: Prisma.CommentLikeWhereInput | Prisma.CommentLikeWhereInput[]
  userId?: Prisma.StringFilter<"CommentLike"> | string
  commentId?: Prisma.IntFilter<"CommentLike"> | number
  createdAt?: Prisma.DateTimeFilter<"CommentLike"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  comment?: Prisma.XOR<Prisma.CommentScalarRelationFilter, Prisma.CommentWhereInput>
}

export type CommentLikeOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  commentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  comment?: Prisma.CommentOrderByWithRelationInput
}

export type CommentLikeWhereUniqueInput = Prisma.AtLeast<{
  userId_commentId?: Prisma.CommentLikeUserIdCommentIdCompoundUniqueInput
  AND?: Prisma.CommentLikeWhereInput | Prisma.CommentLikeWhereInput[]
  OR?: Prisma.CommentLikeWhereInput[]
  NOT?: Prisma.CommentLikeWhereInput | Prisma.CommentLikeWhereInput[]
  userId?: Prisma.StringFilter<"CommentLike"> | string
  commentId?: Prisma.IntFilter<"CommentLike"> | number
  createdAt?: Prisma.DateTimeFilter<"CommentLike"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  comment?: Prisma.XOR<Prisma.CommentScalarRelationFilter, Prisma.CommentWhereInput>
}, "userId_commentId">

export type CommentLikeOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  commentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.CommentLikeCountOrderByAggregateInput
  _avg?: Prisma.CommentLikeAvgOrderByAggregateInput
  _max?: Prisma.CommentLikeMaxOrderByAggregateInput
  _min?: Prisma.CommentLikeMinOrderByAggregateInput
  _sum?: Prisma.CommentLikeSumOrderByAggregateInput
}

export type CommentLikeScalarWhereWithAggregatesInput = {
  AND?: Prisma.CommentLikeScalarWhereWithAggregatesInput | Prisma.CommentLikeScalarWhereWithAggregatesInput[]
  OR?: Prisma.CommentLikeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CommentLikeScalarWhereWithAggregatesInput | Prisma.CommentLikeScalarWhereWithAggregatesInput[]
  userId?: Prisma.StringWithAggregatesFilter<"CommentLike"> | string
  commentId?: Prisma.IntWithAggregatesFilter<"CommentLike"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CommentLike"> | Date | string
}

export type CommentLikeCreateInput = {
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCommentLikeInput
  comment: Prisma.CommentCreateNestedOneWithoutCommentLikeInput
}

export type CommentLikeUncheckedCreateInput = {
  userId: string
  commentId: number
  createdAt?: Date | string
}

export type CommentLikeUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCommentLikeNestedInput
  comment?: Prisma.CommentUpdateOneRequiredWithoutCommentLikeNestedInput
}

export type CommentLikeUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  commentId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommentLikeCreateManyInput = {
  userId: string
  commentId: number
  createdAt?: Date | string
}

export type CommentLikeUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommentLikeUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  commentId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommentLikeListRelationFilter = {
  every?: Prisma.CommentLikeWhereInput
  some?: Prisma.CommentLikeWhereInput
  none?: Prisma.CommentLikeWhereInput
}

export type CommentLikeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CommentLikeUserIdCommentIdCompoundUniqueInput = {
  userId: string
  commentId: number
}

export type CommentLikeCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  commentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CommentLikeAvgOrderByAggregateInput = {
  commentId?: Prisma.SortOrder
}

export type CommentLikeMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  commentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CommentLikeMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  commentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CommentLikeSumOrderByAggregateInput = {
  commentId?: Prisma.SortOrder
}

export type CommentLikeCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CommentLikeCreateWithoutUserInput, Prisma.CommentLikeUncheckedCreateWithoutUserInput> | Prisma.CommentLikeCreateWithoutUserInput[] | Prisma.CommentLikeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CommentLikeCreateOrConnectWithoutUserInput | Prisma.CommentLikeCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CommentLikeCreateManyUserInputEnvelope
  connect?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
}

export type CommentLikeUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CommentLikeCreateWithoutUserInput, Prisma.CommentLikeUncheckedCreateWithoutUserInput> | Prisma.CommentLikeCreateWithoutUserInput[] | Prisma.CommentLikeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CommentLikeCreateOrConnectWithoutUserInput | Prisma.CommentLikeCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CommentLikeCreateManyUserInputEnvelope
  connect?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
}

export type CommentLikeUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CommentLikeCreateWithoutUserInput, Prisma.CommentLikeUncheckedCreateWithoutUserInput> | Prisma.CommentLikeCreateWithoutUserInput[] | Prisma.CommentLikeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CommentLikeCreateOrConnectWithoutUserInput | Prisma.CommentLikeCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CommentLikeUpsertWithWhereUniqueWithoutUserInput | Prisma.CommentLikeUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CommentLikeCreateManyUserInputEnvelope
  set?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  disconnect?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  delete?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  connect?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  update?: Prisma.CommentLikeUpdateWithWhereUniqueWithoutUserInput | Prisma.CommentLikeUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CommentLikeUpdateManyWithWhereWithoutUserInput | Prisma.CommentLikeUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CommentLikeScalarWhereInput | Prisma.CommentLikeScalarWhereInput[]
}

export type CommentLikeUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CommentLikeCreateWithoutUserInput, Prisma.CommentLikeUncheckedCreateWithoutUserInput> | Prisma.CommentLikeCreateWithoutUserInput[] | Prisma.CommentLikeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CommentLikeCreateOrConnectWithoutUserInput | Prisma.CommentLikeCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CommentLikeUpsertWithWhereUniqueWithoutUserInput | Prisma.CommentLikeUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CommentLikeCreateManyUserInputEnvelope
  set?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  disconnect?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  delete?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  connect?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  update?: Prisma.CommentLikeUpdateWithWhereUniqueWithoutUserInput | Prisma.CommentLikeUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CommentLikeUpdateManyWithWhereWithoutUserInput | Prisma.CommentLikeUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CommentLikeScalarWhereInput | Prisma.CommentLikeScalarWhereInput[]
}

export type CommentLikeCreateNestedManyWithoutCommentInput = {
  create?: Prisma.XOR<Prisma.CommentLikeCreateWithoutCommentInput, Prisma.CommentLikeUncheckedCreateWithoutCommentInput> | Prisma.CommentLikeCreateWithoutCommentInput[] | Prisma.CommentLikeUncheckedCreateWithoutCommentInput[]
  connectOrCreate?: Prisma.CommentLikeCreateOrConnectWithoutCommentInput | Prisma.CommentLikeCreateOrConnectWithoutCommentInput[]
  createMany?: Prisma.CommentLikeCreateManyCommentInputEnvelope
  connect?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
}

export type CommentLikeUncheckedCreateNestedManyWithoutCommentInput = {
  create?: Prisma.XOR<Prisma.CommentLikeCreateWithoutCommentInput, Prisma.CommentLikeUncheckedCreateWithoutCommentInput> | Prisma.CommentLikeCreateWithoutCommentInput[] | Prisma.CommentLikeUncheckedCreateWithoutCommentInput[]
  connectOrCreate?: Prisma.CommentLikeCreateOrConnectWithoutCommentInput | Prisma.CommentLikeCreateOrConnectWithoutCommentInput[]
  createMany?: Prisma.CommentLikeCreateManyCommentInputEnvelope
  connect?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
}

export type CommentLikeUpdateManyWithoutCommentNestedInput = {
  create?: Prisma.XOR<Prisma.CommentLikeCreateWithoutCommentInput, Prisma.CommentLikeUncheckedCreateWithoutCommentInput> | Prisma.CommentLikeCreateWithoutCommentInput[] | Prisma.CommentLikeUncheckedCreateWithoutCommentInput[]
  connectOrCreate?: Prisma.CommentLikeCreateOrConnectWithoutCommentInput | Prisma.CommentLikeCreateOrConnectWithoutCommentInput[]
  upsert?: Prisma.CommentLikeUpsertWithWhereUniqueWithoutCommentInput | Prisma.CommentLikeUpsertWithWhereUniqueWithoutCommentInput[]
  createMany?: Prisma.CommentLikeCreateManyCommentInputEnvelope
  set?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  disconnect?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  delete?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  connect?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  update?: Prisma.CommentLikeUpdateWithWhereUniqueWithoutCommentInput | Prisma.CommentLikeUpdateWithWhereUniqueWithoutCommentInput[]
  updateMany?: Prisma.CommentLikeUpdateManyWithWhereWithoutCommentInput | Prisma.CommentLikeUpdateManyWithWhereWithoutCommentInput[]
  deleteMany?: Prisma.CommentLikeScalarWhereInput | Prisma.CommentLikeScalarWhereInput[]
}

export type CommentLikeUncheckedUpdateManyWithoutCommentNestedInput = {
  create?: Prisma.XOR<Prisma.CommentLikeCreateWithoutCommentInput, Prisma.CommentLikeUncheckedCreateWithoutCommentInput> | Prisma.CommentLikeCreateWithoutCommentInput[] | Prisma.CommentLikeUncheckedCreateWithoutCommentInput[]
  connectOrCreate?: Prisma.CommentLikeCreateOrConnectWithoutCommentInput | Prisma.CommentLikeCreateOrConnectWithoutCommentInput[]
  upsert?: Prisma.CommentLikeUpsertWithWhereUniqueWithoutCommentInput | Prisma.CommentLikeUpsertWithWhereUniqueWithoutCommentInput[]
  createMany?: Prisma.CommentLikeCreateManyCommentInputEnvelope
  set?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  disconnect?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  delete?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  connect?: Prisma.CommentLikeWhereUniqueInput | Prisma.CommentLikeWhereUniqueInput[]
  update?: Prisma.CommentLikeUpdateWithWhereUniqueWithoutCommentInput | Prisma.CommentLikeUpdateWithWhereUniqueWithoutCommentInput[]
  updateMany?: Prisma.CommentLikeUpdateManyWithWhereWithoutCommentInput | Prisma.CommentLikeUpdateManyWithWhereWithoutCommentInput[]
  deleteMany?: Prisma.CommentLikeScalarWhereInput | Prisma.CommentLikeScalarWhereInput[]
}

export type CommentLikeCreateWithoutUserInput = {
  createdAt?: Date | string
  comment: Prisma.CommentCreateNestedOneWithoutCommentLikeInput
}

export type CommentLikeUncheckedCreateWithoutUserInput = {
  commentId: number
  createdAt?: Date | string
}

export type CommentLikeCreateOrConnectWithoutUserInput = {
  where: Prisma.CommentLikeWhereUniqueInput
  create: Prisma.XOR<Prisma.CommentLikeCreateWithoutUserInput, Prisma.CommentLikeUncheckedCreateWithoutUserInput>
}

export type CommentLikeCreateManyUserInputEnvelope = {
  data: Prisma.CommentLikeCreateManyUserInput | Prisma.CommentLikeCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type CommentLikeUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.CommentLikeWhereUniqueInput
  update: Prisma.XOR<Prisma.CommentLikeUpdateWithoutUserInput, Prisma.CommentLikeUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.CommentLikeCreateWithoutUserInput, Prisma.CommentLikeUncheckedCreateWithoutUserInput>
}

export type CommentLikeUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.CommentLikeWhereUniqueInput
  data: Prisma.XOR<Prisma.CommentLikeUpdateWithoutUserInput, Prisma.CommentLikeUncheckedUpdateWithoutUserInput>
}

export type CommentLikeUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.CommentLikeScalarWhereInput
  data: Prisma.XOR<Prisma.CommentLikeUpdateManyMutationInput, Prisma.CommentLikeUncheckedUpdateManyWithoutUserInput>
}

export type CommentLikeScalarWhereInput = {
  AND?: Prisma.CommentLikeScalarWhereInput | Prisma.CommentLikeScalarWhereInput[]
  OR?: Prisma.CommentLikeScalarWhereInput[]
  NOT?: Prisma.CommentLikeScalarWhereInput | Prisma.CommentLikeScalarWhereInput[]
  userId?: Prisma.StringFilter<"CommentLike"> | string
  commentId?: Prisma.IntFilter<"CommentLike"> | number
  createdAt?: Prisma.DateTimeFilter<"CommentLike"> | Date | string
}

export type CommentLikeCreateWithoutCommentInput = {
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCommentLikeInput
}

export type CommentLikeUncheckedCreateWithoutCommentInput = {
  userId: string
  createdAt?: Date | string
}

export type CommentLikeCreateOrConnectWithoutCommentInput = {
  where: Prisma.CommentLikeWhereUniqueInput
  create: Prisma.XOR<Prisma.CommentLikeCreateWithoutCommentInput, Prisma.CommentLikeUncheckedCreateWithoutCommentInput>
}

export type CommentLikeCreateManyCommentInputEnvelope = {
  data: Prisma.CommentLikeCreateManyCommentInput | Prisma.CommentLikeCreateManyCommentInput[]
  skipDuplicates?: boolean
}

export type CommentLikeUpsertWithWhereUniqueWithoutCommentInput = {
  where: Prisma.CommentLikeWhereUniqueInput
  update: Prisma.XOR<Prisma.CommentLikeUpdateWithoutCommentInput, Prisma.CommentLikeUncheckedUpdateWithoutCommentInput>
  create: Prisma.XOR<Prisma.CommentLikeCreateWithoutCommentInput, Prisma.CommentLikeUncheckedCreateWithoutCommentInput>
}

export type CommentLikeUpdateWithWhereUniqueWithoutCommentInput = {
  where: Prisma.CommentLikeWhereUniqueInput
  data: Prisma.XOR<Prisma.CommentLikeUpdateWithoutCommentInput, Prisma.CommentLikeUncheckedUpdateWithoutCommentInput>
}

export type CommentLikeUpdateManyWithWhereWithoutCommentInput = {
  where: Prisma.CommentLikeScalarWhereInput
  data: Prisma.XOR<Prisma.CommentLikeUpdateManyMutationInput, Prisma.CommentLikeUncheckedUpdateManyWithoutCommentInput>
}

export type CommentLikeCreateManyUserInput = {
  commentId: number
  createdAt?: Date | string
}

export type CommentLikeUpdateWithoutUserInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.CommentUpdateOneRequiredWithoutCommentLikeNestedInput
}

export type CommentLikeUncheckedUpdateWithoutUserInput = {
  commentId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommentLikeUncheckedUpdateManyWithoutUserInput = {
  commentId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommentLikeCreateManyCommentInput = {
  userId: string
  createdAt?: Date | string
}

export type CommentLikeUpdateWithoutCommentInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCommentLikeNestedInput
}

export type CommentLikeUncheckedUpdateWithoutCommentInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommentLikeUncheckedUpdateManyWithoutCommentInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CommentLikeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  commentId?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  comment?: boolean | Prisma.CommentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["commentLike"]>

export type CommentLikeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  commentId?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  comment?: boolean | Prisma.CommentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["commentLike"]>

export type CommentLikeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  commentId?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  comment?: boolean | Prisma.CommentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["commentLike"]>

export type CommentLikeSelectScalar = {
  userId?: boolean
  commentId?: boolean
  createdAt?: boolean
}

export type CommentLikeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "commentId" | "createdAt", ExtArgs["result"]["commentLike"]>
export type CommentLikeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  comment?: boolean | Prisma.CommentDefaultArgs<ExtArgs>
}
export type CommentLikeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  comment?: boolean | Prisma.CommentDefaultArgs<ExtArgs>
}
export type CommentLikeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  comment?: boolean | Prisma.CommentDefaultArgs<ExtArgs>
}

export type $CommentLikePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CommentLike"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    comment: Prisma.$CommentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    userId: string
    commentId: number
    createdAt: Date
  }, ExtArgs["result"]["commentLike"]>
  composites: {}
}

export type CommentLikeGetPayload<S extends boolean | null | undefined | CommentLikeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CommentLikePayload, S>

export type CommentLikeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CommentLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CommentLikeCountAggregateInputType | true
  }

export interface CommentLikeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommentLike'], meta: { name: 'CommentLike' } }
  /**
   * Find zero or one CommentLike that matches the filter.
   * @param {CommentLikeFindUniqueArgs} args - Arguments to find a CommentLike
   * @example
   * // Get one CommentLike
   * const commentLike = await prisma.commentLike.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CommentLikeFindUniqueArgs>(args: Prisma.SelectSubset<T, CommentLikeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CommentLikeClient<runtime.Types.Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CommentLike that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CommentLikeFindUniqueOrThrowArgs} args - Arguments to find a CommentLike
   * @example
   * // Get one CommentLike
   * const commentLike = await prisma.commentLike.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CommentLikeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CommentLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CommentLikeClient<runtime.Types.Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CommentLike that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentLikeFindFirstArgs} args - Arguments to find a CommentLike
   * @example
   * // Get one CommentLike
   * const commentLike = await prisma.commentLike.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CommentLikeFindFirstArgs>(args?: Prisma.SelectSubset<T, CommentLikeFindFirstArgs<ExtArgs>>): Prisma.Prisma__CommentLikeClient<runtime.Types.Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CommentLike that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentLikeFindFirstOrThrowArgs} args - Arguments to find a CommentLike
   * @example
   * // Get one CommentLike
   * const commentLike = await prisma.commentLike.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CommentLikeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CommentLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CommentLikeClient<runtime.Types.Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CommentLikes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentLikeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CommentLikes
   * const commentLikes = await prisma.commentLike.findMany()
   * 
   * // Get first 10 CommentLikes
   * const commentLikes = await prisma.commentLike.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const commentLikeWithUserIdOnly = await prisma.commentLike.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends CommentLikeFindManyArgs>(args?: Prisma.SelectSubset<T, CommentLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CommentLike.
   * @param {CommentLikeCreateArgs} args - Arguments to create a CommentLike.
   * @example
   * // Create one CommentLike
   * const CommentLike = await prisma.commentLike.create({
   *   data: {
   *     // ... data to create a CommentLike
   *   }
   * })
   * 
   */
  create<T extends CommentLikeCreateArgs>(args: Prisma.SelectSubset<T, CommentLikeCreateArgs<ExtArgs>>): Prisma.Prisma__CommentLikeClient<runtime.Types.Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CommentLikes.
   * @param {CommentLikeCreateManyArgs} args - Arguments to create many CommentLikes.
   * @example
   * // Create many CommentLikes
   * const commentLike = await prisma.commentLike.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CommentLikeCreateManyArgs>(args?: Prisma.SelectSubset<T, CommentLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CommentLikes and returns the data saved in the database.
   * @param {CommentLikeCreateManyAndReturnArgs} args - Arguments to create many CommentLikes.
   * @example
   * // Create many CommentLikes
   * const commentLike = await prisma.commentLike.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CommentLikes and only return the `userId`
   * const commentLikeWithUserIdOnly = await prisma.commentLike.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CommentLikeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CommentLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CommentLike.
   * @param {CommentLikeDeleteArgs} args - Arguments to delete one CommentLike.
   * @example
   * // Delete one CommentLike
   * const CommentLike = await prisma.commentLike.delete({
   *   where: {
   *     // ... filter to delete one CommentLike
   *   }
   * })
   * 
   */
  delete<T extends CommentLikeDeleteArgs>(args: Prisma.SelectSubset<T, CommentLikeDeleteArgs<ExtArgs>>): Prisma.Prisma__CommentLikeClient<runtime.Types.Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CommentLike.
   * @param {CommentLikeUpdateArgs} args - Arguments to update one CommentLike.
   * @example
   * // Update one CommentLike
   * const commentLike = await prisma.commentLike.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CommentLikeUpdateArgs>(args: Prisma.SelectSubset<T, CommentLikeUpdateArgs<ExtArgs>>): Prisma.Prisma__CommentLikeClient<runtime.Types.Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CommentLikes.
   * @param {CommentLikeDeleteManyArgs} args - Arguments to filter CommentLikes to delete.
   * @example
   * // Delete a few CommentLikes
   * const { count } = await prisma.commentLike.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CommentLikeDeleteManyArgs>(args?: Prisma.SelectSubset<T, CommentLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CommentLikes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentLikeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CommentLikes
   * const commentLike = await prisma.commentLike.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CommentLikeUpdateManyArgs>(args: Prisma.SelectSubset<T, CommentLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CommentLikes and returns the data updated in the database.
   * @param {CommentLikeUpdateManyAndReturnArgs} args - Arguments to update many CommentLikes.
   * @example
   * // Update many CommentLikes
   * const commentLike = await prisma.commentLike.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CommentLikes and only return the `userId`
   * const commentLikeWithUserIdOnly = await prisma.commentLike.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CommentLikeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CommentLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CommentLike.
   * @param {CommentLikeUpsertArgs} args - Arguments to update or create a CommentLike.
   * @example
   * // Update or create a CommentLike
   * const commentLike = await prisma.commentLike.upsert({
   *   create: {
   *     // ... data to create a CommentLike
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CommentLike we want to update
   *   }
   * })
   */
  upsert<T extends CommentLikeUpsertArgs>(args: Prisma.SelectSubset<T, CommentLikeUpsertArgs<ExtArgs>>): Prisma.Prisma__CommentLikeClient<runtime.Types.Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CommentLikes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentLikeCountArgs} args - Arguments to filter CommentLikes to count.
   * @example
   * // Count the number of CommentLikes
   * const count = await prisma.commentLike.count({
   *   where: {
   *     // ... the filter for the CommentLikes we want to count
   *   }
   * })
  **/
  count<T extends CommentLikeCountArgs>(
    args?: Prisma.Subset<T, CommentLikeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CommentLikeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CommentLike.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CommentLikeAggregateArgs>(args: Prisma.Subset<T, CommentLikeAggregateArgs>): Prisma.PrismaPromise<GetCommentLikeAggregateType<T>>

  /**
   * Group by CommentLike.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentLikeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CommentLikeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CommentLikeGroupByArgs['orderBy'] }
      : { orderBy?: CommentLikeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CommentLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CommentLike model
 */
readonly fields: CommentLikeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CommentLike.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CommentLikeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  comment<T extends Prisma.CommentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CommentDefaultArgs<ExtArgs>>): Prisma.Prisma__CommentClient<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CommentLike model
 */
export interface CommentLikeFieldRefs {
  readonly userId: Prisma.FieldRef<"CommentLike", 'String'>
  readonly commentId: Prisma.FieldRef<"CommentLike", 'Int'>
  readonly createdAt: Prisma.FieldRef<"CommentLike", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CommentLike findUnique
 */
export type CommentLikeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CommentLike
   */
  select?: Prisma.CommentLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CommentLike
   */
  omit?: Prisma.CommentLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentLikeInclude<ExtArgs> | null
  /**
   * Filter, which CommentLike to fetch.
   */
  where: Prisma.CommentLikeWhereUniqueInput
}

/**
 * CommentLike findUniqueOrThrow
 */
export type CommentLikeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CommentLike
   */
  select?: Prisma.CommentLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CommentLike
   */
  omit?: Prisma.CommentLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentLikeInclude<ExtArgs> | null
  /**
   * Filter, which CommentLike to fetch.
   */
  where: Prisma.CommentLikeWhereUniqueInput
}

/**
 * CommentLike findFirst
 */
export type CommentLikeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CommentLike
   */
  select?: Prisma.CommentLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CommentLike
   */
  omit?: Prisma.CommentLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentLikeInclude<ExtArgs> | null
  /**
   * Filter, which CommentLike to fetch.
   */
  where?: Prisma.CommentLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CommentLikes to fetch.
   */
  orderBy?: Prisma.CommentLikeOrderByWithRelationInput | Prisma.CommentLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CommentLikes.
   */
  cursor?: Prisma.CommentLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CommentLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CommentLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CommentLikes.
   */
  distinct?: Prisma.CommentLikeScalarFieldEnum | Prisma.CommentLikeScalarFieldEnum[]
}

/**
 * CommentLike findFirstOrThrow
 */
export type CommentLikeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CommentLike
   */
  select?: Prisma.CommentLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CommentLike
   */
  omit?: Prisma.CommentLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentLikeInclude<ExtArgs> | null
  /**
   * Filter, which CommentLike to fetch.
   */
  where?: Prisma.CommentLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CommentLikes to fetch.
   */
  orderBy?: Prisma.CommentLikeOrderByWithRelationInput | Prisma.CommentLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CommentLikes.
   */
  cursor?: Prisma.CommentLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CommentLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CommentLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CommentLikes.
   */
  distinct?: Prisma.CommentLikeScalarFieldEnum | Prisma.CommentLikeScalarFieldEnum[]
}

/**
 * CommentLike findMany
 */
export type CommentLikeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CommentLike
   */
  select?: Prisma.CommentLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CommentLike
   */
  omit?: Prisma.CommentLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentLikeInclude<ExtArgs> | null
  /**
   * Filter, which CommentLikes to fetch.
   */
  where?: Prisma.CommentLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CommentLikes to fetch.
   */
  orderBy?: Prisma.CommentLikeOrderByWithRelationInput | Prisma.CommentLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CommentLikes.
   */
  cursor?: Prisma.CommentLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CommentLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CommentLikes.
   */
  skip?: number
  distinct?: Prisma.CommentLikeScalarFieldEnum | Prisma.CommentLikeScalarFieldEnum[]
}

/**
 * CommentLike create
 */
export type CommentLikeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CommentLike
   */
  select?: Prisma.CommentLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CommentLike
   */
  omit?: Prisma.CommentLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentLikeInclude<ExtArgs> | null
  /**
   * The data needed to create a CommentLike.
   */
  data: Prisma.XOR<Prisma.CommentLikeCreateInput, Prisma.CommentLikeUncheckedCreateInput>
}

/**
 * CommentLike createMany
 */
export type CommentLikeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CommentLikes.
   */
  data: Prisma.CommentLikeCreateManyInput | Prisma.CommentLikeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CommentLike createManyAndReturn
 */
export type CommentLikeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CommentLike
   */
  select?: Prisma.CommentLikeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CommentLike
   */
  omit?: Prisma.CommentLikeOmit<ExtArgs> | null
  /**
   * The data used to create many CommentLikes.
   */
  data: Prisma.CommentLikeCreateManyInput | Prisma.CommentLikeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentLikeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CommentLike update
 */
export type CommentLikeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CommentLike
   */
  select?: Prisma.CommentLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CommentLike
   */
  omit?: Prisma.CommentLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentLikeInclude<ExtArgs> | null
  /**
   * The data needed to update a CommentLike.
   */
  data: Prisma.XOR<Prisma.CommentLikeUpdateInput, Prisma.CommentLikeUncheckedUpdateInput>
  /**
   * Choose, which CommentLike to update.
   */
  where: Prisma.CommentLikeWhereUniqueInput
}

/**
 * CommentLike updateMany
 */
export type CommentLikeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CommentLikes.
   */
  data: Prisma.XOR<Prisma.CommentLikeUpdateManyMutationInput, Prisma.CommentLikeUncheckedUpdateManyInput>
  /**
   * Filter which CommentLikes to update
   */
  where?: Prisma.CommentLikeWhereInput
  /**
   * Limit how many CommentLikes to update.
   */
  limit?: number
}

/**
 * CommentLike updateManyAndReturn
 */
export type CommentLikeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CommentLike
   */
  select?: Prisma.CommentLikeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CommentLike
   */
  omit?: Prisma.CommentLikeOmit<ExtArgs> | null
  /**
   * The data used to update CommentLikes.
   */
  data: Prisma.XOR<Prisma.CommentLikeUpdateManyMutationInput, Prisma.CommentLikeUncheckedUpdateManyInput>
  /**
   * Filter which CommentLikes to update
   */
  where?: Prisma.CommentLikeWhereInput
  /**
   * Limit how many CommentLikes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentLikeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CommentLike upsert
 */
export type CommentLikeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CommentLike
   */
  select?: Prisma.CommentLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CommentLike
   */
  omit?: Prisma.CommentLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentLikeInclude<ExtArgs> | null
  /**
   * The filter to search for the CommentLike to update in case it exists.
   */
  where: Prisma.CommentLikeWhereUniqueInput
  /**
   * In case the CommentLike found by the `where` argument doesn't exist, create a new CommentLike with this data.
   */
  create: Prisma.XOR<Prisma.CommentLikeCreateInput, Prisma.CommentLikeUncheckedCreateInput>
  /**
   * In case the CommentLike was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CommentLikeUpdateInput, Prisma.CommentLikeUncheckedUpdateInput>
}

/**
 * CommentLike delete
 */
export type CommentLikeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CommentLike
   */
  select?: Prisma.CommentLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CommentLike
   */
  omit?: Prisma.CommentLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentLikeInclude<ExtArgs> | null
  /**
   * Filter which CommentLike to delete.
   */
  where: Prisma.CommentLikeWhereUniqueInput
}

/**
 * CommentLike deleteMany
 */
export type CommentLikeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CommentLikes to delete
   */
  where?: Prisma.CommentLikeWhereInput
  /**
   * Limit how many CommentLikes to delete.
   */
  limit?: number
}

/**
 * CommentLike without action
 */
export type CommentLikeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CommentLike
   */
  select?: Prisma.CommentLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CommentLike
   */
  omit?: Prisma.CommentLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentLikeInclude<ExtArgs> | null
}
