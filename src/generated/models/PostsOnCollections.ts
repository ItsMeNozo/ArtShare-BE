
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `PostsOnCollections` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model PostsOnCollections
 * 
 */
export type PostsOnCollectionsModel = runtime.Types.Result.DefaultSelection<Prisma.$PostsOnCollectionsPayload>

export type AggregatePostsOnCollections = {
  _count: PostsOnCollectionsCountAggregateOutputType | null
  _avg: PostsOnCollectionsAvgAggregateOutputType | null
  _sum: PostsOnCollectionsSumAggregateOutputType | null
  _min: PostsOnCollectionsMinAggregateOutputType | null
  _max: PostsOnCollectionsMaxAggregateOutputType | null
}

export type PostsOnCollectionsAvgAggregateOutputType = {
  postId: number | null
  collectionId: number | null
}

export type PostsOnCollectionsSumAggregateOutputType = {
  postId: number | null
  collectionId: number | null
}

export type PostsOnCollectionsMinAggregateOutputType = {
  postId: number | null
  collectionId: number | null
  assignedAt: Date | null
}

export type PostsOnCollectionsMaxAggregateOutputType = {
  postId: number | null
  collectionId: number | null
  assignedAt: Date | null
}

export type PostsOnCollectionsCountAggregateOutputType = {
  postId: number
  collectionId: number
  assignedAt: number
  _all: number
}


export type PostsOnCollectionsAvgAggregateInputType = {
  postId?: true
  collectionId?: true
}

export type PostsOnCollectionsSumAggregateInputType = {
  postId?: true
  collectionId?: true
}

export type PostsOnCollectionsMinAggregateInputType = {
  postId?: true
  collectionId?: true
  assignedAt?: true
}

export type PostsOnCollectionsMaxAggregateInputType = {
  postId?: true
  collectionId?: true
  assignedAt?: true
}

export type PostsOnCollectionsCountAggregateInputType = {
  postId?: true
  collectionId?: true
  assignedAt?: true
  _all?: true
}

export type PostsOnCollectionsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PostsOnCollections to aggregate.
   */
  where?: Prisma.PostsOnCollectionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostsOnCollections to fetch.
   */
  orderBy?: Prisma.PostsOnCollectionsOrderByWithRelationInput | Prisma.PostsOnCollectionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PostsOnCollectionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostsOnCollections from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostsOnCollections.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PostsOnCollections
  **/
  _count?: true | PostsOnCollectionsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PostsOnCollectionsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PostsOnCollectionsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PostsOnCollectionsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PostsOnCollectionsMaxAggregateInputType
}

export type GetPostsOnCollectionsAggregateType<T extends PostsOnCollectionsAggregateArgs> = {
      [P in keyof T & keyof AggregatePostsOnCollections]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePostsOnCollections[P]>
    : Prisma.GetScalarType<T[P], AggregatePostsOnCollections[P]>
}




export type PostsOnCollectionsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PostsOnCollectionsWhereInput
  orderBy?: Prisma.PostsOnCollectionsOrderByWithAggregationInput | Prisma.PostsOnCollectionsOrderByWithAggregationInput[]
  by: Prisma.PostsOnCollectionsScalarFieldEnum[] | Prisma.PostsOnCollectionsScalarFieldEnum
  having?: Prisma.PostsOnCollectionsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PostsOnCollectionsCountAggregateInputType | true
  _avg?: PostsOnCollectionsAvgAggregateInputType
  _sum?: PostsOnCollectionsSumAggregateInputType
  _min?: PostsOnCollectionsMinAggregateInputType
  _max?: PostsOnCollectionsMaxAggregateInputType
}

export type PostsOnCollectionsGroupByOutputType = {
  postId: number
  collectionId: number
  assignedAt: Date
  _count: PostsOnCollectionsCountAggregateOutputType | null
  _avg: PostsOnCollectionsAvgAggregateOutputType | null
  _sum: PostsOnCollectionsSumAggregateOutputType | null
  _min: PostsOnCollectionsMinAggregateOutputType | null
  _max: PostsOnCollectionsMaxAggregateOutputType | null
}

type GetPostsOnCollectionsGroupByPayload<T extends PostsOnCollectionsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PostsOnCollectionsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PostsOnCollectionsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PostsOnCollectionsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PostsOnCollectionsGroupByOutputType[P]>
      }
    >
  > 



export type PostsOnCollectionsWhereInput = {
  AND?: Prisma.PostsOnCollectionsWhereInput | Prisma.PostsOnCollectionsWhereInput[]
  OR?: Prisma.PostsOnCollectionsWhereInput[]
  NOT?: Prisma.PostsOnCollectionsWhereInput | Prisma.PostsOnCollectionsWhereInput[]
  postId?: Prisma.IntFilter<"PostsOnCollections"> | number
  collectionId?: Prisma.IntFilter<"PostsOnCollections"> | number
  assignedAt?: Prisma.DateTimeFilter<"PostsOnCollections"> | Date | string
  collection?: Prisma.XOR<Prisma.CollectionScalarRelationFilter, Prisma.CollectionWhereInput>
  post?: Prisma.XOR<Prisma.PostScalarRelationFilter, Prisma.PostWhereInput>
}

export type PostsOnCollectionsOrderByWithRelationInput = {
  postId?: Prisma.SortOrder
  collectionId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
  collection?: Prisma.CollectionOrderByWithRelationInput
  post?: Prisma.PostOrderByWithRelationInput
}

export type PostsOnCollectionsWhereUniqueInput = Prisma.AtLeast<{
  postId_collectionId?: Prisma.PostsOnCollectionsPostIdCollectionIdCompoundUniqueInput
  AND?: Prisma.PostsOnCollectionsWhereInput | Prisma.PostsOnCollectionsWhereInput[]
  OR?: Prisma.PostsOnCollectionsWhereInput[]
  NOT?: Prisma.PostsOnCollectionsWhereInput | Prisma.PostsOnCollectionsWhereInput[]
  postId?: Prisma.IntFilter<"PostsOnCollections"> | number
  collectionId?: Prisma.IntFilter<"PostsOnCollections"> | number
  assignedAt?: Prisma.DateTimeFilter<"PostsOnCollections"> | Date | string
  collection?: Prisma.XOR<Prisma.CollectionScalarRelationFilter, Prisma.CollectionWhereInput>
  post?: Prisma.XOR<Prisma.PostScalarRelationFilter, Prisma.PostWhereInput>
}, "postId_collectionId">

export type PostsOnCollectionsOrderByWithAggregationInput = {
  postId?: Prisma.SortOrder
  collectionId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
  _count?: Prisma.PostsOnCollectionsCountOrderByAggregateInput
  _avg?: Prisma.PostsOnCollectionsAvgOrderByAggregateInput
  _max?: Prisma.PostsOnCollectionsMaxOrderByAggregateInput
  _min?: Prisma.PostsOnCollectionsMinOrderByAggregateInput
  _sum?: Prisma.PostsOnCollectionsSumOrderByAggregateInput
}

export type PostsOnCollectionsScalarWhereWithAggregatesInput = {
  AND?: Prisma.PostsOnCollectionsScalarWhereWithAggregatesInput | Prisma.PostsOnCollectionsScalarWhereWithAggregatesInput[]
  OR?: Prisma.PostsOnCollectionsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PostsOnCollectionsScalarWhereWithAggregatesInput | Prisma.PostsOnCollectionsScalarWhereWithAggregatesInput[]
  postId?: Prisma.IntWithAggregatesFilter<"PostsOnCollections"> | number
  collectionId?: Prisma.IntWithAggregatesFilter<"PostsOnCollections"> | number
  assignedAt?: Prisma.DateTimeWithAggregatesFilter<"PostsOnCollections"> | Date | string
}

export type PostsOnCollectionsCreateInput = {
  assignedAt?: Date | string
  collection: Prisma.CollectionCreateNestedOneWithoutPostsInput
  post: Prisma.PostCreateNestedOneWithoutCollectionsInput
}

export type PostsOnCollectionsUncheckedCreateInput = {
  postId: number
  collectionId: number
  assignedAt?: Date | string
}

export type PostsOnCollectionsUpdateInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  collection?: Prisma.CollectionUpdateOneRequiredWithoutPostsNestedInput
  post?: Prisma.PostUpdateOneRequiredWithoutCollectionsNestedInput
}

export type PostsOnCollectionsUncheckedUpdateInput = {
  postId?: Prisma.IntFieldUpdateOperationsInput | number
  collectionId?: Prisma.IntFieldUpdateOperationsInput | number
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostsOnCollectionsCreateManyInput = {
  postId: number
  collectionId: number
  assignedAt?: Date | string
}

export type PostsOnCollectionsUpdateManyMutationInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostsOnCollectionsUncheckedUpdateManyInput = {
  postId?: Prisma.IntFieldUpdateOperationsInput | number
  collectionId?: Prisma.IntFieldUpdateOperationsInput | number
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostsOnCollectionsListRelationFilter = {
  every?: Prisma.PostsOnCollectionsWhereInput
  some?: Prisma.PostsOnCollectionsWhereInput
  none?: Prisma.PostsOnCollectionsWhereInput
}

export type PostsOnCollectionsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PostsOnCollectionsPostIdCollectionIdCompoundUniqueInput = {
  postId: number
  collectionId: number
}

export type PostsOnCollectionsCountOrderByAggregateInput = {
  postId?: Prisma.SortOrder
  collectionId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
}

export type PostsOnCollectionsAvgOrderByAggregateInput = {
  postId?: Prisma.SortOrder
  collectionId?: Prisma.SortOrder
}

export type PostsOnCollectionsMaxOrderByAggregateInput = {
  postId?: Prisma.SortOrder
  collectionId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
}

export type PostsOnCollectionsMinOrderByAggregateInput = {
  postId?: Prisma.SortOrder
  collectionId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
}

export type PostsOnCollectionsSumOrderByAggregateInput = {
  postId?: Prisma.SortOrder
  collectionId?: Prisma.SortOrder
}

export type PostsOnCollectionsCreateNestedManyWithoutPostInput = {
  create?: Prisma.XOR<Prisma.PostsOnCollectionsCreateWithoutPostInput, Prisma.PostsOnCollectionsUncheckedCreateWithoutPostInput> | Prisma.PostsOnCollectionsCreateWithoutPostInput[] | Prisma.PostsOnCollectionsUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.PostsOnCollectionsCreateOrConnectWithoutPostInput | Prisma.PostsOnCollectionsCreateOrConnectWithoutPostInput[]
  createMany?: Prisma.PostsOnCollectionsCreateManyPostInputEnvelope
  connect?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
}

export type PostsOnCollectionsUncheckedCreateNestedManyWithoutPostInput = {
  create?: Prisma.XOR<Prisma.PostsOnCollectionsCreateWithoutPostInput, Prisma.PostsOnCollectionsUncheckedCreateWithoutPostInput> | Prisma.PostsOnCollectionsCreateWithoutPostInput[] | Prisma.PostsOnCollectionsUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.PostsOnCollectionsCreateOrConnectWithoutPostInput | Prisma.PostsOnCollectionsCreateOrConnectWithoutPostInput[]
  createMany?: Prisma.PostsOnCollectionsCreateManyPostInputEnvelope
  connect?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
}

export type PostsOnCollectionsUpdateManyWithoutPostNestedInput = {
  create?: Prisma.XOR<Prisma.PostsOnCollectionsCreateWithoutPostInput, Prisma.PostsOnCollectionsUncheckedCreateWithoutPostInput> | Prisma.PostsOnCollectionsCreateWithoutPostInput[] | Prisma.PostsOnCollectionsUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.PostsOnCollectionsCreateOrConnectWithoutPostInput | Prisma.PostsOnCollectionsCreateOrConnectWithoutPostInput[]
  upsert?: Prisma.PostsOnCollectionsUpsertWithWhereUniqueWithoutPostInput | Prisma.PostsOnCollectionsUpsertWithWhereUniqueWithoutPostInput[]
  createMany?: Prisma.PostsOnCollectionsCreateManyPostInputEnvelope
  set?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  disconnect?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  delete?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  connect?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  update?: Prisma.PostsOnCollectionsUpdateWithWhereUniqueWithoutPostInput | Prisma.PostsOnCollectionsUpdateWithWhereUniqueWithoutPostInput[]
  updateMany?: Prisma.PostsOnCollectionsUpdateManyWithWhereWithoutPostInput | Prisma.PostsOnCollectionsUpdateManyWithWhereWithoutPostInput[]
  deleteMany?: Prisma.PostsOnCollectionsScalarWhereInput | Prisma.PostsOnCollectionsScalarWhereInput[]
}

export type PostsOnCollectionsUncheckedUpdateManyWithoutPostNestedInput = {
  create?: Prisma.XOR<Prisma.PostsOnCollectionsCreateWithoutPostInput, Prisma.PostsOnCollectionsUncheckedCreateWithoutPostInput> | Prisma.PostsOnCollectionsCreateWithoutPostInput[] | Prisma.PostsOnCollectionsUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.PostsOnCollectionsCreateOrConnectWithoutPostInput | Prisma.PostsOnCollectionsCreateOrConnectWithoutPostInput[]
  upsert?: Prisma.PostsOnCollectionsUpsertWithWhereUniqueWithoutPostInput | Prisma.PostsOnCollectionsUpsertWithWhereUniqueWithoutPostInput[]
  createMany?: Prisma.PostsOnCollectionsCreateManyPostInputEnvelope
  set?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  disconnect?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  delete?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  connect?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  update?: Prisma.PostsOnCollectionsUpdateWithWhereUniqueWithoutPostInput | Prisma.PostsOnCollectionsUpdateWithWhereUniqueWithoutPostInput[]
  updateMany?: Prisma.PostsOnCollectionsUpdateManyWithWhereWithoutPostInput | Prisma.PostsOnCollectionsUpdateManyWithWhereWithoutPostInput[]
  deleteMany?: Prisma.PostsOnCollectionsScalarWhereInput | Prisma.PostsOnCollectionsScalarWhereInput[]
}

export type PostsOnCollectionsCreateNestedManyWithoutCollectionInput = {
  create?: Prisma.XOR<Prisma.PostsOnCollectionsCreateWithoutCollectionInput, Prisma.PostsOnCollectionsUncheckedCreateWithoutCollectionInput> | Prisma.PostsOnCollectionsCreateWithoutCollectionInput[] | Prisma.PostsOnCollectionsUncheckedCreateWithoutCollectionInput[]
  connectOrCreate?: Prisma.PostsOnCollectionsCreateOrConnectWithoutCollectionInput | Prisma.PostsOnCollectionsCreateOrConnectWithoutCollectionInput[]
  createMany?: Prisma.PostsOnCollectionsCreateManyCollectionInputEnvelope
  connect?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
}

export type PostsOnCollectionsUncheckedCreateNestedManyWithoutCollectionInput = {
  create?: Prisma.XOR<Prisma.PostsOnCollectionsCreateWithoutCollectionInput, Prisma.PostsOnCollectionsUncheckedCreateWithoutCollectionInput> | Prisma.PostsOnCollectionsCreateWithoutCollectionInput[] | Prisma.PostsOnCollectionsUncheckedCreateWithoutCollectionInput[]
  connectOrCreate?: Prisma.PostsOnCollectionsCreateOrConnectWithoutCollectionInput | Prisma.PostsOnCollectionsCreateOrConnectWithoutCollectionInput[]
  createMany?: Prisma.PostsOnCollectionsCreateManyCollectionInputEnvelope
  connect?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
}

export type PostsOnCollectionsUpdateManyWithoutCollectionNestedInput = {
  create?: Prisma.XOR<Prisma.PostsOnCollectionsCreateWithoutCollectionInput, Prisma.PostsOnCollectionsUncheckedCreateWithoutCollectionInput> | Prisma.PostsOnCollectionsCreateWithoutCollectionInput[] | Prisma.PostsOnCollectionsUncheckedCreateWithoutCollectionInput[]
  connectOrCreate?: Prisma.PostsOnCollectionsCreateOrConnectWithoutCollectionInput | Prisma.PostsOnCollectionsCreateOrConnectWithoutCollectionInput[]
  upsert?: Prisma.PostsOnCollectionsUpsertWithWhereUniqueWithoutCollectionInput | Prisma.PostsOnCollectionsUpsertWithWhereUniqueWithoutCollectionInput[]
  createMany?: Prisma.PostsOnCollectionsCreateManyCollectionInputEnvelope
  set?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  disconnect?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  delete?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  connect?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  update?: Prisma.PostsOnCollectionsUpdateWithWhereUniqueWithoutCollectionInput | Prisma.PostsOnCollectionsUpdateWithWhereUniqueWithoutCollectionInput[]
  updateMany?: Prisma.PostsOnCollectionsUpdateManyWithWhereWithoutCollectionInput | Prisma.PostsOnCollectionsUpdateManyWithWhereWithoutCollectionInput[]
  deleteMany?: Prisma.PostsOnCollectionsScalarWhereInput | Prisma.PostsOnCollectionsScalarWhereInput[]
}

export type PostsOnCollectionsUncheckedUpdateManyWithoutCollectionNestedInput = {
  create?: Prisma.XOR<Prisma.PostsOnCollectionsCreateWithoutCollectionInput, Prisma.PostsOnCollectionsUncheckedCreateWithoutCollectionInput> | Prisma.PostsOnCollectionsCreateWithoutCollectionInput[] | Prisma.PostsOnCollectionsUncheckedCreateWithoutCollectionInput[]
  connectOrCreate?: Prisma.PostsOnCollectionsCreateOrConnectWithoutCollectionInput | Prisma.PostsOnCollectionsCreateOrConnectWithoutCollectionInput[]
  upsert?: Prisma.PostsOnCollectionsUpsertWithWhereUniqueWithoutCollectionInput | Prisma.PostsOnCollectionsUpsertWithWhereUniqueWithoutCollectionInput[]
  createMany?: Prisma.PostsOnCollectionsCreateManyCollectionInputEnvelope
  set?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  disconnect?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  delete?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  connect?: Prisma.PostsOnCollectionsWhereUniqueInput | Prisma.PostsOnCollectionsWhereUniqueInput[]
  update?: Prisma.PostsOnCollectionsUpdateWithWhereUniqueWithoutCollectionInput | Prisma.PostsOnCollectionsUpdateWithWhereUniqueWithoutCollectionInput[]
  updateMany?: Prisma.PostsOnCollectionsUpdateManyWithWhereWithoutCollectionInput | Prisma.PostsOnCollectionsUpdateManyWithWhereWithoutCollectionInput[]
  deleteMany?: Prisma.PostsOnCollectionsScalarWhereInput | Prisma.PostsOnCollectionsScalarWhereInput[]
}

export type PostsOnCollectionsCreateWithoutPostInput = {
  assignedAt?: Date | string
  collection: Prisma.CollectionCreateNestedOneWithoutPostsInput
}

export type PostsOnCollectionsUncheckedCreateWithoutPostInput = {
  collectionId: number
  assignedAt?: Date | string
}

export type PostsOnCollectionsCreateOrConnectWithoutPostInput = {
  where: Prisma.PostsOnCollectionsWhereUniqueInput
  create: Prisma.XOR<Prisma.PostsOnCollectionsCreateWithoutPostInput, Prisma.PostsOnCollectionsUncheckedCreateWithoutPostInput>
}

export type PostsOnCollectionsCreateManyPostInputEnvelope = {
  data: Prisma.PostsOnCollectionsCreateManyPostInput | Prisma.PostsOnCollectionsCreateManyPostInput[]
  skipDuplicates?: boolean
}

export type PostsOnCollectionsUpsertWithWhereUniqueWithoutPostInput = {
  where: Prisma.PostsOnCollectionsWhereUniqueInput
  update: Prisma.XOR<Prisma.PostsOnCollectionsUpdateWithoutPostInput, Prisma.PostsOnCollectionsUncheckedUpdateWithoutPostInput>
  create: Prisma.XOR<Prisma.PostsOnCollectionsCreateWithoutPostInput, Prisma.PostsOnCollectionsUncheckedCreateWithoutPostInput>
}

export type PostsOnCollectionsUpdateWithWhereUniqueWithoutPostInput = {
  where: Prisma.PostsOnCollectionsWhereUniqueInput
  data: Prisma.XOR<Prisma.PostsOnCollectionsUpdateWithoutPostInput, Prisma.PostsOnCollectionsUncheckedUpdateWithoutPostInput>
}

export type PostsOnCollectionsUpdateManyWithWhereWithoutPostInput = {
  where: Prisma.PostsOnCollectionsScalarWhereInput
  data: Prisma.XOR<Prisma.PostsOnCollectionsUpdateManyMutationInput, Prisma.PostsOnCollectionsUncheckedUpdateManyWithoutPostInput>
}

export type PostsOnCollectionsScalarWhereInput = {
  AND?: Prisma.PostsOnCollectionsScalarWhereInput | Prisma.PostsOnCollectionsScalarWhereInput[]
  OR?: Prisma.PostsOnCollectionsScalarWhereInput[]
  NOT?: Prisma.PostsOnCollectionsScalarWhereInput | Prisma.PostsOnCollectionsScalarWhereInput[]
  postId?: Prisma.IntFilter<"PostsOnCollections"> | number
  collectionId?: Prisma.IntFilter<"PostsOnCollections"> | number
  assignedAt?: Prisma.DateTimeFilter<"PostsOnCollections"> | Date | string
}

export type PostsOnCollectionsCreateWithoutCollectionInput = {
  assignedAt?: Date | string
  post: Prisma.PostCreateNestedOneWithoutCollectionsInput
}

export type PostsOnCollectionsUncheckedCreateWithoutCollectionInput = {
  postId: number
  assignedAt?: Date | string
}

export type PostsOnCollectionsCreateOrConnectWithoutCollectionInput = {
  where: Prisma.PostsOnCollectionsWhereUniqueInput
  create: Prisma.XOR<Prisma.PostsOnCollectionsCreateWithoutCollectionInput, Prisma.PostsOnCollectionsUncheckedCreateWithoutCollectionInput>
}

export type PostsOnCollectionsCreateManyCollectionInputEnvelope = {
  data: Prisma.PostsOnCollectionsCreateManyCollectionInput | Prisma.PostsOnCollectionsCreateManyCollectionInput[]
  skipDuplicates?: boolean
}

export type PostsOnCollectionsUpsertWithWhereUniqueWithoutCollectionInput = {
  where: Prisma.PostsOnCollectionsWhereUniqueInput
  update: Prisma.XOR<Prisma.PostsOnCollectionsUpdateWithoutCollectionInput, Prisma.PostsOnCollectionsUncheckedUpdateWithoutCollectionInput>
  create: Prisma.XOR<Prisma.PostsOnCollectionsCreateWithoutCollectionInput, Prisma.PostsOnCollectionsUncheckedCreateWithoutCollectionInput>
}

export type PostsOnCollectionsUpdateWithWhereUniqueWithoutCollectionInput = {
  where: Prisma.PostsOnCollectionsWhereUniqueInput
  data: Prisma.XOR<Prisma.PostsOnCollectionsUpdateWithoutCollectionInput, Prisma.PostsOnCollectionsUncheckedUpdateWithoutCollectionInput>
}

export type PostsOnCollectionsUpdateManyWithWhereWithoutCollectionInput = {
  where: Prisma.PostsOnCollectionsScalarWhereInput
  data: Prisma.XOR<Prisma.PostsOnCollectionsUpdateManyMutationInput, Prisma.PostsOnCollectionsUncheckedUpdateManyWithoutCollectionInput>
}

export type PostsOnCollectionsCreateManyPostInput = {
  collectionId: number
  assignedAt?: Date | string
}

export type PostsOnCollectionsUpdateWithoutPostInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  collection?: Prisma.CollectionUpdateOneRequiredWithoutPostsNestedInput
}

export type PostsOnCollectionsUncheckedUpdateWithoutPostInput = {
  collectionId?: Prisma.IntFieldUpdateOperationsInput | number
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostsOnCollectionsUncheckedUpdateManyWithoutPostInput = {
  collectionId?: Prisma.IntFieldUpdateOperationsInput | number
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostsOnCollectionsCreateManyCollectionInput = {
  postId: number
  assignedAt?: Date | string
}

export type PostsOnCollectionsUpdateWithoutCollectionInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  post?: Prisma.PostUpdateOneRequiredWithoutCollectionsNestedInput
}

export type PostsOnCollectionsUncheckedUpdateWithoutCollectionInput = {
  postId?: Prisma.IntFieldUpdateOperationsInput | number
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostsOnCollectionsUncheckedUpdateManyWithoutCollectionInput = {
  postId?: Prisma.IntFieldUpdateOperationsInput | number
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PostsOnCollectionsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  postId?: boolean
  collectionId?: boolean
  assignedAt?: boolean
  collection?: boolean | Prisma.CollectionDefaultArgs<ExtArgs>
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}, ExtArgs["result"]["postsOnCollections"]>

export type PostsOnCollectionsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  postId?: boolean
  collectionId?: boolean
  assignedAt?: boolean
  collection?: boolean | Prisma.CollectionDefaultArgs<ExtArgs>
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}, ExtArgs["result"]["postsOnCollections"]>

export type PostsOnCollectionsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  postId?: boolean
  collectionId?: boolean
  assignedAt?: boolean
  collection?: boolean | Prisma.CollectionDefaultArgs<ExtArgs>
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}, ExtArgs["result"]["postsOnCollections"]>

export type PostsOnCollectionsSelectScalar = {
  postId?: boolean
  collectionId?: boolean
  assignedAt?: boolean
}

export type PostsOnCollectionsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"postId" | "collectionId" | "assignedAt", ExtArgs["result"]["postsOnCollections"]>
export type PostsOnCollectionsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  collection?: boolean | Prisma.CollectionDefaultArgs<ExtArgs>
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}
export type PostsOnCollectionsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  collection?: boolean | Prisma.CollectionDefaultArgs<ExtArgs>
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}
export type PostsOnCollectionsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  collection?: boolean | Prisma.CollectionDefaultArgs<ExtArgs>
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}

export type $PostsOnCollectionsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PostsOnCollections"
  objects: {
    collection: Prisma.$CollectionPayload<ExtArgs>
    post: Prisma.$PostPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    postId: number
    collectionId: number
    assignedAt: Date
  }, ExtArgs["result"]["postsOnCollections"]>
  composites: {}
}

export type PostsOnCollectionsGetPayload<S extends boolean | null | undefined | PostsOnCollectionsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PostsOnCollectionsPayload, S>

export type PostsOnCollectionsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PostsOnCollectionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PostsOnCollectionsCountAggregateInputType | true
  }

export interface PostsOnCollectionsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostsOnCollections'], meta: { name: 'PostsOnCollections' } }
  /**
   * Find zero or one PostsOnCollections that matches the filter.
   * @param {PostsOnCollectionsFindUniqueArgs} args - Arguments to find a PostsOnCollections
   * @example
   * // Get one PostsOnCollections
   * const postsOnCollections = await prisma.postsOnCollections.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PostsOnCollectionsFindUniqueArgs>(args: Prisma.SelectSubset<T, PostsOnCollectionsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PostsOnCollectionsClient<runtime.Types.Result.GetResult<Prisma.$PostsOnCollectionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PostsOnCollections that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PostsOnCollectionsFindUniqueOrThrowArgs} args - Arguments to find a PostsOnCollections
   * @example
   * // Get one PostsOnCollections
   * const postsOnCollections = await prisma.postsOnCollections.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PostsOnCollectionsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PostsOnCollectionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PostsOnCollectionsClient<runtime.Types.Result.GetResult<Prisma.$PostsOnCollectionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PostsOnCollections that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostsOnCollectionsFindFirstArgs} args - Arguments to find a PostsOnCollections
   * @example
   * // Get one PostsOnCollections
   * const postsOnCollections = await prisma.postsOnCollections.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PostsOnCollectionsFindFirstArgs>(args?: Prisma.SelectSubset<T, PostsOnCollectionsFindFirstArgs<ExtArgs>>): Prisma.Prisma__PostsOnCollectionsClient<runtime.Types.Result.GetResult<Prisma.$PostsOnCollectionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PostsOnCollections that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostsOnCollectionsFindFirstOrThrowArgs} args - Arguments to find a PostsOnCollections
   * @example
   * // Get one PostsOnCollections
   * const postsOnCollections = await prisma.postsOnCollections.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PostsOnCollectionsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PostsOnCollectionsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PostsOnCollectionsClient<runtime.Types.Result.GetResult<Prisma.$PostsOnCollectionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PostsOnCollections that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostsOnCollectionsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PostsOnCollections
   * const postsOnCollections = await prisma.postsOnCollections.findMany()
   * 
   * // Get first 10 PostsOnCollections
   * const postsOnCollections = await prisma.postsOnCollections.findMany({ take: 10 })
   * 
   * // Only select the `postId`
   * const postsOnCollectionsWithPostIdOnly = await prisma.postsOnCollections.findMany({ select: { postId: true } })
   * 
   */
  findMany<T extends PostsOnCollectionsFindManyArgs>(args?: Prisma.SelectSubset<T, PostsOnCollectionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostsOnCollectionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PostsOnCollections.
   * @param {PostsOnCollectionsCreateArgs} args - Arguments to create a PostsOnCollections.
   * @example
   * // Create one PostsOnCollections
   * const PostsOnCollections = await prisma.postsOnCollections.create({
   *   data: {
   *     // ... data to create a PostsOnCollections
   *   }
   * })
   * 
   */
  create<T extends PostsOnCollectionsCreateArgs>(args: Prisma.SelectSubset<T, PostsOnCollectionsCreateArgs<ExtArgs>>): Prisma.Prisma__PostsOnCollectionsClient<runtime.Types.Result.GetResult<Prisma.$PostsOnCollectionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PostsOnCollections.
   * @param {PostsOnCollectionsCreateManyArgs} args - Arguments to create many PostsOnCollections.
   * @example
   * // Create many PostsOnCollections
   * const postsOnCollections = await prisma.postsOnCollections.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PostsOnCollectionsCreateManyArgs>(args?: Prisma.SelectSubset<T, PostsOnCollectionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PostsOnCollections and returns the data saved in the database.
   * @param {PostsOnCollectionsCreateManyAndReturnArgs} args - Arguments to create many PostsOnCollections.
   * @example
   * // Create many PostsOnCollections
   * const postsOnCollections = await prisma.postsOnCollections.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PostsOnCollections and only return the `postId`
   * const postsOnCollectionsWithPostIdOnly = await prisma.postsOnCollections.createManyAndReturn({
   *   select: { postId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PostsOnCollectionsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PostsOnCollectionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostsOnCollectionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PostsOnCollections.
   * @param {PostsOnCollectionsDeleteArgs} args - Arguments to delete one PostsOnCollections.
   * @example
   * // Delete one PostsOnCollections
   * const PostsOnCollections = await prisma.postsOnCollections.delete({
   *   where: {
   *     // ... filter to delete one PostsOnCollections
   *   }
   * })
   * 
   */
  delete<T extends PostsOnCollectionsDeleteArgs>(args: Prisma.SelectSubset<T, PostsOnCollectionsDeleteArgs<ExtArgs>>): Prisma.Prisma__PostsOnCollectionsClient<runtime.Types.Result.GetResult<Prisma.$PostsOnCollectionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PostsOnCollections.
   * @param {PostsOnCollectionsUpdateArgs} args - Arguments to update one PostsOnCollections.
   * @example
   * // Update one PostsOnCollections
   * const postsOnCollections = await prisma.postsOnCollections.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PostsOnCollectionsUpdateArgs>(args: Prisma.SelectSubset<T, PostsOnCollectionsUpdateArgs<ExtArgs>>): Prisma.Prisma__PostsOnCollectionsClient<runtime.Types.Result.GetResult<Prisma.$PostsOnCollectionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PostsOnCollections.
   * @param {PostsOnCollectionsDeleteManyArgs} args - Arguments to filter PostsOnCollections to delete.
   * @example
   * // Delete a few PostsOnCollections
   * const { count } = await prisma.postsOnCollections.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PostsOnCollectionsDeleteManyArgs>(args?: Prisma.SelectSubset<T, PostsOnCollectionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PostsOnCollections.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostsOnCollectionsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PostsOnCollections
   * const postsOnCollections = await prisma.postsOnCollections.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PostsOnCollectionsUpdateManyArgs>(args: Prisma.SelectSubset<T, PostsOnCollectionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PostsOnCollections and returns the data updated in the database.
   * @param {PostsOnCollectionsUpdateManyAndReturnArgs} args - Arguments to update many PostsOnCollections.
   * @example
   * // Update many PostsOnCollections
   * const postsOnCollections = await prisma.postsOnCollections.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PostsOnCollections and only return the `postId`
   * const postsOnCollectionsWithPostIdOnly = await prisma.postsOnCollections.updateManyAndReturn({
   *   select: { postId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PostsOnCollectionsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PostsOnCollectionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostsOnCollectionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PostsOnCollections.
   * @param {PostsOnCollectionsUpsertArgs} args - Arguments to update or create a PostsOnCollections.
   * @example
   * // Update or create a PostsOnCollections
   * const postsOnCollections = await prisma.postsOnCollections.upsert({
   *   create: {
   *     // ... data to create a PostsOnCollections
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PostsOnCollections we want to update
   *   }
   * })
   */
  upsert<T extends PostsOnCollectionsUpsertArgs>(args: Prisma.SelectSubset<T, PostsOnCollectionsUpsertArgs<ExtArgs>>): Prisma.Prisma__PostsOnCollectionsClient<runtime.Types.Result.GetResult<Prisma.$PostsOnCollectionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PostsOnCollections.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostsOnCollectionsCountArgs} args - Arguments to filter PostsOnCollections to count.
   * @example
   * // Count the number of PostsOnCollections
   * const count = await prisma.postsOnCollections.count({
   *   where: {
   *     // ... the filter for the PostsOnCollections we want to count
   *   }
   * })
  **/
  count<T extends PostsOnCollectionsCountArgs>(
    args?: Prisma.Subset<T, PostsOnCollectionsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PostsOnCollectionsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PostsOnCollections.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostsOnCollectionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PostsOnCollectionsAggregateArgs>(args: Prisma.Subset<T, PostsOnCollectionsAggregateArgs>): Prisma.PrismaPromise<GetPostsOnCollectionsAggregateType<T>>

  /**
   * Group by PostsOnCollections.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostsOnCollectionsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PostsOnCollectionsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PostsOnCollectionsGroupByArgs['orderBy'] }
      : { orderBy?: PostsOnCollectionsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PostsOnCollectionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostsOnCollectionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PostsOnCollections model
 */
readonly fields: PostsOnCollectionsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PostsOnCollections.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PostsOnCollectionsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  collection<T extends Prisma.CollectionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CollectionDefaultArgs<ExtArgs>>): Prisma.Prisma__CollectionClient<runtime.Types.Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  post<T extends Prisma.PostDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PostDefaultArgs<ExtArgs>>): Prisma.Prisma__PostClient<runtime.Types.Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PostsOnCollections model
 */
export interface PostsOnCollectionsFieldRefs {
  readonly postId: Prisma.FieldRef<"PostsOnCollections", 'Int'>
  readonly collectionId: Prisma.FieldRef<"PostsOnCollections", 'Int'>
  readonly assignedAt: Prisma.FieldRef<"PostsOnCollections", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PostsOnCollections findUnique
 */
export type PostsOnCollectionsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostsOnCollections
   */
  select?: Prisma.PostsOnCollectionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostsOnCollections
   */
  omit?: Prisma.PostsOnCollectionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostsOnCollectionsInclude<ExtArgs> | null
  /**
   * Filter, which PostsOnCollections to fetch.
   */
  where: Prisma.PostsOnCollectionsWhereUniqueInput
}

/**
 * PostsOnCollections findUniqueOrThrow
 */
export type PostsOnCollectionsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostsOnCollections
   */
  select?: Prisma.PostsOnCollectionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostsOnCollections
   */
  omit?: Prisma.PostsOnCollectionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostsOnCollectionsInclude<ExtArgs> | null
  /**
   * Filter, which PostsOnCollections to fetch.
   */
  where: Prisma.PostsOnCollectionsWhereUniqueInput
}

/**
 * PostsOnCollections findFirst
 */
export type PostsOnCollectionsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostsOnCollections
   */
  select?: Prisma.PostsOnCollectionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostsOnCollections
   */
  omit?: Prisma.PostsOnCollectionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostsOnCollectionsInclude<ExtArgs> | null
  /**
   * Filter, which PostsOnCollections to fetch.
   */
  where?: Prisma.PostsOnCollectionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostsOnCollections to fetch.
   */
  orderBy?: Prisma.PostsOnCollectionsOrderByWithRelationInput | Prisma.PostsOnCollectionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PostsOnCollections.
   */
  cursor?: Prisma.PostsOnCollectionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostsOnCollections from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostsOnCollections.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PostsOnCollections.
   */
  distinct?: Prisma.PostsOnCollectionsScalarFieldEnum | Prisma.PostsOnCollectionsScalarFieldEnum[]
}

/**
 * PostsOnCollections findFirstOrThrow
 */
export type PostsOnCollectionsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostsOnCollections
   */
  select?: Prisma.PostsOnCollectionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostsOnCollections
   */
  omit?: Prisma.PostsOnCollectionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostsOnCollectionsInclude<ExtArgs> | null
  /**
   * Filter, which PostsOnCollections to fetch.
   */
  where?: Prisma.PostsOnCollectionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostsOnCollections to fetch.
   */
  orderBy?: Prisma.PostsOnCollectionsOrderByWithRelationInput | Prisma.PostsOnCollectionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PostsOnCollections.
   */
  cursor?: Prisma.PostsOnCollectionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostsOnCollections from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostsOnCollections.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PostsOnCollections.
   */
  distinct?: Prisma.PostsOnCollectionsScalarFieldEnum | Prisma.PostsOnCollectionsScalarFieldEnum[]
}

/**
 * PostsOnCollections findMany
 */
export type PostsOnCollectionsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostsOnCollections
   */
  select?: Prisma.PostsOnCollectionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostsOnCollections
   */
  omit?: Prisma.PostsOnCollectionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostsOnCollectionsInclude<ExtArgs> | null
  /**
   * Filter, which PostsOnCollections to fetch.
   */
  where?: Prisma.PostsOnCollectionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostsOnCollections to fetch.
   */
  orderBy?: Prisma.PostsOnCollectionsOrderByWithRelationInput | Prisma.PostsOnCollectionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PostsOnCollections.
   */
  cursor?: Prisma.PostsOnCollectionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostsOnCollections from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostsOnCollections.
   */
  skip?: number
  distinct?: Prisma.PostsOnCollectionsScalarFieldEnum | Prisma.PostsOnCollectionsScalarFieldEnum[]
}

/**
 * PostsOnCollections create
 */
export type PostsOnCollectionsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostsOnCollections
   */
  select?: Prisma.PostsOnCollectionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostsOnCollections
   */
  omit?: Prisma.PostsOnCollectionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostsOnCollectionsInclude<ExtArgs> | null
  /**
   * The data needed to create a PostsOnCollections.
   */
  data: Prisma.XOR<Prisma.PostsOnCollectionsCreateInput, Prisma.PostsOnCollectionsUncheckedCreateInput>
}

/**
 * PostsOnCollections createMany
 */
export type PostsOnCollectionsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PostsOnCollections.
   */
  data: Prisma.PostsOnCollectionsCreateManyInput | Prisma.PostsOnCollectionsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PostsOnCollections createManyAndReturn
 */
export type PostsOnCollectionsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostsOnCollections
   */
  select?: Prisma.PostsOnCollectionsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PostsOnCollections
   */
  omit?: Prisma.PostsOnCollectionsOmit<ExtArgs> | null
  /**
   * The data used to create many PostsOnCollections.
   */
  data: Prisma.PostsOnCollectionsCreateManyInput | Prisma.PostsOnCollectionsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostsOnCollectionsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PostsOnCollections update
 */
export type PostsOnCollectionsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostsOnCollections
   */
  select?: Prisma.PostsOnCollectionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostsOnCollections
   */
  omit?: Prisma.PostsOnCollectionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostsOnCollectionsInclude<ExtArgs> | null
  /**
   * The data needed to update a PostsOnCollections.
   */
  data: Prisma.XOR<Prisma.PostsOnCollectionsUpdateInput, Prisma.PostsOnCollectionsUncheckedUpdateInput>
  /**
   * Choose, which PostsOnCollections to update.
   */
  where: Prisma.PostsOnCollectionsWhereUniqueInput
}

/**
 * PostsOnCollections updateMany
 */
export type PostsOnCollectionsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PostsOnCollections.
   */
  data: Prisma.XOR<Prisma.PostsOnCollectionsUpdateManyMutationInput, Prisma.PostsOnCollectionsUncheckedUpdateManyInput>
  /**
   * Filter which PostsOnCollections to update
   */
  where?: Prisma.PostsOnCollectionsWhereInput
  /**
   * Limit how many PostsOnCollections to update.
   */
  limit?: number
}

/**
 * PostsOnCollections updateManyAndReturn
 */
export type PostsOnCollectionsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostsOnCollections
   */
  select?: Prisma.PostsOnCollectionsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PostsOnCollections
   */
  omit?: Prisma.PostsOnCollectionsOmit<ExtArgs> | null
  /**
   * The data used to update PostsOnCollections.
   */
  data: Prisma.XOR<Prisma.PostsOnCollectionsUpdateManyMutationInput, Prisma.PostsOnCollectionsUncheckedUpdateManyInput>
  /**
   * Filter which PostsOnCollections to update
   */
  where?: Prisma.PostsOnCollectionsWhereInput
  /**
   * Limit how many PostsOnCollections to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostsOnCollectionsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PostsOnCollections upsert
 */
export type PostsOnCollectionsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostsOnCollections
   */
  select?: Prisma.PostsOnCollectionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostsOnCollections
   */
  omit?: Prisma.PostsOnCollectionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostsOnCollectionsInclude<ExtArgs> | null
  /**
   * The filter to search for the PostsOnCollections to update in case it exists.
   */
  where: Prisma.PostsOnCollectionsWhereUniqueInput
  /**
   * In case the PostsOnCollections found by the `where` argument doesn't exist, create a new PostsOnCollections with this data.
   */
  create: Prisma.XOR<Prisma.PostsOnCollectionsCreateInput, Prisma.PostsOnCollectionsUncheckedCreateInput>
  /**
   * In case the PostsOnCollections was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PostsOnCollectionsUpdateInput, Prisma.PostsOnCollectionsUncheckedUpdateInput>
}

/**
 * PostsOnCollections delete
 */
export type PostsOnCollectionsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostsOnCollections
   */
  select?: Prisma.PostsOnCollectionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostsOnCollections
   */
  omit?: Prisma.PostsOnCollectionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostsOnCollectionsInclude<ExtArgs> | null
  /**
   * Filter which PostsOnCollections to delete.
   */
  where: Prisma.PostsOnCollectionsWhereUniqueInput
}

/**
 * PostsOnCollections deleteMany
 */
export type PostsOnCollectionsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PostsOnCollections to delete
   */
  where?: Prisma.PostsOnCollectionsWhereInput
  /**
   * Limit how many PostsOnCollections to delete.
   */
  limit?: number
}

/**
 * PostsOnCollections without action
 */
export type PostsOnCollectionsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostsOnCollections
   */
  select?: Prisma.PostsOnCollectionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostsOnCollections
   */
  omit?: Prisma.PostsOnCollectionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostsOnCollectionsInclude<ExtArgs> | null
}
