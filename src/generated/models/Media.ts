
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `Media` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Media
 * 
 */
export type MediaModel = runtime.Types.Result.DefaultSelection<Prisma.$MediaPayload>

export type AggregateMedia = {
  _count: MediaCountAggregateOutputType | null
  _avg: MediaAvgAggregateOutputType | null
  _sum: MediaSumAggregateOutputType | null
  _min: MediaMinAggregateOutputType | null
  _max: MediaMaxAggregateOutputType | null
}

export type MediaAvgAggregateOutputType = {
  id: number | null
  post_id: number | null
  downloads: number | null
}

export type MediaSumAggregateOutputType = {
  id: number | null
  post_id: number | null
  downloads: number | null
}

export type MediaMinAggregateOutputType = {
  id: number | null
  post_id: number | null
  media_type: $Enums.MediaType | null
  description: string | null
  url: string | null
  downloads: number | null
  created_at: Date | null
  creator_id: string | null
}

export type MediaMaxAggregateOutputType = {
  id: number | null
  post_id: number | null
  media_type: $Enums.MediaType | null
  description: string | null
  url: string | null
  downloads: number | null
  created_at: Date | null
  creator_id: string | null
}

export type MediaCountAggregateOutputType = {
  id: number
  post_id: number
  media_type: number
  description: number
  url: number
  downloads: number
  created_at: number
  creator_id: number
  _all: number
}


export type MediaAvgAggregateInputType = {
  id?: true
  post_id?: true
  downloads?: true
}

export type MediaSumAggregateInputType = {
  id?: true
  post_id?: true
  downloads?: true
}

export type MediaMinAggregateInputType = {
  id?: true
  post_id?: true
  media_type?: true
  description?: true
  url?: true
  downloads?: true
  created_at?: true
  creator_id?: true
}

export type MediaMaxAggregateInputType = {
  id?: true
  post_id?: true
  media_type?: true
  description?: true
  url?: true
  downloads?: true
  created_at?: true
  creator_id?: true
}

export type MediaCountAggregateInputType = {
  id?: true
  post_id?: true
  media_type?: true
  description?: true
  url?: true
  downloads?: true
  created_at?: true
  creator_id?: true
  _all?: true
}

export type MediaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Media to aggregate.
   */
  where?: Prisma.MediaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Media to fetch.
   */
  orderBy?: Prisma.MediaOrderByWithRelationInput | Prisma.MediaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MediaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Media from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Media.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Media
  **/
  _count?: true | MediaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MediaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MediaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MediaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MediaMaxAggregateInputType
}

export type GetMediaAggregateType<T extends MediaAggregateArgs> = {
      [P in keyof T & keyof AggregateMedia]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMedia[P]>
    : Prisma.GetScalarType<T[P], AggregateMedia[P]>
}




export type MediaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MediaWhereInput
  orderBy?: Prisma.MediaOrderByWithAggregationInput | Prisma.MediaOrderByWithAggregationInput[]
  by: Prisma.MediaScalarFieldEnum[] | Prisma.MediaScalarFieldEnum
  having?: Prisma.MediaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MediaCountAggregateInputType | true
  _avg?: MediaAvgAggregateInputType
  _sum?: MediaSumAggregateInputType
  _min?: MediaMinAggregateInputType
  _max?: MediaMaxAggregateInputType
}

export type MediaGroupByOutputType = {
  id: number
  post_id: number
  media_type: $Enums.MediaType
  description: string | null
  url: string
  downloads: number
  created_at: Date
  creator_id: string
  _count: MediaCountAggregateOutputType | null
  _avg: MediaAvgAggregateOutputType | null
  _sum: MediaSumAggregateOutputType | null
  _min: MediaMinAggregateOutputType | null
  _max: MediaMaxAggregateOutputType | null
}

type GetMediaGroupByPayload<T extends MediaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MediaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MediaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MediaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MediaGroupByOutputType[P]>
      }
    >
  > 



export type MediaWhereInput = {
  AND?: Prisma.MediaWhereInput | Prisma.MediaWhereInput[]
  OR?: Prisma.MediaWhereInput[]
  NOT?: Prisma.MediaWhereInput | Prisma.MediaWhereInput[]
  id?: Prisma.IntFilter<"Media"> | number
  post_id?: Prisma.IntFilter<"Media"> | number
  media_type?: Prisma.EnumMediaTypeFilter<"Media"> | $Enums.MediaType
  description?: Prisma.StringNullableFilter<"Media"> | string | null
  url?: Prisma.StringFilter<"Media"> | string
  downloads?: Prisma.IntFilter<"Media"> | number
  created_at?: Prisma.DateTimeFilter<"Media"> | Date | string
  creator_id?: Prisma.StringFilter<"Media"> | string
  post?: Prisma.XOR<Prisma.PostScalarRelationFilter, Prisma.PostWhereInput>
}

export type MediaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
  media_type?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  url?: Prisma.SortOrder
  downloads?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  creator_id?: Prisma.SortOrder
  post?: Prisma.PostOrderByWithRelationInput
}

export type MediaWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.MediaWhereInput | Prisma.MediaWhereInput[]
  OR?: Prisma.MediaWhereInput[]
  NOT?: Prisma.MediaWhereInput | Prisma.MediaWhereInput[]
  post_id?: Prisma.IntFilter<"Media"> | number
  media_type?: Prisma.EnumMediaTypeFilter<"Media"> | $Enums.MediaType
  description?: Prisma.StringNullableFilter<"Media"> | string | null
  url?: Prisma.StringFilter<"Media"> | string
  downloads?: Prisma.IntFilter<"Media"> | number
  created_at?: Prisma.DateTimeFilter<"Media"> | Date | string
  creator_id?: Prisma.StringFilter<"Media"> | string
  post?: Prisma.XOR<Prisma.PostScalarRelationFilter, Prisma.PostWhereInput>
}, "id">

export type MediaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
  media_type?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  url?: Prisma.SortOrder
  downloads?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  creator_id?: Prisma.SortOrder
  _count?: Prisma.MediaCountOrderByAggregateInput
  _avg?: Prisma.MediaAvgOrderByAggregateInput
  _max?: Prisma.MediaMaxOrderByAggregateInput
  _min?: Prisma.MediaMinOrderByAggregateInput
  _sum?: Prisma.MediaSumOrderByAggregateInput
}

export type MediaScalarWhereWithAggregatesInput = {
  AND?: Prisma.MediaScalarWhereWithAggregatesInput | Prisma.MediaScalarWhereWithAggregatesInput[]
  OR?: Prisma.MediaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MediaScalarWhereWithAggregatesInput | Prisma.MediaScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Media"> | number
  post_id?: Prisma.IntWithAggregatesFilter<"Media"> | number
  media_type?: Prisma.EnumMediaTypeWithAggregatesFilter<"Media"> | $Enums.MediaType
  description?: Prisma.StringNullableWithAggregatesFilter<"Media"> | string | null
  url?: Prisma.StringWithAggregatesFilter<"Media"> | string
  downloads?: Prisma.IntWithAggregatesFilter<"Media"> | number
  created_at?: Prisma.DateTimeWithAggregatesFilter<"Media"> | Date | string
  creator_id?: Prisma.StringWithAggregatesFilter<"Media"> | string
}

export type MediaCreateInput = {
  media_type: $Enums.MediaType
  description?: string | null
  url: string
  downloads?: number
  created_at?: Date | string
  creator_id: string
  post: Prisma.PostCreateNestedOneWithoutMediasInput
}

export type MediaUncheckedCreateInput = {
  id?: number
  post_id: number
  media_type: $Enums.MediaType
  description?: string | null
  url: string
  downloads?: number
  created_at?: Date | string
  creator_id: string
}

export type MediaUpdateInput = {
  media_type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.StringFieldUpdateOperationsInput | string
  downloads?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator_id?: Prisma.StringFieldUpdateOperationsInput | string
  post?: Prisma.PostUpdateOneRequiredWithoutMediasNestedInput
}

export type MediaUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  post_id?: Prisma.IntFieldUpdateOperationsInput | number
  media_type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.StringFieldUpdateOperationsInput | string
  downloads?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MediaCreateManyInput = {
  id?: number
  post_id: number
  media_type: $Enums.MediaType
  description?: string | null
  url: string
  downloads?: number
  created_at?: Date | string
  creator_id: string
}

export type MediaUpdateManyMutationInput = {
  media_type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.StringFieldUpdateOperationsInput | string
  downloads?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MediaUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  post_id?: Prisma.IntFieldUpdateOperationsInput | number
  media_type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.StringFieldUpdateOperationsInput | string
  downloads?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MediaListRelationFilter = {
  every?: Prisma.MediaWhereInput
  some?: Prisma.MediaWhereInput
  none?: Prisma.MediaWhereInput
}

export type MediaOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MediaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
  media_type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  url?: Prisma.SortOrder
  downloads?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  creator_id?: Prisma.SortOrder
}

export type MediaAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
  downloads?: Prisma.SortOrder
}

export type MediaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
  media_type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  url?: Prisma.SortOrder
  downloads?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  creator_id?: Prisma.SortOrder
}

export type MediaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
  media_type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  url?: Prisma.SortOrder
  downloads?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  creator_id?: Prisma.SortOrder
}

export type MediaSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
  downloads?: Prisma.SortOrder
}

export type MediaCreateNestedManyWithoutPostInput = {
  create?: Prisma.XOR<Prisma.MediaCreateWithoutPostInput, Prisma.MediaUncheckedCreateWithoutPostInput> | Prisma.MediaCreateWithoutPostInput[] | Prisma.MediaUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.MediaCreateOrConnectWithoutPostInput | Prisma.MediaCreateOrConnectWithoutPostInput[]
  createMany?: Prisma.MediaCreateManyPostInputEnvelope
  connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[]
}

export type MediaUncheckedCreateNestedManyWithoutPostInput = {
  create?: Prisma.XOR<Prisma.MediaCreateWithoutPostInput, Prisma.MediaUncheckedCreateWithoutPostInput> | Prisma.MediaCreateWithoutPostInput[] | Prisma.MediaUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.MediaCreateOrConnectWithoutPostInput | Prisma.MediaCreateOrConnectWithoutPostInput[]
  createMany?: Prisma.MediaCreateManyPostInputEnvelope
  connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[]
}

export type MediaUpdateManyWithoutPostNestedInput = {
  create?: Prisma.XOR<Prisma.MediaCreateWithoutPostInput, Prisma.MediaUncheckedCreateWithoutPostInput> | Prisma.MediaCreateWithoutPostInput[] | Prisma.MediaUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.MediaCreateOrConnectWithoutPostInput | Prisma.MediaCreateOrConnectWithoutPostInput[]
  upsert?: Prisma.MediaUpsertWithWhereUniqueWithoutPostInput | Prisma.MediaUpsertWithWhereUniqueWithoutPostInput[]
  createMany?: Prisma.MediaCreateManyPostInputEnvelope
  set?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[]
  disconnect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[]
  delete?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[]
  connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[]
  update?: Prisma.MediaUpdateWithWhereUniqueWithoutPostInput | Prisma.MediaUpdateWithWhereUniqueWithoutPostInput[]
  updateMany?: Prisma.MediaUpdateManyWithWhereWithoutPostInput | Prisma.MediaUpdateManyWithWhereWithoutPostInput[]
  deleteMany?: Prisma.MediaScalarWhereInput | Prisma.MediaScalarWhereInput[]
}

export type MediaUncheckedUpdateManyWithoutPostNestedInput = {
  create?: Prisma.XOR<Prisma.MediaCreateWithoutPostInput, Prisma.MediaUncheckedCreateWithoutPostInput> | Prisma.MediaCreateWithoutPostInput[] | Prisma.MediaUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.MediaCreateOrConnectWithoutPostInput | Prisma.MediaCreateOrConnectWithoutPostInput[]
  upsert?: Prisma.MediaUpsertWithWhereUniqueWithoutPostInput | Prisma.MediaUpsertWithWhereUniqueWithoutPostInput[]
  createMany?: Prisma.MediaCreateManyPostInputEnvelope
  set?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[]
  disconnect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[]
  delete?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[]
  connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[]
  update?: Prisma.MediaUpdateWithWhereUniqueWithoutPostInput | Prisma.MediaUpdateWithWhereUniqueWithoutPostInput[]
  updateMany?: Prisma.MediaUpdateManyWithWhereWithoutPostInput | Prisma.MediaUpdateManyWithWhereWithoutPostInput[]
  deleteMany?: Prisma.MediaScalarWhereInput | Prisma.MediaScalarWhereInput[]
}

export type EnumMediaTypeFieldUpdateOperationsInput = {
  set?: $Enums.MediaType
}

export type MediaCreateWithoutPostInput = {
  media_type: $Enums.MediaType
  description?: string | null
  url: string
  downloads?: number
  created_at?: Date | string
  creator_id: string
}

export type MediaUncheckedCreateWithoutPostInput = {
  id?: number
  media_type: $Enums.MediaType
  description?: string | null
  url: string
  downloads?: number
  created_at?: Date | string
  creator_id: string
}

export type MediaCreateOrConnectWithoutPostInput = {
  where: Prisma.MediaWhereUniqueInput
  create: Prisma.XOR<Prisma.MediaCreateWithoutPostInput, Prisma.MediaUncheckedCreateWithoutPostInput>
}

export type MediaCreateManyPostInputEnvelope = {
  data: Prisma.MediaCreateManyPostInput | Prisma.MediaCreateManyPostInput[]
  skipDuplicates?: boolean
}

export type MediaUpsertWithWhereUniqueWithoutPostInput = {
  where: Prisma.MediaWhereUniqueInput
  update: Prisma.XOR<Prisma.MediaUpdateWithoutPostInput, Prisma.MediaUncheckedUpdateWithoutPostInput>
  create: Prisma.XOR<Prisma.MediaCreateWithoutPostInput, Prisma.MediaUncheckedCreateWithoutPostInput>
}

export type MediaUpdateWithWhereUniqueWithoutPostInput = {
  where: Prisma.MediaWhereUniqueInput
  data: Prisma.XOR<Prisma.MediaUpdateWithoutPostInput, Prisma.MediaUncheckedUpdateWithoutPostInput>
}

export type MediaUpdateManyWithWhereWithoutPostInput = {
  where: Prisma.MediaScalarWhereInput
  data: Prisma.XOR<Prisma.MediaUpdateManyMutationInput, Prisma.MediaUncheckedUpdateManyWithoutPostInput>
}

export type MediaScalarWhereInput = {
  AND?: Prisma.MediaScalarWhereInput | Prisma.MediaScalarWhereInput[]
  OR?: Prisma.MediaScalarWhereInput[]
  NOT?: Prisma.MediaScalarWhereInput | Prisma.MediaScalarWhereInput[]
  id?: Prisma.IntFilter<"Media"> | number
  post_id?: Prisma.IntFilter<"Media"> | number
  media_type?: Prisma.EnumMediaTypeFilter<"Media"> | $Enums.MediaType
  description?: Prisma.StringNullableFilter<"Media"> | string | null
  url?: Prisma.StringFilter<"Media"> | string
  downloads?: Prisma.IntFilter<"Media"> | number
  created_at?: Prisma.DateTimeFilter<"Media"> | Date | string
  creator_id?: Prisma.StringFilter<"Media"> | string
}

export type MediaCreateManyPostInput = {
  id?: number
  media_type: $Enums.MediaType
  description?: string | null
  url: string
  downloads?: number
  created_at?: Date | string
  creator_id: string
}

export type MediaUpdateWithoutPostInput = {
  media_type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.StringFieldUpdateOperationsInput | string
  downloads?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MediaUncheckedUpdateWithoutPostInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  media_type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.StringFieldUpdateOperationsInput | string
  downloads?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MediaUncheckedUpdateManyWithoutPostInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  media_type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  url?: Prisma.StringFieldUpdateOperationsInput | string
  downloads?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator_id?: Prisma.StringFieldUpdateOperationsInput | string
}



export type MediaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  post_id?: boolean
  media_type?: boolean
  description?: boolean
  url?: boolean
  downloads?: boolean
  created_at?: boolean
  creator_id?: boolean
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}, ExtArgs["result"]["media"]>

export type MediaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  post_id?: boolean
  media_type?: boolean
  description?: boolean
  url?: boolean
  downloads?: boolean
  created_at?: boolean
  creator_id?: boolean
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}, ExtArgs["result"]["media"]>

export type MediaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  post_id?: boolean
  media_type?: boolean
  description?: boolean
  url?: boolean
  downloads?: boolean
  created_at?: boolean
  creator_id?: boolean
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}, ExtArgs["result"]["media"]>

export type MediaSelectScalar = {
  id?: boolean
  post_id?: boolean
  media_type?: boolean
  description?: boolean
  url?: boolean
  downloads?: boolean
  created_at?: boolean
  creator_id?: boolean
}

export type MediaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "post_id" | "media_type" | "description" | "url" | "downloads" | "created_at" | "creator_id", ExtArgs["result"]["media"]>
export type MediaInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}
export type MediaIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}
export type MediaIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}

export type $MediaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Media"
  objects: {
    post: Prisma.$PostPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    post_id: number
    media_type: $Enums.MediaType
    description: string | null
    url: string
    downloads: number
    created_at: Date
    creator_id: string
  }, ExtArgs["result"]["media"]>
  composites: {}
}

export type MediaGetPayload<S extends boolean | null | undefined | MediaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MediaPayload, S>

export type MediaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MediaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MediaCountAggregateInputType | true
  }

export interface MediaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Media'], meta: { name: 'Media' } }
  /**
   * Find zero or one Media that matches the filter.
   * @param {MediaFindUniqueArgs} args - Arguments to find a Media
   * @example
   * // Get one Media
   * const media = await prisma.media.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MediaFindUniqueArgs>(args: Prisma.SelectSubset<T, MediaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MediaClient<runtime.Types.Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Media that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MediaFindUniqueOrThrowArgs} args - Arguments to find a Media
   * @example
   * // Get one Media
   * const media = await prisma.media.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MediaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MediaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MediaClient<runtime.Types.Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Media that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaFindFirstArgs} args - Arguments to find a Media
   * @example
   * // Get one Media
   * const media = await prisma.media.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MediaFindFirstArgs>(args?: Prisma.SelectSubset<T, MediaFindFirstArgs<ExtArgs>>): Prisma.Prisma__MediaClient<runtime.Types.Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Media that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaFindFirstOrThrowArgs} args - Arguments to find a Media
   * @example
   * // Get one Media
   * const media = await prisma.media.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MediaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MediaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MediaClient<runtime.Types.Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Media that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Media
   * const media = await prisma.media.findMany()
   * 
   * // Get first 10 Media
   * const media = await prisma.media.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mediaWithIdOnly = await prisma.media.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MediaFindManyArgs>(args?: Prisma.SelectSubset<T, MediaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Media.
   * @param {MediaCreateArgs} args - Arguments to create a Media.
   * @example
   * // Create one Media
   * const Media = await prisma.media.create({
   *   data: {
   *     // ... data to create a Media
   *   }
   * })
   * 
   */
  create<T extends MediaCreateArgs>(args: Prisma.SelectSubset<T, MediaCreateArgs<ExtArgs>>): Prisma.Prisma__MediaClient<runtime.Types.Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Media.
   * @param {MediaCreateManyArgs} args - Arguments to create many Media.
   * @example
   * // Create many Media
   * const media = await prisma.media.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MediaCreateManyArgs>(args?: Prisma.SelectSubset<T, MediaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Media and returns the data saved in the database.
   * @param {MediaCreateManyAndReturnArgs} args - Arguments to create many Media.
   * @example
   * // Create many Media
   * const media = await prisma.media.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Media and only return the `id`
   * const mediaWithIdOnly = await prisma.media.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MediaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MediaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Media.
   * @param {MediaDeleteArgs} args - Arguments to delete one Media.
   * @example
   * // Delete one Media
   * const Media = await prisma.media.delete({
   *   where: {
   *     // ... filter to delete one Media
   *   }
   * })
   * 
   */
  delete<T extends MediaDeleteArgs>(args: Prisma.SelectSubset<T, MediaDeleteArgs<ExtArgs>>): Prisma.Prisma__MediaClient<runtime.Types.Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Media.
   * @param {MediaUpdateArgs} args - Arguments to update one Media.
   * @example
   * // Update one Media
   * const media = await prisma.media.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MediaUpdateArgs>(args: Prisma.SelectSubset<T, MediaUpdateArgs<ExtArgs>>): Prisma.Prisma__MediaClient<runtime.Types.Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Media.
   * @param {MediaDeleteManyArgs} args - Arguments to filter Media to delete.
   * @example
   * // Delete a few Media
   * const { count } = await prisma.media.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MediaDeleteManyArgs>(args?: Prisma.SelectSubset<T, MediaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Media.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Media
   * const media = await prisma.media.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MediaUpdateManyArgs>(args: Prisma.SelectSubset<T, MediaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Media and returns the data updated in the database.
   * @param {MediaUpdateManyAndReturnArgs} args - Arguments to update many Media.
   * @example
   * // Update many Media
   * const media = await prisma.media.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Media and only return the `id`
   * const mediaWithIdOnly = await prisma.media.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MediaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MediaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Media.
   * @param {MediaUpsertArgs} args - Arguments to update or create a Media.
   * @example
   * // Update or create a Media
   * const media = await prisma.media.upsert({
   *   create: {
   *     // ... data to create a Media
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Media we want to update
   *   }
   * })
   */
  upsert<T extends MediaUpsertArgs>(args: Prisma.SelectSubset<T, MediaUpsertArgs<ExtArgs>>): Prisma.Prisma__MediaClient<runtime.Types.Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Media.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaCountArgs} args - Arguments to filter Media to count.
   * @example
   * // Count the number of Media
   * const count = await prisma.media.count({
   *   where: {
   *     // ... the filter for the Media we want to count
   *   }
   * })
  **/
  count<T extends MediaCountArgs>(
    args?: Prisma.Subset<T, MediaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MediaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Media.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MediaAggregateArgs>(args: Prisma.Subset<T, MediaAggregateArgs>): Prisma.PrismaPromise<GetMediaAggregateType<T>>

  /**
   * Group by Media.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MediaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MediaGroupByArgs['orderBy'] }
      : { orderBy?: MediaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Media model
 */
readonly fields: MediaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Media.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MediaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  post<T extends Prisma.PostDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PostDefaultArgs<ExtArgs>>): Prisma.Prisma__PostClient<runtime.Types.Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Media model
 */
export interface MediaFieldRefs {
  readonly id: Prisma.FieldRef<"Media", 'Int'>
  readonly post_id: Prisma.FieldRef<"Media", 'Int'>
  readonly media_type: Prisma.FieldRef<"Media", 'MediaType'>
  readonly description: Prisma.FieldRef<"Media", 'String'>
  readonly url: Prisma.FieldRef<"Media", 'String'>
  readonly downloads: Prisma.FieldRef<"Media", 'Int'>
  readonly created_at: Prisma.FieldRef<"Media", 'DateTime'>
  readonly creator_id: Prisma.FieldRef<"Media", 'String'>
}
    

// Custom InputTypes
/**
 * Media findUnique
 */
export type MediaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Media
   */
  select?: Prisma.MediaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Media
   */
  omit?: Prisma.MediaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaInclude<ExtArgs> | null
  /**
   * Filter, which Media to fetch.
   */
  where: Prisma.MediaWhereUniqueInput
}

/**
 * Media findUniqueOrThrow
 */
export type MediaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Media
   */
  select?: Prisma.MediaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Media
   */
  omit?: Prisma.MediaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaInclude<ExtArgs> | null
  /**
   * Filter, which Media to fetch.
   */
  where: Prisma.MediaWhereUniqueInput
}

/**
 * Media findFirst
 */
export type MediaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Media
   */
  select?: Prisma.MediaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Media
   */
  omit?: Prisma.MediaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaInclude<ExtArgs> | null
  /**
   * Filter, which Media to fetch.
   */
  where?: Prisma.MediaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Media to fetch.
   */
  orderBy?: Prisma.MediaOrderByWithRelationInput | Prisma.MediaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Media.
   */
  cursor?: Prisma.MediaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Media from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Media.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Media.
   */
  distinct?: Prisma.MediaScalarFieldEnum | Prisma.MediaScalarFieldEnum[]
}

/**
 * Media findFirstOrThrow
 */
export type MediaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Media
   */
  select?: Prisma.MediaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Media
   */
  omit?: Prisma.MediaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaInclude<ExtArgs> | null
  /**
   * Filter, which Media to fetch.
   */
  where?: Prisma.MediaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Media to fetch.
   */
  orderBy?: Prisma.MediaOrderByWithRelationInput | Prisma.MediaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Media.
   */
  cursor?: Prisma.MediaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Media from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Media.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Media.
   */
  distinct?: Prisma.MediaScalarFieldEnum | Prisma.MediaScalarFieldEnum[]
}

/**
 * Media findMany
 */
export type MediaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Media
   */
  select?: Prisma.MediaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Media
   */
  omit?: Prisma.MediaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaInclude<ExtArgs> | null
  /**
   * Filter, which Media to fetch.
   */
  where?: Prisma.MediaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Media to fetch.
   */
  orderBy?: Prisma.MediaOrderByWithRelationInput | Prisma.MediaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Media.
   */
  cursor?: Prisma.MediaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Media from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Media.
   */
  skip?: number
  distinct?: Prisma.MediaScalarFieldEnum | Prisma.MediaScalarFieldEnum[]
}

/**
 * Media create
 */
export type MediaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Media
   */
  select?: Prisma.MediaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Media
   */
  omit?: Prisma.MediaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaInclude<ExtArgs> | null
  /**
   * The data needed to create a Media.
   */
  data: Prisma.XOR<Prisma.MediaCreateInput, Prisma.MediaUncheckedCreateInput>
}

/**
 * Media createMany
 */
export type MediaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Media.
   */
  data: Prisma.MediaCreateManyInput | Prisma.MediaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Media createManyAndReturn
 */
export type MediaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Media
   */
  select?: Prisma.MediaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Media
   */
  omit?: Prisma.MediaOmit<ExtArgs> | null
  /**
   * The data used to create many Media.
   */
  data: Prisma.MediaCreateManyInput | Prisma.MediaCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Media update
 */
export type MediaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Media
   */
  select?: Prisma.MediaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Media
   */
  omit?: Prisma.MediaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaInclude<ExtArgs> | null
  /**
   * The data needed to update a Media.
   */
  data: Prisma.XOR<Prisma.MediaUpdateInput, Prisma.MediaUncheckedUpdateInput>
  /**
   * Choose, which Media to update.
   */
  where: Prisma.MediaWhereUniqueInput
}

/**
 * Media updateMany
 */
export type MediaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Media.
   */
  data: Prisma.XOR<Prisma.MediaUpdateManyMutationInput, Prisma.MediaUncheckedUpdateManyInput>
  /**
   * Filter which Media to update
   */
  where?: Prisma.MediaWhereInput
  /**
   * Limit how many Media to update.
   */
  limit?: number
}

/**
 * Media updateManyAndReturn
 */
export type MediaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Media
   */
  select?: Prisma.MediaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Media
   */
  omit?: Prisma.MediaOmit<ExtArgs> | null
  /**
   * The data used to update Media.
   */
  data: Prisma.XOR<Prisma.MediaUpdateManyMutationInput, Prisma.MediaUncheckedUpdateManyInput>
  /**
   * Filter which Media to update
   */
  where?: Prisma.MediaWhereInput
  /**
   * Limit how many Media to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Media upsert
 */
export type MediaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Media
   */
  select?: Prisma.MediaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Media
   */
  omit?: Prisma.MediaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaInclude<ExtArgs> | null
  /**
   * The filter to search for the Media to update in case it exists.
   */
  where: Prisma.MediaWhereUniqueInput
  /**
   * In case the Media found by the `where` argument doesn't exist, create a new Media with this data.
   */
  create: Prisma.XOR<Prisma.MediaCreateInput, Prisma.MediaUncheckedCreateInput>
  /**
   * In case the Media was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MediaUpdateInput, Prisma.MediaUncheckedUpdateInput>
}

/**
 * Media delete
 */
export type MediaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Media
   */
  select?: Prisma.MediaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Media
   */
  omit?: Prisma.MediaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaInclude<ExtArgs> | null
  /**
   * Filter which Media to delete.
   */
  where: Prisma.MediaWhereUniqueInput
}

/**
 * Media deleteMany
 */
export type MediaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Media to delete
   */
  where?: Prisma.MediaWhereInput
  /**
   * Limit how many Media to delete.
   */
  limit?: number
}

/**
 * Media without action
 */
export type MediaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Media
   */
  select?: Prisma.MediaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Media
   */
  omit?: Prisma.MediaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaInclude<ExtArgs> | null
}
