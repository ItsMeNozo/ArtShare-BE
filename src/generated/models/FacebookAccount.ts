
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FacebookAccount` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FacebookAccount
 * 
 */
export type FacebookAccountModel = runtime.Types.Result.DefaultSelection<Prisma.$FacebookAccountPayload>

export type AggregateFacebookAccount = {
  _count: FacebookAccountCountAggregateOutputType | null
  _avg: FacebookAccountAvgAggregateOutputType | null
  _sum: FacebookAccountSumAggregateOutputType | null
  _min: FacebookAccountMinAggregateOutputType | null
  _max: FacebookAccountMaxAggregateOutputType | null
}

export type FacebookAccountAvgAggregateOutputType = {
  id: number | null
}

export type FacebookAccountSumAggregateOutputType = {
  id: number | null
}

export type FacebookAccountMinAggregateOutputType = {
  id: number | null
  user_id: string | null
  facebook_user_id: string | null
  name: string | null
  picture_url: string | null
  long_lived_user_access_token: string | null
  token_expires_at: Date | null
  created_at: Date | null
  updated_at: Date | null
}

export type FacebookAccountMaxAggregateOutputType = {
  id: number | null
  user_id: string | null
  facebook_user_id: string | null
  name: string | null
  picture_url: string | null
  long_lived_user_access_token: string | null
  token_expires_at: Date | null
  created_at: Date | null
  updated_at: Date | null
}

export type FacebookAccountCountAggregateOutputType = {
  id: number
  user_id: number
  facebook_user_id: number
  name: number
  picture_url: number
  long_lived_user_access_token: number
  token_expires_at: number
  created_at: number
  updated_at: number
  _all: number
}


export type FacebookAccountAvgAggregateInputType = {
  id?: true
}

export type FacebookAccountSumAggregateInputType = {
  id?: true
}

export type FacebookAccountMinAggregateInputType = {
  id?: true
  user_id?: true
  facebook_user_id?: true
  name?: true
  picture_url?: true
  long_lived_user_access_token?: true
  token_expires_at?: true
  created_at?: true
  updated_at?: true
}

export type FacebookAccountMaxAggregateInputType = {
  id?: true
  user_id?: true
  facebook_user_id?: true
  name?: true
  picture_url?: true
  long_lived_user_access_token?: true
  token_expires_at?: true
  created_at?: true
  updated_at?: true
}

export type FacebookAccountCountAggregateInputType = {
  id?: true
  user_id?: true
  facebook_user_id?: true
  name?: true
  picture_url?: true
  long_lived_user_access_token?: true
  token_expires_at?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type FacebookAccountAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FacebookAccount to aggregate.
   */
  where?: Prisma.FacebookAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FacebookAccounts to fetch.
   */
  orderBy?: Prisma.FacebookAccountOrderByWithRelationInput | Prisma.FacebookAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FacebookAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FacebookAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FacebookAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FacebookAccounts
  **/
  _count?: true | FacebookAccountCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FacebookAccountAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FacebookAccountSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FacebookAccountMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FacebookAccountMaxAggregateInputType
}

export type GetFacebookAccountAggregateType<T extends FacebookAccountAggregateArgs> = {
      [P in keyof T & keyof AggregateFacebookAccount]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFacebookAccount[P]>
    : Prisma.GetScalarType<T[P], AggregateFacebookAccount[P]>
}




export type FacebookAccountGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FacebookAccountWhereInput
  orderBy?: Prisma.FacebookAccountOrderByWithAggregationInput | Prisma.FacebookAccountOrderByWithAggregationInput[]
  by: Prisma.FacebookAccountScalarFieldEnum[] | Prisma.FacebookAccountScalarFieldEnum
  having?: Prisma.FacebookAccountScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FacebookAccountCountAggregateInputType | true
  _avg?: FacebookAccountAvgAggregateInputType
  _sum?: FacebookAccountSumAggregateInputType
  _min?: FacebookAccountMinAggregateInputType
  _max?: FacebookAccountMaxAggregateInputType
}

export type FacebookAccountGroupByOutputType = {
  id: number
  user_id: string
  facebook_user_id: string
  name: string
  picture_url: string | null
  long_lived_user_access_token: string
  token_expires_at: Date | null
  created_at: Date
  updated_at: Date
  _count: FacebookAccountCountAggregateOutputType | null
  _avg: FacebookAccountAvgAggregateOutputType | null
  _sum: FacebookAccountSumAggregateOutputType | null
  _min: FacebookAccountMinAggregateOutputType | null
  _max: FacebookAccountMaxAggregateOutputType | null
}

type GetFacebookAccountGroupByPayload<T extends FacebookAccountGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FacebookAccountGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FacebookAccountGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FacebookAccountGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FacebookAccountGroupByOutputType[P]>
      }
    >
  > 



export type FacebookAccountWhereInput = {
  AND?: Prisma.FacebookAccountWhereInput | Prisma.FacebookAccountWhereInput[]
  OR?: Prisma.FacebookAccountWhereInput[]
  NOT?: Prisma.FacebookAccountWhereInput | Prisma.FacebookAccountWhereInput[]
  id?: Prisma.IntFilter<"FacebookAccount"> | number
  user_id?: Prisma.StringFilter<"FacebookAccount"> | string
  facebook_user_id?: Prisma.StringFilter<"FacebookAccount"> | string
  name?: Prisma.StringFilter<"FacebookAccount"> | string
  picture_url?: Prisma.StringNullableFilter<"FacebookAccount"> | string | null
  long_lived_user_access_token?: Prisma.StringFilter<"FacebookAccount"> | string
  token_expires_at?: Prisma.DateTimeNullableFilter<"FacebookAccount"> | Date | string | null
  created_at?: Prisma.DateTimeFilter<"FacebookAccount"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"FacebookAccount"> | Date | string
  platforms?: Prisma.PlatformListRelationFilter
}

export type FacebookAccountOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  facebook_user_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  picture_url?: Prisma.SortOrderInput | Prisma.SortOrder
  long_lived_user_access_token?: Prisma.SortOrder
  token_expires_at?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  platforms?: Prisma.PlatformOrderByRelationAggregateInput
}

export type FacebookAccountWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  facebook_user_id?: string
  AND?: Prisma.FacebookAccountWhereInput | Prisma.FacebookAccountWhereInput[]
  OR?: Prisma.FacebookAccountWhereInput[]
  NOT?: Prisma.FacebookAccountWhereInput | Prisma.FacebookAccountWhereInput[]
  user_id?: Prisma.StringFilter<"FacebookAccount"> | string
  name?: Prisma.StringFilter<"FacebookAccount"> | string
  picture_url?: Prisma.StringNullableFilter<"FacebookAccount"> | string | null
  long_lived_user_access_token?: Prisma.StringFilter<"FacebookAccount"> | string
  token_expires_at?: Prisma.DateTimeNullableFilter<"FacebookAccount"> | Date | string | null
  created_at?: Prisma.DateTimeFilter<"FacebookAccount"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"FacebookAccount"> | Date | string
  platforms?: Prisma.PlatformListRelationFilter
}, "id" | "facebook_user_id">

export type FacebookAccountOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  facebook_user_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  picture_url?: Prisma.SortOrderInput | Prisma.SortOrder
  long_lived_user_access_token?: Prisma.SortOrder
  token_expires_at?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  _count?: Prisma.FacebookAccountCountOrderByAggregateInput
  _avg?: Prisma.FacebookAccountAvgOrderByAggregateInput
  _max?: Prisma.FacebookAccountMaxOrderByAggregateInput
  _min?: Prisma.FacebookAccountMinOrderByAggregateInput
  _sum?: Prisma.FacebookAccountSumOrderByAggregateInput
}

export type FacebookAccountScalarWhereWithAggregatesInput = {
  AND?: Prisma.FacebookAccountScalarWhereWithAggregatesInput | Prisma.FacebookAccountScalarWhereWithAggregatesInput[]
  OR?: Prisma.FacebookAccountScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FacebookAccountScalarWhereWithAggregatesInput | Prisma.FacebookAccountScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"FacebookAccount"> | number
  user_id?: Prisma.StringWithAggregatesFilter<"FacebookAccount"> | string
  facebook_user_id?: Prisma.StringWithAggregatesFilter<"FacebookAccount"> | string
  name?: Prisma.StringWithAggregatesFilter<"FacebookAccount"> | string
  picture_url?: Prisma.StringNullableWithAggregatesFilter<"FacebookAccount"> | string | null
  long_lived_user_access_token?: Prisma.StringWithAggregatesFilter<"FacebookAccount"> | string
  token_expires_at?: Prisma.DateTimeNullableWithAggregatesFilter<"FacebookAccount"> | Date | string | null
  created_at?: Prisma.DateTimeWithAggregatesFilter<"FacebookAccount"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"FacebookAccount"> | Date | string
}

export type FacebookAccountCreateInput = {
  user_id: string
  facebook_user_id: string
  name: string
  picture_url?: string | null
  long_lived_user_access_token: string
  token_expires_at?: Date | string | null
  created_at?: Date | string
  updated_at?: Date | string
  platforms?: Prisma.PlatformCreateNestedManyWithoutFacebookAccountInput
}

export type FacebookAccountUncheckedCreateInput = {
  id?: number
  user_id: string
  facebook_user_id: string
  name: string
  picture_url?: string | null
  long_lived_user_access_token: string
  token_expires_at?: Date | string | null
  created_at?: Date | string
  updated_at?: Date | string
  platforms?: Prisma.PlatformUncheckedCreateNestedManyWithoutFacebookAccountInput
}

export type FacebookAccountUpdateInput = {
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  facebook_user_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  picture_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  long_lived_user_access_token?: Prisma.StringFieldUpdateOperationsInput | string
  token_expires_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  platforms?: Prisma.PlatformUpdateManyWithoutFacebookAccountNestedInput
}

export type FacebookAccountUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  facebook_user_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  picture_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  long_lived_user_access_token?: Prisma.StringFieldUpdateOperationsInput | string
  token_expires_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  platforms?: Prisma.PlatformUncheckedUpdateManyWithoutFacebookAccountNestedInput
}

export type FacebookAccountCreateManyInput = {
  id?: number
  user_id: string
  facebook_user_id: string
  name: string
  picture_url?: string | null
  long_lived_user_access_token: string
  token_expires_at?: Date | string | null
  created_at?: Date | string
  updated_at?: Date | string
}

export type FacebookAccountUpdateManyMutationInput = {
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  facebook_user_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  picture_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  long_lived_user_access_token?: Prisma.StringFieldUpdateOperationsInput | string
  token_expires_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FacebookAccountUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  facebook_user_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  picture_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  long_lived_user_access_token?: Prisma.StringFieldUpdateOperationsInput | string
  token_expires_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FacebookAccountNullableScalarRelationFilter = {
  is?: Prisma.FacebookAccountWhereInput | null
  isNot?: Prisma.FacebookAccountWhereInput | null
}

export type FacebookAccountCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  facebook_user_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  picture_url?: Prisma.SortOrder
  long_lived_user_access_token?: Prisma.SortOrder
  token_expires_at?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type FacebookAccountAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type FacebookAccountMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  facebook_user_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  picture_url?: Prisma.SortOrder
  long_lived_user_access_token?: Prisma.SortOrder
  token_expires_at?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type FacebookAccountMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  facebook_user_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  picture_url?: Prisma.SortOrder
  long_lived_user_access_token?: Prisma.SortOrder
  token_expires_at?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type FacebookAccountSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type FacebookAccountCreateNestedOneWithoutPlatformsInput = {
  create?: Prisma.XOR<Prisma.FacebookAccountCreateWithoutPlatformsInput, Prisma.FacebookAccountUncheckedCreateWithoutPlatformsInput>
  connectOrCreate?: Prisma.FacebookAccountCreateOrConnectWithoutPlatformsInput
  connect?: Prisma.FacebookAccountWhereUniqueInput
}

export type FacebookAccountUpdateOneWithoutPlatformsNestedInput = {
  create?: Prisma.XOR<Prisma.FacebookAccountCreateWithoutPlatformsInput, Prisma.FacebookAccountUncheckedCreateWithoutPlatformsInput>
  connectOrCreate?: Prisma.FacebookAccountCreateOrConnectWithoutPlatformsInput
  upsert?: Prisma.FacebookAccountUpsertWithoutPlatformsInput
  disconnect?: Prisma.FacebookAccountWhereInput | boolean
  delete?: Prisma.FacebookAccountWhereInput | boolean
  connect?: Prisma.FacebookAccountWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FacebookAccountUpdateToOneWithWhereWithoutPlatformsInput, Prisma.FacebookAccountUpdateWithoutPlatformsInput>, Prisma.FacebookAccountUncheckedUpdateWithoutPlatformsInput>
}

export type FacebookAccountCreateWithoutPlatformsInput = {
  user_id: string
  facebook_user_id: string
  name: string
  picture_url?: string | null
  long_lived_user_access_token: string
  token_expires_at?: Date | string | null
  created_at?: Date | string
  updated_at?: Date | string
}

export type FacebookAccountUncheckedCreateWithoutPlatformsInput = {
  id?: number
  user_id: string
  facebook_user_id: string
  name: string
  picture_url?: string | null
  long_lived_user_access_token: string
  token_expires_at?: Date | string | null
  created_at?: Date | string
  updated_at?: Date | string
}

export type FacebookAccountCreateOrConnectWithoutPlatformsInput = {
  where: Prisma.FacebookAccountWhereUniqueInput
  create: Prisma.XOR<Prisma.FacebookAccountCreateWithoutPlatformsInput, Prisma.FacebookAccountUncheckedCreateWithoutPlatformsInput>
}

export type FacebookAccountUpsertWithoutPlatformsInput = {
  update: Prisma.XOR<Prisma.FacebookAccountUpdateWithoutPlatformsInput, Prisma.FacebookAccountUncheckedUpdateWithoutPlatformsInput>
  create: Prisma.XOR<Prisma.FacebookAccountCreateWithoutPlatformsInput, Prisma.FacebookAccountUncheckedCreateWithoutPlatformsInput>
  where?: Prisma.FacebookAccountWhereInput
}

export type FacebookAccountUpdateToOneWithWhereWithoutPlatformsInput = {
  where?: Prisma.FacebookAccountWhereInput
  data: Prisma.XOR<Prisma.FacebookAccountUpdateWithoutPlatformsInput, Prisma.FacebookAccountUncheckedUpdateWithoutPlatformsInput>
}

export type FacebookAccountUpdateWithoutPlatformsInput = {
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  facebook_user_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  picture_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  long_lived_user_access_token?: Prisma.StringFieldUpdateOperationsInput | string
  token_expires_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FacebookAccountUncheckedUpdateWithoutPlatformsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  facebook_user_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  picture_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  long_lived_user_access_token?: Prisma.StringFieldUpdateOperationsInput | string
  token_expires_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type FacebookAccountCountOutputType
 */

export type FacebookAccountCountOutputType = {
  platforms: number
}

export type FacebookAccountCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  platforms?: boolean | FacebookAccountCountOutputTypeCountPlatformsArgs
}

/**
 * FacebookAccountCountOutputType without action
 */
export type FacebookAccountCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacebookAccountCountOutputType
   */
  select?: Prisma.FacebookAccountCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FacebookAccountCountOutputType without action
 */
export type FacebookAccountCountOutputTypeCountPlatformsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlatformWhereInput
}


export type FacebookAccountSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  facebook_user_id?: boolean
  name?: boolean
  picture_url?: boolean
  long_lived_user_access_token?: boolean
  token_expires_at?: boolean
  created_at?: boolean
  updated_at?: boolean
  platforms?: boolean | Prisma.FacebookAccount$platformsArgs<ExtArgs>
  _count?: boolean | Prisma.FacebookAccountCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["facebookAccount"]>

export type FacebookAccountSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  facebook_user_id?: boolean
  name?: boolean
  picture_url?: boolean
  long_lived_user_access_token?: boolean
  token_expires_at?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["facebookAccount"]>

export type FacebookAccountSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  facebook_user_id?: boolean
  name?: boolean
  picture_url?: boolean
  long_lived_user_access_token?: boolean
  token_expires_at?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["facebookAccount"]>

export type FacebookAccountSelectScalar = {
  id?: boolean
  user_id?: boolean
  facebook_user_id?: boolean
  name?: boolean
  picture_url?: boolean
  long_lived_user_access_token?: boolean
  token_expires_at?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type FacebookAccountOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "user_id" | "facebook_user_id" | "name" | "picture_url" | "long_lived_user_access_token" | "token_expires_at" | "created_at" | "updated_at", ExtArgs["result"]["facebookAccount"]>
export type FacebookAccountInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  platforms?: boolean | Prisma.FacebookAccount$platformsArgs<ExtArgs>
  _count?: boolean | Prisma.FacebookAccountCountOutputTypeDefaultArgs<ExtArgs>
}
export type FacebookAccountIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type FacebookAccountIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $FacebookAccountPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FacebookAccount"
  objects: {
    platforms: Prisma.$PlatformPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    user_id: string
    facebook_user_id: string
    name: string
    picture_url: string | null
    long_lived_user_access_token: string
    token_expires_at: Date | null
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["facebookAccount"]>
  composites: {}
}

export type FacebookAccountGetPayload<S extends boolean | null | undefined | FacebookAccountDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FacebookAccountPayload, S>

export type FacebookAccountCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FacebookAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FacebookAccountCountAggregateInputType | true
  }

export interface FacebookAccountDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FacebookAccount'], meta: { name: 'FacebookAccount' } }
  /**
   * Find zero or one FacebookAccount that matches the filter.
   * @param {FacebookAccountFindUniqueArgs} args - Arguments to find a FacebookAccount
   * @example
   * // Get one FacebookAccount
   * const facebookAccount = await prisma.facebookAccount.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FacebookAccountFindUniqueArgs>(args: Prisma.SelectSubset<T, FacebookAccountFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FacebookAccountClient<runtime.Types.Result.GetResult<Prisma.$FacebookAccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FacebookAccount that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FacebookAccountFindUniqueOrThrowArgs} args - Arguments to find a FacebookAccount
   * @example
   * // Get one FacebookAccount
   * const facebookAccount = await prisma.facebookAccount.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FacebookAccountFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FacebookAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FacebookAccountClient<runtime.Types.Result.GetResult<Prisma.$FacebookAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FacebookAccount that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacebookAccountFindFirstArgs} args - Arguments to find a FacebookAccount
   * @example
   * // Get one FacebookAccount
   * const facebookAccount = await prisma.facebookAccount.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FacebookAccountFindFirstArgs>(args?: Prisma.SelectSubset<T, FacebookAccountFindFirstArgs<ExtArgs>>): Prisma.Prisma__FacebookAccountClient<runtime.Types.Result.GetResult<Prisma.$FacebookAccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FacebookAccount that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacebookAccountFindFirstOrThrowArgs} args - Arguments to find a FacebookAccount
   * @example
   * // Get one FacebookAccount
   * const facebookAccount = await prisma.facebookAccount.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FacebookAccountFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FacebookAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FacebookAccountClient<runtime.Types.Result.GetResult<Prisma.$FacebookAccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FacebookAccounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacebookAccountFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FacebookAccounts
   * const facebookAccounts = await prisma.facebookAccount.findMany()
   * 
   * // Get first 10 FacebookAccounts
   * const facebookAccounts = await prisma.facebookAccount.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const facebookAccountWithIdOnly = await prisma.facebookAccount.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FacebookAccountFindManyArgs>(args?: Prisma.SelectSubset<T, FacebookAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FacebookAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FacebookAccount.
   * @param {FacebookAccountCreateArgs} args - Arguments to create a FacebookAccount.
   * @example
   * // Create one FacebookAccount
   * const FacebookAccount = await prisma.facebookAccount.create({
   *   data: {
   *     // ... data to create a FacebookAccount
   *   }
   * })
   * 
   */
  create<T extends FacebookAccountCreateArgs>(args: Prisma.SelectSubset<T, FacebookAccountCreateArgs<ExtArgs>>): Prisma.Prisma__FacebookAccountClient<runtime.Types.Result.GetResult<Prisma.$FacebookAccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FacebookAccounts.
   * @param {FacebookAccountCreateManyArgs} args - Arguments to create many FacebookAccounts.
   * @example
   * // Create many FacebookAccounts
   * const facebookAccount = await prisma.facebookAccount.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FacebookAccountCreateManyArgs>(args?: Prisma.SelectSubset<T, FacebookAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FacebookAccounts and returns the data saved in the database.
   * @param {FacebookAccountCreateManyAndReturnArgs} args - Arguments to create many FacebookAccounts.
   * @example
   * // Create many FacebookAccounts
   * const facebookAccount = await prisma.facebookAccount.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FacebookAccounts and only return the `id`
   * const facebookAccountWithIdOnly = await prisma.facebookAccount.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FacebookAccountCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FacebookAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FacebookAccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FacebookAccount.
   * @param {FacebookAccountDeleteArgs} args - Arguments to delete one FacebookAccount.
   * @example
   * // Delete one FacebookAccount
   * const FacebookAccount = await prisma.facebookAccount.delete({
   *   where: {
   *     // ... filter to delete one FacebookAccount
   *   }
   * })
   * 
   */
  delete<T extends FacebookAccountDeleteArgs>(args: Prisma.SelectSubset<T, FacebookAccountDeleteArgs<ExtArgs>>): Prisma.Prisma__FacebookAccountClient<runtime.Types.Result.GetResult<Prisma.$FacebookAccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FacebookAccount.
   * @param {FacebookAccountUpdateArgs} args - Arguments to update one FacebookAccount.
   * @example
   * // Update one FacebookAccount
   * const facebookAccount = await prisma.facebookAccount.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FacebookAccountUpdateArgs>(args: Prisma.SelectSubset<T, FacebookAccountUpdateArgs<ExtArgs>>): Prisma.Prisma__FacebookAccountClient<runtime.Types.Result.GetResult<Prisma.$FacebookAccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FacebookAccounts.
   * @param {FacebookAccountDeleteManyArgs} args - Arguments to filter FacebookAccounts to delete.
   * @example
   * // Delete a few FacebookAccounts
   * const { count } = await prisma.facebookAccount.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FacebookAccountDeleteManyArgs>(args?: Prisma.SelectSubset<T, FacebookAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FacebookAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacebookAccountUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FacebookAccounts
   * const facebookAccount = await prisma.facebookAccount.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FacebookAccountUpdateManyArgs>(args: Prisma.SelectSubset<T, FacebookAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FacebookAccounts and returns the data updated in the database.
   * @param {FacebookAccountUpdateManyAndReturnArgs} args - Arguments to update many FacebookAccounts.
   * @example
   * // Update many FacebookAccounts
   * const facebookAccount = await prisma.facebookAccount.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FacebookAccounts and only return the `id`
   * const facebookAccountWithIdOnly = await prisma.facebookAccount.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FacebookAccountUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FacebookAccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FacebookAccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FacebookAccount.
   * @param {FacebookAccountUpsertArgs} args - Arguments to update or create a FacebookAccount.
   * @example
   * // Update or create a FacebookAccount
   * const facebookAccount = await prisma.facebookAccount.upsert({
   *   create: {
   *     // ... data to create a FacebookAccount
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FacebookAccount we want to update
   *   }
   * })
   */
  upsert<T extends FacebookAccountUpsertArgs>(args: Prisma.SelectSubset<T, FacebookAccountUpsertArgs<ExtArgs>>): Prisma.Prisma__FacebookAccountClient<runtime.Types.Result.GetResult<Prisma.$FacebookAccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FacebookAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacebookAccountCountArgs} args - Arguments to filter FacebookAccounts to count.
   * @example
   * // Count the number of FacebookAccounts
   * const count = await prisma.facebookAccount.count({
   *   where: {
   *     // ... the filter for the FacebookAccounts we want to count
   *   }
   * })
  **/
  count<T extends FacebookAccountCountArgs>(
    args?: Prisma.Subset<T, FacebookAccountCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FacebookAccountCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FacebookAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacebookAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FacebookAccountAggregateArgs>(args: Prisma.Subset<T, FacebookAccountAggregateArgs>): Prisma.PrismaPromise<GetFacebookAccountAggregateType<T>>

  /**
   * Group by FacebookAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacebookAccountGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FacebookAccountGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FacebookAccountGroupByArgs['orderBy'] }
      : { orderBy?: FacebookAccountGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FacebookAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FacebookAccount model
 */
readonly fields: FacebookAccountFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FacebookAccount.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FacebookAccountClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  platforms<T extends Prisma.FacebookAccount$platformsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FacebookAccount$platformsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FacebookAccount model
 */
export interface FacebookAccountFieldRefs {
  readonly id: Prisma.FieldRef<"FacebookAccount", 'Int'>
  readonly user_id: Prisma.FieldRef<"FacebookAccount", 'String'>
  readonly facebook_user_id: Prisma.FieldRef<"FacebookAccount", 'String'>
  readonly name: Prisma.FieldRef<"FacebookAccount", 'String'>
  readonly picture_url: Prisma.FieldRef<"FacebookAccount", 'String'>
  readonly long_lived_user_access_token: Prisma.FieldRef<"FacebookAccount", 'String'>
  readonly token_expires_at: Prisma.FieldRef<"FacebookAccount", 'DateTime'>
  readonly created_at: Prisma.FieldRef<"FacebookAccount", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"FacebookAccount", 'DateTime'>
}
    

// Custom InputTypes
/**
 * FacebookAccount findUnique
 */
export type FacebookAccountFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacebookAccount
   */
  select?: Prisma.FacebookAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacebookAccount
   */
  omit?: Prisma.FacebookAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacebookAccountInclude<ExtArgs> | null
  /**
   * Filter, which FacebookAccount to fetch.
   */
  where: Prisma.FacebookAccountWhereUniqueInput
}

/**
 * FacebookAccount findUniqueOrThrow
 */
export type FacebookAccountFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacebookAccount
   */
  select?: Prisma.FacebookAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacebookAccount
   */
  omit?: Prisma.FacebookAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacebookAccountInclude<ExtArgs> | null
  /**
   * Filter, which FacebookAccount to fetch.
   */
  where: Prisma.FacebookAccountWhereUniqueInput
}

/**
 * FacebookAccount findFirst
 */
export type FacebookAccountFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacebookAccount
   */
  select?: Prisma.FacebookAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacebookAccount
   */
  omit?: Prisma.FacebookAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacebookAccountInclude<ExtArgs> | null
  /**
   * Filter, which FacebookAccount to fetch.
   */
  where?: Prisma.FacebookAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FacebookAccounts to fetch.
   */
  orderBy?: Prisma.FacebookAccountOrderByWithRelationInput | Prisma.FacebookAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FacebookAccounts.
   */
  cursor?: Prisma.FacebookAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FacebookAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FacebookAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FacebookAccounts.
   */
  distinct?: Prisma.FacebookAccountScalarFieldEnum | Prisma.FacebookAccountScalarFieldEnum[]
}

/**
 * FacebookAccount findFirstOrThrow
 */
export type FacebookAccountFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacebookAccount
   */
  select?: Prisma.FacebookAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacebookAccount
   */
  omit?: Prisma.FacebookAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacebookAccountInclude<ExtArgs> | null
  /**
   * Filter, which FacebookAccount to fetch.
   */
  where?: Prisma.FacebookAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FacebookAccounts to fetch.
   */
  orderBy?: Prisma.FacebookAccountOrderByWithRelationInput | Prisma.FacebookAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FacebookAccounts.
   */
  cursor?: Prisma.FacebookAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FacebookAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FacebookAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FacebookAccounts.
   */
  distinct?: Prisma.FacebookAccountScalarFieldEnum | Prisma.FacebookAccountScalarFieldEnum[]
}

/**
 * FacebookAccount findMany
 */
export type FacebookAccountFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacebookAccount
   */
  select?: Prisma.FacebookAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacebookAccount
   */
  omit?: Prisma.FacebookAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacebookAccountInclude<ExtArgs> | null
  /**
   * Filter, which FacebookAccounts to fetch.
   */
  where?: Prisma.FacebookAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FacebookAccounts to fetch.
   */
  orderBy?: Prisma.FacebookAccountOrderByWithRelationInput | Prisma.FacebookAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FacebookAccounts.
   */
  cursor?: Prisma.FacebookAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FacebookAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FacebookAccounts.
   */
  skip?: number
  distinct?: Prisma.FacebookAccountScalarFieldEnum | Prisma.FacebookAccountScalarFieldEnum[]
}

/**
 * FacebookAccount create
 */
export type FacebookAccountCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacebookAccount
   */
  select?: Prisma.FacebookAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacebookAccount
   */
  omit?: Prisma.FacebookAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacebookAccountInclude<ExtArgs> | null
  /**
   * The data needed to create a FacebookAccount.
   */
  data: Prisma.XOR<Prisma.FacebookAccountCreateInput, Prisma.FacebookAccountUncheckedCreateInput>
}

/**
 * FacebookAccount createMany
 */
export type FacebookAccountCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FacebookAccounts.
   */
  data: Prisma.FacebookAccountCreateManyInput | Prisma.FacebookAccountCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FacebookAccount createManyAndReturn
 */
export type FacebookAccountCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacebookAccount
   */
  select?: Prisma.FacebookAccountSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FacebookAccount
   */
  omit?: Prisma.FacebookAccountOmit<ExtArgs> | null
  /**
   * The data used to create many FacebookAccounts.
   */
  data: Prisma.FacebookAccountCreateManyInput | Prisma.FacebookAccountCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FacebookAccount update
 */
export type FacebookAccountUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacebookAccount
   */
  select?: Prisma.FacebookAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacebookAccount
   */
  omit?: Prisma.FacebookAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacebookAccountInclude<ExtArgs> | null
  /**
   * The data needed to update a FacebookAccount.
   */
  data: Prisma.XOR<Prisma.FacebookAccountUpdateInput, Prisma.FacebookAccountUncheckedUpdateInput>
  /**
   * Choose, which FacebookAccount to update.
   */
  where: Prisma.FacebookAccountWhereUniqueInput
}

/**
 * FacebookAccount updateMany
 */
export type FacebookAccountUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FacebookAccounts.
   */
  data: Prisma.XOR<Prisma.FacebookAccountUpdateManyMutationInput, Prisma.FacebookAccountUncheckedUpdateManyInput>
  /**
   * Filter which FacebookAccounts to update
   */
  where?: Prisma.FacebookAccountWhereInput
  /**
   * Limit how many FacebookAccounts to update.
   */
  limit?: number
}

/**
 * FacebookAccount updateManyAndReturn
 */
export type FacebookAccountUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacebookAccount
   */
  select?: Prisma.FacebookAccountSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FacebookAccount
   */
  omit?: Prisma.FacebookAccountOmit<ExtArgs> | null
  /**
   * The data used to update FacebookAccounts.
   */
  data: Prisma.XOR<Prisma.FacebookAccountUpdateManyMutationInput, Prisma.FacebookAccountUncheckedUpdateManyInput>
  /**
   * Filter which FacebookAccounts to update
   */
  where?: Prisma.FacebookAccountWhereInput
  /**
   * Limit how many FacebookAccounts to update.
   */
  limit?: number
}

/**
 * FacebookAccount upsert
 */
export type FacebookAccountUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacebookAccount
   */
  select?: Prisma.FacebookAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacebookAccount
   */
  omit?: Prisma.FacebookAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacebookAccountInclude<ExtArgs> | null
  /**
   * The filter to search for the FacebookAccount to update in case it exists.
   */
  where: Prisma.FacebookAccountWhereUniqueInput
  /**
   * In case the FacebookAccount found by the `where` argument doesn't exist, create a new FacebookAccount with this data.
   */
  create: Prisma.XOR<Prisma.FacebookAccountCreateInput, Prisma.FacebookAccountUncheckedCreateInput>
  /**
   * In case the FacebookAccount was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FacebookAccountUpdateInput, Prisma.FacebookAccountUncheckedUpdateInput>
}

/**
 * FacebookAccount delete
 */
export type FacebookAccountDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacebookAccount
   */
  select?: Prisma.FacebookAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacebookAccount
   */
  omit?: Prisma.FacebookAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacebookAccountInclude<ExtArgs> | null
  /**
   * Filter which FacebookAccount to delete.
   */
  where: Prisma.FacebookAccountWhereUniqueInput
}

/**
 * FacebookAccount deleteMany
 */
export type FacebookAccountDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FacebookAccounts to delete
   */
  where?: Prisma.FacebookAccountWhereInput
  /**
   * Limit how many FacebookAccounts to delete.
   */
  limit?: number
}

/**
 * FacebookAccount.platforms
 */
export type FacebookAccount$platformsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Platform
   */
  select?: Prisma.PlatformSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Platform
   */
  omit?: Prisma.PlatformOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlatformInclude<ExtArgs> | null
  where?: Prisma.PlatformWhereInput
  orderBy?: Prisma.PlatformOrderByWithRelationInput | Prisma.PlatformOrderByWithRelationInput[]
  cursor?: Prisma.PlatformWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PlatformScalarFieldEnum | Prisma.PlatformScalarFieldEnum[]
}

/**
 * FacebookAccount without action
 */
export type FacebookAccountDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacebookAccount
   */
  select?: Prisma.FacebookAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacebookAccount
   */
  omit?: Prisma.FacebookAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacebookAccountInclude<ExtArgs> | null
}
