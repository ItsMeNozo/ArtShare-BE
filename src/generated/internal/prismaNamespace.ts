
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models.js"
import { type PrismaClient } from "./class.js"

export type * from '../models.js'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
export const prismaVersion: PrismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  Role: 'Role',
  UserRole: 'UserRole',
  User: 'User',
  Post: 'Post',
  Blog: 'Blog',
  Media: 'Media',
  Category: 'Category',
  Like: 'Like',
  CommentLike: 'CommentLike',
  Comment: 'Comment',
  Share: 'Share',
  Follow: 'Follow',
  Bookmark: 'Bookmark',
  Rating: 'Rating',
  Collection: 'Collection',
  Report: 'Report',
  UserAccess: 'UserAccess',
  Plan: 'Plan',
  UserUsage: 'UserUsage',
  ArtGeneration: 'ArtGeneration',
  TrendingPrompt: 'TrendingPrompt',
  Notification: 'Notification',
  Platform: 'Platform',
  AutoProject: 'AutoProject',
  AutoPost: 'AutoPost',
  Conversation: 'Conversation',
  Message: 'Message',
  FacebookAccount: 'FacebookAccount'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "role" | "userRole" | "user" | "post" | "blog" | "media" | "category" | "like" | "commentLike" | "comment" | "share" | "follow" | "bookmark" | "rating" | "collection" | "report" | "userAccess" | "plan" | "userUsage" | "artGeneration" | "trendingPrompt" | "notification" | "platform" | "autoProject" | "autoPost" | "conversation" | "message" | "facebookAccount"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    Role: {
      payload: Prisma.$RolePayload<ExtArgs>
      fields: Prisma.RoleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RoleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        findFirst: {
          args: Prisma.RoleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        findMany: {
          args: Prisma.RoleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>[]
        }
        create: {
          args: Prisma.RoleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        createMany: {
          args: Prisma.RoleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>[]
        }
        delete: {
          args: Prisma.RoleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        update: {
          args: Prisma.RoleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        deleteMany: {
          args: Prisma.RoleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RoleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>[]
        }
        upsert: {
          args: Prisma.RoleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        aggregate: {
          args: Prisma.RoleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRole>
        }
        groupBy: {
          args: Prisma.RoleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoleGroupByOutputType>[]
        }
        count: {
          args: Prisma.RoleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoleCountAggregateOutputType> | number
        }
      }
    }
    UserRole: {
      payload: Prisma.$UserRolePayload<ExtArgs>
      fields: Prisma.UserRoleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        findFirst: {
          args: Prisma.UserRoleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        findMany: {
          args: Prisma.UserRoleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>[]
        }
        create: {
          args: Prisma.UserRoleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        createMany: {
          args: Prisma.UserRoleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserRoleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>[]
        }
        delete: {
          args: Prisma.UserRoleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        update: {
          args: Prisma.UserRoleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        deleteMany: {
          args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserRoleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>[]
        }
        upsert: {
          args: Prisma.UserRoleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        aggregate: {
          args: Prisma.UserRoleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserRole>
        }
        groupBy: {
          args: Prisma.UserRoleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserRoleGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserRoleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserRoleCountAggregateOutputType> | number
        }
      }
    }
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Post: {
      payload: Prisma.$PostPayload<ExtArgs>
      fields: Prisma.PostFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PostFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>
        }
        findFirst: {
          args: Prisma.PostFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>
        }
        findMany: {
          args: Prisma.PostFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>[]
        }
        create: {
          args: Prisma.PostCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>
        }
        createMany: {
          args: Prisma.PostCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>[]
        }
        delete: {
          args: Prisma.PostDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>
        }
        update: {
          args: Prisma.PostUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>
        }
        deleteMany: {
          args: Prisma.PostDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PostUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PostUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>[]
        }
        upsert: {
          args: Prisma.PostUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>
        }
        aggregate: {
          args: Prisma.PostAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePost>
        }
        groupBy: {
          args: Prisma.PostGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PostGroupByOutputType>[]
        }
        count: {
          args: Prisma.PostCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PostCountAggregateOutputType> | number
        }
      }
    }
    Blog: {
      payload: Prisma.$BlogPayload<ExtArgs>
      fields: Prisma.BlogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.BlogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.BlogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>
        }
        findFirst: {
          args: Prisma.BlogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.BlogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>
        }
        findMany: {
          args: Prisma.BlogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>[]
        }
        create: {
          args: Prisma.BlogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>
        }
        createMany: {
          args: Prisma.BlogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.BlogCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>[]
        }
        delete: {
          args: Prisma.BlogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>
        }
        update: {
          args: Prisma.BlogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>
        }
        deleteMany: {
          args: Prisma.BlogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.BlogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.BlogUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>[]
        }
        upsert: {
          args: Prisma.BlogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BlogPayload>
        }
        aggregate: {
          args: Prisma.BlogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBlog>
        }
        groupBy: {
          args: Prisma.BlogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BlogGroupByOutputType>[]
        }
        count: {
          args: Prisma.BlogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BlogCountAggregateOutputType> | number
        }
      }
    }
    Media: {
      payload: Prisma.$MediaPayload<ExtArgs>
      fields: Prisma.MediaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MediaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MediaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>
        }
        findFirst: {
          args: Prisma.MediaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MediaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>
        }
        findMany: {
          args: Prisma.MediaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>[]
        }
        create: {
          args: Prisma.MediaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>
        }
        createMany: {
          args: Prisma.MediaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MediaCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>[]
        }
        delete: {
          args: Prisma.MediaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>
        }
        update: {
          args: Prisma.MediaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>
        }
        deleteMany: {
          args: Prisma.MediaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MediaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MediaUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>[]
        }
        upsert: {
          args: Prisma.MediaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>
        }
        aggregate: {
          args: Prisma.MediaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMedia>
        }
        groupBy: {
          args: Prisma.MediaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MediaGroupByOutputType>[]
        }
        count: {
          args: Prisma.MediaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MediaCountAggregateOutputType> | number
        }
      }
    }
    Category: {
      payload: Prisma.$CategoryPayload<ExtArgs>
      fields: Prisma.CategoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CategoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        findFirst: {
          args: Prisma.CategoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        findMany: {
          args: Prisma.CategoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>[]
        }
        create: {
          args: Prisma.CategoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        createMany: {
          args: Prisma.CategoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>[]
        }
        delete: {
          args: Prisma.CategoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        update: {
          args: Prisma.CategoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        deleteMany: {
          args: Prisma.CategoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CategoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>[]
        }
        upsert: {
          args: Prisma.CategoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        aggregate: {
          args: Prisma.CategoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCategory>
        }
        groupBy: {
          args: Prisma.CategoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CategoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.CategoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CategoryCountAggregateOutputType> | number
        }
      }
    }
    Like: {
      payload: Prisma.$LikePayload<ExtArgs>
      fields: Prisma.LikeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.LikeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.LikeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>
        }
        findFirst: {
          args: Prisma.LikeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.LikeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>
        }
        findMany: {
          args: Prisma.LikeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>[]
        }
        create: {
          args: Prisma.LikeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>
        }
        createMany: {
          args: Prisma.LikeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.LikeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>[]
        }
        delete: {
          args: Prisma.LikeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>
        }
        update: {
          args: Prisma.LikeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>
        }
        deleteMany: {
          args: Prisma.LikeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.LikeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.LikeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>[]
        }
        upsert: {
          args: Prisma.LikeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>
        }
        aggregate: {
          args: Prisma.LikeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLike>
        }
        groupBy: {
          args: Prisma.LikeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LikeGroupByOutputType>[]
        }
        count: {
          args: Prisma.LikeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LikeCountAggregateOutputType> | number
        }
      }
    }
    CommentLike: {
      payload: Prisma.$CommentLikePayload<ExtArgs>
      fields: Prisma.CommentLikeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CommentLikeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentLikePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CommentLikeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentLikePayload>
        }
        findFirst: {
          args: Prisma.CommentLikeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentLikePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CommentLikeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentLikePayload>
        }
        findMany: {
          args: Prisma.CommentLikeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentLikePayload>[]
        }
        create: {
          args: Prisma.CommentLikeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentLikePayload>
        }
        createMany: {
          args: Prisma.CommentLikeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CommentLikeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentLikePayload>[]
        }
        delete: {
          args: Prisma.CommentLikeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentLikePayload>
        }
        update: {
          args: Prisma.CommentLikeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentLikePayload>
        }
        deleteMany: {
          args: Prisma.CommentLikeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CommentLikeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CommentLikeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentLikePayload>[]
        }
        upsert: {
          args: Prisma.CommentLikeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentLikePayload>
        }
        aggregate: {
          args: Prisma.CommentLikeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCommentLike>
        }
        groupBy: {
          args: Prisma.CommentLikeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CommentLikeGroupByOutputType>[]
        }
        count: {
          args: Prisma.CommentLikeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CommentLikeCountAggregateOutputType> | number
        }
      }
    }
    Comment: {
      payload: Prisma.$CommentPayload<ExtArgs>
      fields: Prisma.CommentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CommentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        findFirst: {
          args: Prisma.CommentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        findMany: {
          args: Prisma.CommentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>[]
        }
        create: {
          args: Prisma.CommentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        createMany: {
          args: Prisma.CommentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>[]
        }
        delete: {
          args: Prisma.CommentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        update: {
          args: Prisma.CommentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        deleteMany: {
          args: Prisma.CommentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CommentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>[]
        }
        upsert: {
          args: Prisma.CommentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        aggregate: {
          args: Prisma.CommentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateComment>
        }
        groupBy: {
          args: Prisma.CommentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CommentGroupByOutputType>[]
        }
        count: {
          args: Prisma.CommentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CommentCountAggregateOutputType> | number
        }
      }
    }
    Share: {
      payload: Prisma.$SharePayload<ExtArgs>
      fields: Prisma.ShareFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ShareFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SharePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ShareFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SharePayload>
        }
        findFirst: {
          args: Prisma.ShareFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SharePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ShareFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SharePayload>
        }
        findMany: {
          args: Prisma.ShareFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SharePayload>[]
        }
        create: {
          args: Prisma.ShareCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SharePayload>
        }
        createMany: {
          args: Prisma.ShareCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ShareCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SharePayload>[]
        }
        delete: {
          args: Prisma.ShareDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SharePayload>
        }
        update: {
          args: Prisma.ShareUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SharePayload>
        }
        deleteMany: {
          args: Prisma.ShareDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ShareUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ShareUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SharePayload>[]
        }
        upsert: {
          args: Prisma.ShareUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SharePayload>
        }
        aggregate: {
          args: Prisma.ShareAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateShare>
        }
        groupBy: {
          args: Prisma.ShareGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ShareGroupByOutputType>[]
        }
        count: {
          args: Prisma.ShareCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ShareCountAggregateOutputType> | number
        }
      }
    }
    Follow: {
      payload: Prisma.$FollowPayload<ExtArgs>
      fields: Prisma.FollowFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FollowFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FollowFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>
        }
        findFirst: {
          args: Prisma.FollowFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FollowFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>
        }
        findMany: {
          args: Prisma.FollowFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>[]
        }
        create: {
          args: Prisma.FollowCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>
        }
        createMany: {
          args: Prisma.FollowCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FollowCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>[]
        }
        delete: {
          args: Prisma.FollowDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>
        }
        update: {
          args: Prisma.FollowUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>
        }
        deleteMany: {
          args: Prisma.FollowDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FollowUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FollowUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>[]
        }
        upsert: {
          args: Prisma.FollowUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>
        }
        aggregate: {
          args: Prisma.FollowAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFollow>
        }
        groupBy: {
          args: Prisma.FollowGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FollowGroupByOutputType>[]
        }
        count: {
          args: Prisma.FollowCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FollowCountAggregateOutputType> | number
        }
      }
    }
    Bookmark: {
      payload: Prisma.$BookmarkPayload<ExtArgs>
      fields: Prisma.BookmarkFieldRefs
      operations: {
        findUnique: {
          args: Prisma.BookmarkFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.BookmarkFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>
        }
        findFirst: {
          args: Prisma.BookmarkFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.BookmarkFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>
        }
        findMany: {
          args: Prisma.BookmarkFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>[]
        }
        create: {
          args: Prisma.BookmarkCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>
        }
        createMany: {
          args: Prisma.BookmarkCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.BookmarkCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>[]
        }
        delete: {
          args: Prisma.BookmarkDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>
        }
        update: {
          args: Prisma.BookmarkUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>
        }
        deleteMany: {
          args: Prisma.BookmarkDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.BookmarkUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.BookmarkUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>[]
        }
        upsert: {
          args: Prisma.BookmarkUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>
        }
        aggregate: {
          args: Prisma.BookmarkAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBookmark>
        }
        groupBy: {
          args: Prisma.BookmarkGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BookmarkGroupByOutputType>[]
        }
        count: {
          args: Prisma.BookmarkCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BookmarkCountAggregateOutputType> | number
        }
      }
    }
    Rating: {
      payload: Prisma.$RatingPayload<ExtArgs>
      fields: Prisma.RatingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RatingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RatingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RatingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RatingPayload>
        }
        findFirst: {
          args: Prisma.RatingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RatingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RatingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RatingPayload>
        }
        findMany: {
          args: Prisma.RatingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RatingPayload>[]
        }
        create: {
          args: Prisma.RatingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RatingPayload>
        }
        createMany: {
          args: Prisma.RatingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.RatingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RatingPayload>[]
        }
        delete: {
          args: Prisma.RatingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RatingPayload>
        }
        update: {
          args: Prisma.RatingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RatingPayload>
        }
        deleteMany: {
          args: Prisma.RatingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RatingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.RatingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RatingPayload>[]
        }
        upsert: {
          args: Prisma.RatingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RatingPayload>
        }
        aggregate: {
          args: Prisma.RatingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRating>
        }
        groupBy: {
          args: Prisma.RatingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RatingGroupByOutputType>[]
        }
        count: {
          args: Prisma.RatingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RatingCountAggregateOutputType> | number
        }
      }
    }
    Collection: {
      payload: Prisma.$CollectionPayload<ExtArgs>
      fields: Prisma.CollectionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CollectionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CollectionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionPayload>
        }
        findFirst: {
          args: Prisma.CollectionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CollectionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionPayload>
        }
        findMany: {
          args: Prisma.CollectionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionPayload>[]
        }
        create: {
          args: Prisma.CollectionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionPayload>
        }
        createMany: {
          args: Prisma.CollectionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CollectionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionPayload>[]
        }
        delete: {
          args: Prisma.CollectionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionPayload>
        }
        update: {
          args: Prisma.CollectionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionPayload>
        }
        deleteMany: {
          args: Prisma.CollectionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CollectionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CollectionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionPayload>[]
        }
        upsert: {
          args: Prisma.CollectionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionPayload>
        }
        aggregate: {
          args: Prisma.CollectionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCollection>
        }
        groupBy: {
          args: Prisma.CollectionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CollectionGroupByOutputType>[]
        }
        count: {
          args: Prisma.CollectionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CollectionCountAggregateOutputType> | number
        }
      }
    }
    Report: {
      payload: Prisma.$ReportPayload<ExtArgs>
      fields: Prisma.ReportFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ReportFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        findFirst: {
          args: Prisma.ReportFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        findMany: {
          args: Prisma.ReportFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[]
        }
        create: {
          args: Prisma.ReportCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        createMany: {
          args: Prisma.ReportCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[]
        }
        delete: {
          args: Prisma.ReportDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        update: {
          args: Prisma.ReportUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        deleteMany: {
          args: Prisma.ReportDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ReportUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ReportUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[]
        }
        upsert: {
          args: Prisma.ReportUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        aggregate: {
          args: Prisma.ReportAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateReport>
        }
        groupBy: {
          args: Prisma.ReportGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReportGroupByOutputType>[]
        }
        count: {
          args: Prisma.ReportCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReportCountAggregateOutputType> | number
        }
      }
    }
    UserAccess: {
      payload: Prisma.$UserAccessPayload<ExtArgs>
      fields: Prisma.UserAccessFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserAccessFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAccessPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserAccessFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAccessPayload>
        }
        findFirst: {
          args: Prisma.UserAccessFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAccessPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserAccessFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAccessPayload>
        }
        findMany: {
          args: Prisma.UserAccessFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAccessPayload>[]
        }
        create: {
          args: Prisma.UserAccessCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAccessPayload>
        }
        createMany: {
          args: Prisma.UserAccessCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserAccessCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAccessPayload>[]
        }
        delete: {
          args: Prisma.UserAccessDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAccessPayload>
        }
        update: {
          args: Prisma.UserAccessUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAccessPayload>
        }
        deleteMany: {
          args: Prisma.UserAccessDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserAccessUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserAccessUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAccessPayload>[]
        }
        upsert: {
          args: Prisma.UserAccessUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAccessPayload>
        }
        aggregate: {
          args: Prisma.UserAccessAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserAccess>
        }
        groupBy: {
          args: Prisma.UserAccessGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserAccessGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserAccessCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserAccessCountAggregateOutputType> | number
        }
      }
    }
    Plan: {
      payload: Prisma.$PlanPayload<ExtArgs>
      fields: Prisma.PlanFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PlanFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlanPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PlanFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlanPayload>
        }
        findFirst: {
          args: Prisma.PlanFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlanPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PlanFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlanPayload>
        }
        findMany: {
          args: Prisma.PlanFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlanPayload>[]
        }
        create: {
          args: Prisma.PlanCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlanPayload>
        }
        createMany: {
          args: Prisma.PlanCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PlanCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlanPayload>[]
        }
        delete: {
          args: Prisma.PlanDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlanPayload>
        }
        update: {
          args: Prisma.PlanUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlanPayload>
        }
        deleteMany: {
          args: Prisma.PlanDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PlanUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PlanUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlanPayload>[]
        }
        upsert: {
          args: Prisma.PlanUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlanPayload>
        }
        aggregate: {
          args: Prisma.PlanAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePlan>
        }
        groupBy: {
          args: Prisma.PlanGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PlanGroupByOutputType>[]
        }
        count: {
          args: Prisma.PlanCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PlanCountAggregateOutputType> | number
        }
      }
    }
    UserUsage: {
      payload: Prisma.$UserUsagePayload<ExtArgs>
      fields: Prisma.UserUsageFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserUsageFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserUsagePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserUsageFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserUsagePayload>
        }
        findFirst: {
          args: Prisma.UserUsageFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserUsagePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserUsageFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserUsagePayload>
        }
        findMany: {
          args: Prisma.UserUsageFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserUsagePayload>[]
        }
        create: {
          args: Prisma.UserUsageCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserUsagePayload>
        }
        createMany: {
          args: Prisma.UserUsageCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserUsageCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserUsagePayload>[]
        }
        delete: {
          args: Prisma.UserUsageDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserUsagePayload>
        }
        update: {
          args: Prisma.UserUsageUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserUsagePayload>
        }
        deleteMany: {
          args: Prisma.UserUsageDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUsageUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUsageUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserUsagePayload>[]
        }
        upsert: {
          args: Prisma.UserUsageUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserUsagePayload>
        }
        aggregate: {
          args: Prisma.UserUsageAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserUsage>
        }
        groupBy: {
          args: Prisma.UserUsageGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserUsageGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserUsageCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserUsageCountAggregateOutputType> | number
        }
      }
    }
    ArtGeneration: {
      payload: Prisma.$ArtGenerationPayload<ExtArgs>
      fields: Prisma.ArtGenerationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ArtGenerationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArtGenerationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ArtGenerationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArtGenerationPayload>
        }
        findFirst: {
          args: Prisma.ArtGenerationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArtGenerationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ArtGenerationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArtGenerationPayload>
        }
        findMany: {
          args: Prisma.ArtGenerationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArtGenerationPayload>[]
        }
        create: {
          args: Prisma.ArtGenerationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArtGenerationPayload>
        }
        createMany: {
          args: Prisma.ArtGenerationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ArtGenerationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArtGenerationPayload>[]
        }
        delete: {
          args: Prisma.ArtGenerationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArtGenerationPayload>
        }
        update: {
          args: Prisma.ArtGenerationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArtGenerationPayload>
        }
        deleteMany: {
          args: Prisma.ArtGenerationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ArtGenerationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ArtGenerationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArtGenerationPayload>[]
        }
        upsert: {
          args: Prisma.ArtGenerationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArtGenerationPayload>
        }
        aggregate: {
          args: Prisma.ArtGenerationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateArtGeneration>
        }
        groupBy: {
          args: Prisma.ArtGenerationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ArtGenerationGroupByOutputType>[]
        }
        count: {
          args: Prisma.ArtGenerationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ArtGenerationCountAggregateOutputType> | number
        }
      }
    }
    TrendingPrompt: {
      payload: Prisma.$TrendingPromptPayload<ExtArgs>
      fields: Prisma.TrendingPromptFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TrendingPromptFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrendingPromptPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TrendingPromptFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrendingPromptPayload>
        }
        findFirst: {
          args: Prisma.TrendingPromptFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrendingPromptPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TrendingPromptFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrendingPromptPayload>
        }
        findMany: {
          args: Prisma.TrendingPromptFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrendingPromptPayload>[]
        }
        create: {
          args: Prisma.TrendingPromptCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrendingPromptPayload>
        }
        createMany: {
          args: Prisma.TrendingPromptCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TrendingPromptCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrendingPromptPayload>[]
        }
        delete: {
          args: Prisma.TrendingPromptDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrendingPromptPayload>
        }
        update: {
          args: Prisma.TrendingPromptUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrendingPromptPayload>
        }
        deleteMany: {
          args: Prisma.TrendingPromptDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TrendingPromptUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TrendingPromptUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrendingPromptPayload>[]
        }
        upsert: {
          args: Prisma.TrendingPromptUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrendingPromptPayload>
        }
        aggregate: {
          args: Prisma.TrendingPromptAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTrendingPrompt>
        }
        groupBy: {
          args: Prisma.TrendingPromptGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TrendingPromptGroupByOutputType>[]
        }
        count: {
          args: Prisma.TrendingPromptCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TrendingPromptCountAggregateOutputType> | number
        }
      }
    }
    Notification: {
      payload: Prisma.$NotificationPayload<ExtArgs>
      fields: Prisma.NotificationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.NotificationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        findFirst: {
          args: Prisma.NotificationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        findMany: {
          args: Prisma.NotificationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[]
        }
        create: {
          args: Prisma.NotificationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        createMany: {
          args: Prisma.NotificationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[]
        }
        delete: {
          args: Prisma.NotificationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        update: {
          args: Prisma.NotificationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        deleteMany: {
          args: Prisma.NotificationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.NotificationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[]
        }
        upsert: {
          args: Prisma.NotificationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        aggregate: {
          args: Prisma.NotificationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNotification>
        }
        groupBy: {
          args: Prisma.NotificationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.NotificationGroupByOutputType>[]
        }
        count: {
          args: Prisma.NotificationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.NotificationCountAggregateOutputType> | number
        }
      }
    }
    Platform: {
      payload: Prisma.$PlatformPayload<ExtArgs>
      fields: Prisma.PlatformFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PlatformFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PlatformFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformPayload>
        }
        findFirst: {
          args: Prisma.PlatformFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PlatformFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformPayload>
        }
        findMany: {
          args: Prisma.PlatformFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformPayload>[]
        }
        create: {
          args: Prisma.PlatformCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformPayload>
        }
        createMany: {
          args: Prisma.PlatformCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PlatformCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformPayload>[]
        }
        delete: {
          args: Prisma.PlatformDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformPayload>
        }
        update: {
          args: Prisma.PlatformUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformPayload>
        }
        deleteMany: {
          args: Prisma.PlatformDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PlatformUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PlatformUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformPayload>[]
        }
        upsert: {
          args: Prisma.PlatformUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformPayload>
        }
        aggregate: {
          args: Prisma.PlatformAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePlatform>
        }
        groupBy: {
          args: Prisma.PlatformGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PlatformGroupByOutputType>[]
        }
        count: {
          args: Prisma.PlatformCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PlatformCountAggregateOutputType> | number
        }
      }
    }
    AutoProject: {
      payload: Prisma.$AutoProjectPayload<ExtArgs>
      fields: Prisma.AutoProjectFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AutoProjectFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoProjectPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AutoProjectFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoProjectPayload>
        }
        findFirst: {
          args: Prisma.AutoProjectFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoProjectPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AutoProjectFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoProjectPayload>
        }
        findMany: {
          args: Prisma.AutoProjectFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoProjectPayload>[]
        }
        create: {
          args: Prisma.AutoProjectCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoProjectPayload>
        }
        createMany: {
          args: Prisma.AutoProjectCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AutoProjectCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoProjectPayload>[]
        }
        delete: {
          args: Prisma.AutoProjectDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoProjectPayload>
        }
        update: {
          args: Prisma.AutoProjectUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoProjectPayload>
        }
        deleteMany: {
          args: Prisma.AutoProjectDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AutoProjectUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AutoProjectUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoProjectPayload>[]
        }
        upsert: {
          args: Prisma.AutoProjectUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoProjectPayload>
        }
        aggregate: {
          args: Prisma.AutoProjectAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAutoProject>
        }
        groupBy: {
          args: Prisma.AutoProjectGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AutoProjectGroupByOutputType>[]
        }
        count: {
          args: Prisma.AutoProjectCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AutoProjectCountAggregateOutputType> | number
        }
      }
    }
    AutoPost: {
      payload: Prisma.$AutoPostPayload<ExtArgs>
      fields: Prisma.AutoPostFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AutoPostFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoPostPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AutoPostFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoPostPayload>
        }
        findFirst: {
          args: Prisma.AutoPostFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoPostPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AutoPostFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoPostPayload>
        }
        findMany: {
          args: Prisma.AutoPostFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoPostPayload>[]
        }
        create: {
          args: Prisma.AutoPostCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoPostPayload>
        }
        createMany: {
          args: Prisma.AutoPostCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AutoPostCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoPostPayload>[]
        }
        delete: {
          args: Prisma.AutoPostDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoPostPayload>
        }
        update: {
          args: Prisma.AutoPostUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoPostPayload>
        }
        deleteMany: {
          args: Prisma.AutoPostDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AutoPostUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AutoPostUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoPostPayload>[]
        }
        upsert: {
          args: Prisma.AutoPostUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AutoPostPayload>
        }
        aggregate: {
          args: Prisma.AutoPostAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAutoPost>
        }
        groupBy: {
          args: Prisma.AutoPostGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AutoPostGroupByOutputType>[]
        }
        count: {
          args: Prisma.AutoPostCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AutoPostCountAggregateOutputType> | number
        }
      }
    }
    Conversation: {
      payload: Prisma.$ConversationPayload<ExtArgs>
      fields: Prisma.ConversationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ConversationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConversationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ConversationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConversationPayload>
        }
        findFirst: {
          args: Prisma.ConversationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConversationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ConversationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConversationPayload>
        }
        findMany: {
          args: Prisma.ConversationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConversationPayload>[]
        }
        create: {
          args: Prisma.ConversationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConversationPayload>
        }
        createMany: {
          args: Prisma.ConversationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ConversationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConversationPayload>[]
        }
        delete: {
          args: Prisma.ConversationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConversationPayload>
        }
        update: {
          args: Prisma.ConversationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConversationPayload>
        }
        deleteMany: {
          args: Prisma.ConversationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ConversationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ConversationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConversationPayload>[]
        }
        upsert: {
          args: Prisma.ConversationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConversationPayload>
        }
        aggregate: {
          args: Prisma.ConversationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateConversation>
        }
        groupBy: {
          args: Prisma.ConversationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ConversationGroupByOutputType>[]
        }
        count: {
          args: Prisma.ConversationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ConversationCountAggregateOutputType> | number
        }
      }
    }
    Message: {
      payload: Prisma.$MessagePayload<ExtArgs>
      fields: Prisma.MessageFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MessageFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>
        }
        findFirst: {
          args: Prisma.MessageFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>
        }
        findMany: {
          args: Prisma.MessageFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>[]
        }
        create: {
          args: Prisma.MessageCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>
        }
        createMany: {
          args: Prisma.MessageCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>[]
        }
        delete: {
          args: Prisma.MessageDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>
        }
        update: {
          args: Prisma.MessageUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>
        }
        deleteMany: {
          args: Prisma.MessageDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MessageUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>[]
        }
        upsert: {
          args: Prisma.MessageUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>
        }
        aggregate: {
          args: Prisma.MessageAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMessage>
        }
        groupBy: {
          args: Prisma.MessageGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MessageGroupByOutputType>[]
        }
        count: {
          args: Prisma.MessageCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MessageCountAggregateOutputType> | number
        }
      }
    }
    FacebookAccount: {
      payload: Prisma.$FacebookAccountPayload<ExtArgs>
      fields: Prisma.FacebookAccountFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FacebookAccountFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacebookAccountPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FacebookAccountFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacebookAccountPayload>
        }
        findFirst: {
          args: Prisma.FacebookAccountFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacebookAccountPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FacebookAccountFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacebookAccountPayload>
        }
        findMany: {
          args: Prisma.FacebookAccountFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacebookAccountPayload>[]
        }
        create: {
          args: Prisma.FacebookAccountCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacebookAccountPayload>
        }
        createMany: {
          args: Prisma.FacebookAccountCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FacebookAccountCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacebookAccountPayload>[]
        }
        delete: {
          args: Prisma.FacebookAccountDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacebookAccountPayload>
        }
        update: {
          args: Prisma.FacebookAccountUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacebookAccountPayload>
        }
        deleteMany: {
          args: Prisma.FacebookAccountDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FacebookAccountUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FacebookAccountUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacebookAccountPayload>[]
        }
        upsert: {
          args: Prisma.FacebookAccountUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacebookAccountPayload>
        }
        aggregate: {
          args: Prisma.FacebookAccountAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFacebookAccount>
        }
        groupBy: {
          args: Prisma.FacebookAccountGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FacebookAccountGroupByOutputType>[]
        }
        count: {
          args: Prisma.FacebookAccountCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FacebookAccountCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const RoleScalarFieldEnum = {
  role_id: 'role_id',
  role_name: 'role_name',
  createdAt: 'createdAt'
} as const

export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


export const UserRoleScalarFieldEnum = {
  user_id: 'user_id',
  role_id: 'role_id',
  assignedAt: 'assignedAt'
} as const

export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


export const UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  full_name: 'full_name',
  profile_picture_url: 'profile_picture_url',
  bio: 'bio',
  created_at: 'created_at',
  updated_at: 'updated_at',
  refresh_token: 'refresh_token',
  birthday: 'birthday',
  followers_count: 'followers_count',
  followings_count: 'followings_count',
  stripe_customer_id: 'stripe_customer_id',
  is_onboard: 'is_onboard',
  status: 'status'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const PostScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  title: 'title',
  description: 'description',
  created_at: 'created_at',
  is_published: 'is_published',
  is_private: 'is_private',
  group_id: 'group_id',
  share_count: 'share_count',
  comment_count: 'comment_count',
  view_count: 'view_count',
  like_count: 'like_count',
  thumbnail_url: 'thumbnail_url',
  updated_at: 'updated_at',
  is_mature: 'is_mature',
  ai_created: 'ai_created',
  art_generation_id: 'art_generation_id',
  thumbnail_crop_meta: 'thumbnail_crop_meta',
  collectionId: 'collectionId'
} as const

export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


export const BlogScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  title: 'title',
  content: 'content',
  created_at: 'created_at',
  is_published: 'is_published',
  like_count: 'like_count',
  comment_count: 'comment_count',
  share_count: 'share_count',
  updated_at: 'updated_at',
  average_rating: 'average_rating',
  is_protected: 'is_protected',
  rating_count: 'rating_count',
  pictures: 'pictures',
  embedded_videos: 'embedded_videos',
  view_count: 'view_count'
} as const

export type BlogScalarFieldEnum = (typeof BlogScalarFieldEnum)[keyof typeof BlogScalarFieldEnum]


export const MediaScalarFieldEnum = {
  id: 'id',
  post_id: 'post_id',
  media_type: 'media_type',
  description: 'description',
  url: 'url',
  downloads: 'downloads',
  created_at: 'created_at',
  creator_id: 'creator_id'
} as const

export type MediaScalarFieldEnum = (typeof MediaScalarFieldEnum)[keyof typeof MediaScalarFieldEnum]


export const CategoryScalarFieldEnum = {
  created_at: 'created_at',
  id: 'id',
  name: 'name',
  description: 'description',
  example_images: 'example_images',
  type: 'type',
  updated_at: 'updated_at'
} as const

export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


export const LikeScalarFieldEnum = {
  user_id: 'user_id',
  created_at: 'created_at',
  blog_id: 'blog_id',
  id: 'id',
  post_id: 'post_id'
} as const

export type LikeScalarFieldEnum = (typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum]


export const CommentLikeScalarFieldEnum = {
  user_id: 'user_id',
  comment_id: 'comment_id',
  created_at: 'created_at'
} as const

export type CommentLikeScalarFieldEnum = (typeof CommentLikeScalarFieldEnum)[keyof typeof CommentLikeScalarFieldEnum]


export const CommentScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  parent_comment_id: 'parent_comment_id',
  content: 'content',
  created_at: 'created_at',
  updated_at: 'updated_at',
  target_id: 'target_id',
  like_count: 'like_count',
  target_type: 'target_type'
} as const

export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


export const ShareScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  share_platform: 'share_platform',
  created_at: 'created_at',
  blog_id: 'blog_id',
  post_id: 'post_id'
} as const

export type ShareScalarFieldEnum = (typeof ShareScalarFieldEnum)[keyof typeof ShareScalarFieldEnum]


export const FollowScalarFieldEnum = {
  follower_id: 'follower_id',
  following_id: 'following_id',
  created_at: 'created_at',
  is_subscribed: 'is_subscribed'
} as const

export type FollowScalarFieldEnum = (typeof FollowScalarFieldEnum)[keyof typeof FollowScalarFieldEnum]


export const BookmarkScalarFieldEnum = {
  user_id: 'user_id',
  blog_id: 'blog_id',
  created_at: 'created_at'
} as const

export type BookmarkScalarFieldEnum = (typeof BookmarkScalarFieldEnum)[keyof typeof BookmarkScalarFieldEnum]


export const RatingScalarFieldEnum = {
  user_id: 'user_id',
  blog_id: 'blog_id',
  value: 'value',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


export const CollectionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  is_private: 'is_private',
  thumbnail_url: 'thumbnail_url',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type CollectionScalarFieldEnum = (typeof CollectionScalarFieldEnum)[keyof typeof CollectionScalarFieldEnum]


export const ReportScalarFieldEnum = {
  id: 'id',
  reporter_id: 'reporter_id',
  target_id: 'target_id',
  user_id: 'user_id',
  target_type: 'target_type',
  reason: 'reason',
  status: 'status',
  created_at: 'created_at',
  resolved_at: 'resolved_at',
  resolution_comment: 'resolution_comment',
  moderator_id: 'moderator_id',
  target_url: 'target_url'
} as const

export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


export const UserAccessScalarFieldEnum = {
  userId: 'userId',
  planId: 'planId',
  expiresAt: 'expiresAt',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripePriceId: 'stripePriceId',
  stripeCustomerId: 'stripeCustomerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd'
} as const

export type UserAccessScalarFieldEnum = (typeof UserAccessScalarFieldEnum)[keyof typeof UserAccessScalarFieldEnum]


export const PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  stripeProductId: 'stripeProductId',
  imageQualityAllowed: 'imageQualityAllowed',
  monthlyQuotaCredits: 'monthlyQuotaCredits',
  dailyQuotaCredits: 'dailyQuotaCredits',
  storageQuotaMB: 'storageQuotaMB',
  maxTeamSeats: 'maxTeamSeats',
  allowHighResolution: 'allowHighResolution',
  maxResolutionWidth: 'maxResolutionWidth',
  maxResolutionHeight: 'maxResolutionHeight',
  removeWatermark: 'removeWatermark',
  smartSuggestionsEnabled: 'smartSuggestionsEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PlanScalarFieldEnum = (typeof PlanScalarFieldEnum)[keyof typeof PlanScalarFieldEnum]


export const UserUsageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  featureKey: 'featureKey',
  usedAmount: 'usedAmount',
  cycleStartedAt: 'cycleStartedAt',
  cycleEndsAt: 'cycleEndsAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserUsageScalarFieldEnum = (typeof UserUsageScalarFieldEnum)[keyof typeof UserUsageScalarFieldEnum]


export const ArtGenerationScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  user_prompt: 'user_prompt',
  final_prompt: 'final_prompt',
  model_key: 'model_key',
  number_of_images_generated: 'number_of_images_generated',
  image_urls: 'image_urls',
  aspect_ratio: 'aspect_ratio',
  style: 'style',
  lighting: 'lighting',
  camera: 'camera',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type ArtGenerationScalarFieldEnum = (typeof ArtGenerationScalarFieldEnum)[keyof typeof ArtGenerationScalarFieldEnum]


export const TrendingPromptScalarFieldEnum = {
  id: 'id',
  prompt_key: 'prompt_key',
  prompts: 'prompts',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type TrendingPromptScalarFieldEnum = (typeof TrendingPromptScalarFieldEnum)[keyof typeof TrendingPromptScalarFieldEnum]


export const NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  payload: 'payload',
  isRead: 'isRead',
  createdAt: 'createdAt'
} as const

export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


export const PlatformScalarFieldEnum = {
  id: 'id',
  config: 'config',
  user_id: 'user_id',
  external_page_id: 'external_page_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  token_expires_at: 'token_expires_at',
  picture_url: 'picture_url',
  facebook_account_id: 'facebook_account_id',
  name: 'name',
  status: 'status'
} as const

export type PlatformScalarFieldEnum = (typeof PlatformScalarFieldEnum)[keyof typeof PlatformScalarFieldEnum]


export const AutoProjectScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  created_at: 'created_at',
  user_id: 'user_id',
  updated_at: 'updated_at',
  platform_id: 'platform_id'
} as const

export type AutoProjectScalarFieldEnum = (typeof AutoProjectScalarFieldEnum)[keyof typeof AutoProjectScalarFieldEnum]


export const AutoPostScalarFieldEnum = {
  id: 'id',
  auto_project_id: 'auto_project_id',
  content: 'content',
  image_urls: 'image_urls',
  scheduled_at: 'scheduled_at',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  posted_at: 'posted_at',
  error_message: 'error_message',
  n8n_triggered_at: 'n8n_triggered_at',
  n8n_execution_id: 'n8n_execution_id',
  platform_post_id: 'platform_post_id'
} as const

export type AutoPostScalarFieldEnum = (typeof AutoPostScalarFieldEnum)[keyof typeof AutoPostScalarFieldEnum]


export const ConversationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  lastMessageAt: 'lastMessageAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ConversationScalarFieldEnum = (typeof ConversationScalarFieldEnum)[keyof typeof ConversationScalarFieldEnum]


export const MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  role: 'role',
  content: 'content',
  metadata: 'metadata',
  createdAt: 'createdAt'
} as const

export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


export const FacebookAccountScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  facebook_user_id: 'facebook_user_id',
  name: 'name',
  picture_url: 'picture_url',
  long_lived_user_access_token: 'long_lived_user_access_token',
  token_expires_at: 'token_expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type FacebookAccountScalarFieldEnum = (typeof FacebookAccountScalarFieldEnum)[keyof typeof FacebookAccountScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'UserStatus'
 */
export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


/**
 * Reference to a field of type 'UserStatus[]'
 */
export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


/**
 * Reference to a field of type 'MediaType'
 */
export type EnumMediaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MediaType'>
    


/**
 * Reference to a field of type 'MediaType[]'
 */
export type ListEnumMediaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MediaType[]'>
    


/**
 * Reference to a field of type 'CategoryType'
 */
export type EnumCategoryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CategoryType'>
    


/**
 * Reference to a field of type 'CategoryType[]'
 */
export type ListEnumCategoryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CategoryType[]'>
    


/**
 * Reference to a field of type 'TargetType'
 */
export type EnumTargetTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TargetType'>
    


/**
 * Reference to a field of type 'TargetType[]'
 */
export type ListEnumTargetTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TargetType[]'>
    


/**
 * Reference to a field of type 'SharePlatform'
 */
export type EnumSharePlatformFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SharePlatform'>
    


/**
 * Reference to a field of type 'SharePlatform[]'
 */
export type ListEnumSharePlatformFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SharePlatform[]'>
    


/**
 * Reference to a field of type 'ReportTargetType'
 */
export type EnumReportTargetTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportTargetType'>
    


/**
 * Reference to a field of type 'ReportTargetType[]'
 */
export type ListEnumReportTargetTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportTargetType[]'>
    


/**
 * Reference to a field of type 'ReportStatus'
 */
export type EnumReportStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportStatus'>
    


/**
 * Reference to a field of type 'ReportStatus[]'
 */
export type ListEnumReportStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportStatus[]'>
    


/**
 * Reference to a field of type 'PaidAccessLevel'
 */
export type EnumPaidAccessLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaidAccessLevel'>
    


/**
 * Reference to a field of type 'PaidAccessLevel[]'
 */
export type ListEnumPaidAccessLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaidAccessLevel[]'>
    


/**
 * Reference to a field of type 'ImageQuality'
 */
export type EnumImageQualityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ImageQuality'>
    


/**
 * Reference to a field of type 'ImageQuality[]'
 */
export type ListEnumImageQualityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ImageQuality[]'>
    


/**
 * Reference to a field of type 'AspectRatio'
 */
export type EnumAspectRatioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AspectRatio'>
    


/**
 * Reference to a field of type 'AspectRatio[]'
 */
export type ListEnumAspectRatioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AspectRatio[]'>
    


/**
 * Reference to a field of type 'PlatformStatus'
 */
export type EnumPlatformStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlatformStatus'>
    


/**
 * Reference to a field of type 'PlatformStatus[]'
 */
export type ListEnumPlatformStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlatformStatus[]'>
    


/**
 * Reference to a field of type 'AutoProjectStatus'
 */
export type EnumAutoProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AutoProjectStatus'>
    


/**
 * Reference to a field of type 'AutoProjectStatus[]'
 */
export type ListEnumAutoProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AutoProjectStatus[]'>
    


/**
 * Reference to a field of type 'AutoPostStatus'
 */
export type EnumAutoPostStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AutoPostStatus'>
    


/**
 * Reference to a field of type 'AutoPostStatus[]'
 */
export type ListEnumAutoPostStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AutoPostStatus[]'>
    


/**
 * Reference to a field of type 'MessageRole'
 */
export type EnumMessageRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageRole'>
    


/**
 * Reference to a field of type 'MessageRole[]'
 */
export type ListEnumMessageRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageRole[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  role?: Prisma.RoleOmit
  userRole?: Prisma.UserRoleOmit
  user?: Prisma.UserOmit
  post?: Prisma.PostOmit
  blog?: Prisma.BlogOmit
  media?: Prisma.MediaOmit
  category?: Prisma.CategoryOmit
  like?: Prisma.LikeOmit
  commentLike?: Prisma.CommentLikeOmit
  comment?: Prisma.CommentOmit
  share?: Prisma.ShareOmit
  follow?: Prisma.FollowOmit
  bookmark?: Prisma.BookmarkOmit
  rating?: Prisma.RatingOmit
  collection?: Prisma.CollectionOmit
  report?: Prisma.ReportOmit
  userAccess?: Prisma.UserAccessOmit
  plan?: Prisma.PlanOmit
  userUsage?: Prisma.UserUsageOmit
  artGeneration?: Prisma.ArtGenerationOmit
  trendingPrompt?: Prisma.TrendingPromptOmit
  notification?: Prisma.NotificationOmit
  platform?: Prisma.PlatformOmit
  autoProject?: Prisma.AutoProjectOmit
  autoPost?: Prisma.AutoPostOmit
  conversation?: Prisma.ConversationOmit
  message?: Prisma.MessageOmit
  facebookAccount?: Prisma.FacebookAccountOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

